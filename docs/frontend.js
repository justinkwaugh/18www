/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 163);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__(161)(module)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Knockout JavaScript library v3.4.2
 * (c) The Knockout.js team - http://knockoutjs.com/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function(){
var DEBUG=true;
(function(undefined){
    // (0, eval)('this') is a robust way of getting a reference to the global object
    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023
    var window = this || (0, eval)('this'),
        document = window['document'],
        navigator = window['navigator'],
        jQueryInstance = window["jQuery"],
        JSON = window["JSON"];
(function(factory) {
    // Support three module loading scenarios
    if (true) {
        // [1] AMD anonymous module
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports === 'object' && typeof module === 'object') {
        // [2] CommonJS/Node.js
        factory(module['exports'] || exports);  // module.exports is for Node.js
    } else {
        // [3] No module loader (plain <script> tag) - put directly in global namespace
        factory(window['ko'] = {});
    }
}(function(koExports, amdRequire){
// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).
// In the future, the following "ko" variable may be made distinct from "koExports" so that private objects are not externally reachable.
var ko = typeof koExports !== 'undefined' ? koExports : {};
// Google Closure Compiler helpers (used only to make the minified file smaller)
ko.exportSymbol = function(koPath, object) {
    var tokens = koPath.split(".");

    // In the future, "ko" may become distinct from "koExports" (so that non-exported objects are not reachable)
    // At that point, "target" would be set to: (typeof koExports !== "undefined" ? koExports : ko)
    var target = ko;

    for (var i = 0; i < tokens.length - 1; i++)
        target = target[tokens[i]];
    target[tokens[tokens.length - 1]] = object;
};
ko.exportProperty = function(owner, publicName, object) {
    owner[publicName] = object;
};
ko.version = "3.4.2";

ko.exportSymbol('version', ko.version);
// For any options that may affect various areas of Knockout and aren't directly associated with data binding.
ko.options = {
    'deferUpdates': false,
    'useOnlyNativeEvents': false
};

//ko.exportSymbol('options', ko.options);   // 'options' isn't minified
ko.utils = (function () {
    function objectForEach(obj, action) {
        for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                action(prop, obj[prop]);
            }
        }
    }

    function extend(target, source) {
        if (source) {
            for(var prop in source) {
                if(source.hasOwnProperty(prop)) {
                    target[prop] = source[prop];
                }
            }
        }
        return target;
    }

    function setPrototypeOf(obj, proto) {
        obj.__proto__ = proto;
        return obj;
    }

    var canSetPrototype = ({ __proto__: [] } instanceof Array);
    var canUseSymbols = !DEBUG && typeof Symbol === 'function';

    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)
    var knownEvents = {}, knownEventTypesByEventName = {};
    var keyEventTypeName = (navigator && /Firefox\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';
    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];
    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];
    objectForEach(knownEvents, function(eventType, knownEventsForType) {
        if (knownEventsForType.length) {
            for (var i = 0, j = knownEventsForType.length; i < j; i++)
                knownEventTypesByEventName[knownEventsForType[i]] = eventType;
        }
    });
    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406

    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)
    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.
    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.
    // If there is a future need to detect specific versions of IE10+, we will amend this.
    var ieVersion = document && (function() {
        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');

        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
        while (
            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',
            iElems[0]
        ) {}
        return version > 4 ? version : undefined;
    }());
    var isIe6 = ieVersion === 6,
        isIe7 = ieVersion === 7;

    function isClickOnCheckableElement(element, eventType) {
        if ((ko.utils.tagNameLower(element) !== "input") || !element.type) return false;
        if (eventType.toLowerCase() != "click") return false;
        var inputType = element.type;
        return (inputType == "checkbox") || (inputType == "radio");
    }

    // For details on the pattern for changing node classes
    // see: https://github.com/knockout/knockout/issues/1597
    var cssClassNameRegex = /\S+/g;

    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {
        var addOrRemoveFn;
        if (classNames) {
            if (typeof node.classList === 'object') {
                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];
                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {
                    addOrRemoveFn.call(node.classList, className);
                });
            } else if (typeof node.className['baseVal'] === 'string') {
                // SVG tag .classNames is an SVGAnimatedString instance
                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);
            } else {
                // node.className ought to be a string.
                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);
            }
        }
    }

    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {
        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.
        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];
        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {
            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);
        });
        obj[prop] = currentClassNames.join(" ");
    }

    return {
        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],

        arrayForEach: function (array, action) {
            for (var i = 0, j = array.length; i < j; i++)
                action(array[i], i);
        },

        arrayIndexOf: function (array, item) {
            if (typeof Array.prototype.indexOf == "function")
                return Array.prototype.indexOf.call(array, item);
            for (var i = 0, j = array.length; i < j; i++)
                if (array[i] === item)
                    return i;
            return -1;
        },

        arrayFirst: function (array, predicate, predicateOwner) {
            for (var i = 0, j = array.length; i < j; i++)
                if (predicate.call(predicateOwner, array[i], i))
                    return array[i];
            return null;
        },

        arrayRemoveItem: function (array, itemToRemove) {
            var index = ko.utils.arrayIndexOf(array, itemToRemove);
            if (index > 0) {
                array.splice(index, 1);
            }
            else if (index === 0) {
                array.shift();
            }
        },

        arrayGetDistinctValues: function (array) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++) {
                if (ko.utils.arrayIndexOf(result, array[i]) < 0)
                    result.push(array[i]);
            }
            return result;
        },

        arrayMap: function (array, mapping) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
                result.push(mapping(array[i], i));
            return result;
        },

        arrayFilter: function (array, predicate) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
                if (predicate(array[i], i))
                    result.push(array[i]);
            return result;
        },

        arrayPushAll: function (array, valuesToPush) {
            if (valuesToPush instanceof Array)
                array.push.apply(array, valuesToPush);
            else
                for (var i = 0, j = valuesToPush.length; i < j; i++)
                    array.push(valuesToPush[i]);
            return array;
        },

        addOrRemoveItem: function(array, value, included) {
            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);
            if (existingEntryIndex < 0) {
                if (included)
                    array.push(value);
            } else {
                if (!included)
                    array.splice(existingEntryIndex, 1);
            }
        },

        canSetPrototype: canSetPrototype,

        extend: extend,

        setPrototypeOf: setPrototypeOf,

        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,

        objectForEach: objectForEach,

        objectMap: function(source, mapping) {
            if (!source)
                return source;
            var target = {};
            for (var prop in source) {
                if (source.hasOwnProperty(prop)) {
                    target[prop] = mapping(source[prop], prop, source);
                }
            }
            return target;
        },

        emptyDomNode: function (domNode) {
            while (domNode.firstChild) {
                ko.removeNode(domNode.firstChild);
            }
        },

        moveCleanedNodesToContainerElement: function(nodes) {
            // Ensure it's a real array, as we're about to reparent the nodes and
            // we don't want the underlying collection to change while we're doing that.
            var nodesArray = ko.utils.makeArray(nodes);
            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;

            var container = templateDocument.createElement('div');
            for (var i = 0, j = nodesArray.length; i < j; i++) {
                container.appendChild(ko.cleanNode(nodesArray[i]));
            }
            return container;
        },

        cloneNodes: function (nodesArray, shouldCleanNodes) {
            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {
                var clonedNode = nodesArray[i].cloneNode(true);
                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);
            }
            return newNodesArray;
        },

        setDomNodeChildren: function (domNode, childNodes) {
            ko.utils.emptyDomNode(domNode);
            if (childNodes) {
                for (var i = 0, j = childNodes.length; i < j; i++)
                    domNode.appendChild(childNodes[i]);
            }
        },

        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {
            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;
            if (nodesToReplaceArray.length > 0) {
                var insertionPoint = nodesToReplaceArray[0];
                var parent = insertionPoint.parentNode;
                for (var i = 0, j = newNodesArray.length; i < j; i++)
                    parent.insertBefore(newNodesArray[i], insertionPoint);
                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {
                    ko.removeNode(nodesToReplaceArray[i]);
                }
            }
        },

        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {
            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile
            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that
            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been
            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.
            // So, this function translates the old "map" output array into its best guess of the set of current DOM nodes.
            //
            // Rules:
            //   [A] Any leading nodes that have been removed should be ignored
            //       These most likely correspond to memoization nodes that were already removed during binding
            //       See https://github.com/knockout/knockout/pull/440
            //   [B] Any trailing nodes that have been remove should be ignored
            //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]
            //       See https://github.com/knockout/knockout/pull/1903
            //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,
            //       and include any nodes that have been inserted among the previous collection

            if (continuousNodeArray.length) {
                // The parent node can be a virtual element; so get the real parent node
                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;

                // Rule [A]
                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)
                    continuousNodeArray.splice(0, 1);

                // Rule [B]
                while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)
                    continuousNodeArray.length--;

                // Rule [C]
                if (continuousNodeArray.length > 1) {
                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];
                    // Replace with the actual new continuous node set
                    continuousNodeArray.length = 0;
                    while (current !== last) {
                        continuousNodeArray.push(current);
                        current = current.nextSibling;
                    }
                    continuousNodeArray.push(last);
                }
            }
            return continuousNodeArray;
        },

        setOptionNodeSelectionState: function (optionNode, isSelected) {
            // IE6 sometimes throws "unknown error" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.
            if (ieVersion < 7)
                optionNode.setAttribute("selected", isSelected);
            else
                optionNode.selected = isSelected;
        },

        stringTrim: function (string) {
            return string === null || string === undefined ? '' :
                string.trim ?
                    string.trim() :
                    string.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
        },

        stringStartsWith: function (string, startsWith) {
            string = string || "";
            if (startsWith.length > string.length)
                return false;
            return string.substring(0, startsWith.length) === startsWith;
        },

        domNodeIsContainedBy: function (node, containedByNode) {
            if (node === containedByNode)
                return true;
            if (node.nodeType === 11)
                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8
            if (containedByNode.contains)
                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);
            if (containedByNode.compareDocumentPosition)
                return (containedByNode.compareDocumentPosition(node) & 16) == 16;
            while (node && node != containedByNode) {
                node = node.parentNode;
            }
            return !!node;
        },

        domNodeIsAttachedToDocument: function (node) {
            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);
        },

        anyDomNodeIsAttachedToDocument: function(nodes) {
            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);
        },

        tagNameLower: function(element) {
            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.
            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),
            // we don't need to do the .toLowerCase() as it will always be lower case anyway.
            return element && element.tagName && element.tagName.toLowerCase();
        },

        catchFunctionErrors: function (delegate) {
            return ko['onError'] ? function () {
                try {
                    return delegate.apply(this, arguments);
                } catch (e) {
                    ko['onError'] && ko['onError'](e);
                    throw e;
                }
            } : delegate;
        },

        setTimeout: function (handler, timeout) {
            return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);
        },

        deferError: function (error) {
            setTimeout(function () {
                ko['onError'] && ko['onError'](error);
                throw error;
            }, 0);
        },

        registerEventHandler: function (element, eventType, handler) {
            var wrappedHandler = ko.utils.catchFunctionErrors(handler);

            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];
            if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {
                jQueryInstance(element)['bind'](eventType, wrappedHandler);
            } else if (!mustUseAttachEvent && typeof element.addEventListener == "function")
                element.addEventListener(eventType, wrappedHandler, false);
            else if (typeof element.attachEvent != "undefined") {
                var attachEventHandler = function (event) { wrappedHandler.call(element, event); },
                    attachEventName = "on" + eventType;
                element.attachEvent(attachEventName, attachEventHandler);

                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)
                // so to avoid leaks, we have to remove them manually. See bug #856
                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                    element.detachEvent(attachEventName, attachEventHandler);
                });
            } else
                throw new Error("Browser doesn't support addEventListener or attachEvent");
        },

        triggerEvent: function (element, eventType) {
            if (!(element && element.nodeType))
                throw new Error("element must be a DOM node when calling triggerEvent");

            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the
            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)
            // IE doesn't change the checked state when you trigger the click event using "fireEvent".
            // In both cases, we'll use the click method instead.
            var useClickWorkaround = isClickOnCheckableElement(element, eventType);

            if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {
                jQueryInstance(element)['trigger'](eventType);
            } else if (typeof document.createEvent == "function") {
                if (typeof element.dispatchEvent == "function") {
                    var eventCategory = knownEventTypesByEventName[eventType] || "HTMLEvents";
                    var event = document.createEvent(eventCategory);
                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);
                    element.dispatchEvent(event);
                }
                else
                    throw new Error("The supplied element doesn't support dispatchEvent");
            } else if (useClickWorkaround && element.click) {
                element.click();
            } else if (typeof element.fireEvent != "undefined") {
                element.fireEvent("on" + eventType);
            } else {
                throw new Error("Browser doesn't support triggering events");
            }
        },

        unwrapObservable: function (value) {
            return ko.isObservable(value) ? value() : value;
        },

        peekObservable: function (value) {
            return ko.isObservable(value) ? value.peek() : value;
        },

        toggleDomNodeCssClass: toggleDomNodeCssClass,

        setTextContent: function(element, textContent) {
            var value = ko.utils.unwrapObservable(textContent);
            if ((value === null) || (value === undefined))
                value = "";

            // We need there to be exactly one child: a text node.
            // If there are no children, more than one, or if it's not a text node,
            // we'll clear everything and create a single text node.
            var innerTextNode = ko.virtualElements.firstChild(element);
            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {
                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);
            } else {
                innerTextNode.data = value;
            }

            ko.utils.forceRefresh(element);
        },

        setElementName: function(element, name) {
            element.name = name;

            // Workaround IE 6/7 issue
            // - https://github.com/SteveSanderson/knockout/issues/197
            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/
            if (ieVersion <= 7) {
                try {
                    element.mergeAttributes(document.createElement("<input name='" + element.name + "'/>"), false);
                }
                catch(e) {} // For IE9 with doc mode "IE9 Standards" and browser mode "IE9 Compatibility View"
            }
        },

        forceRefresh: function(node) {
            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209
            if (ieVersion >= 9) {
                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container
                var elem = node.nodeType == 1 ? node : node.parentNode;
                if (elem.style)
                    elem.style.zoom = elem.style.zoom;
            }
        },

        ensureSelectElementIsRenderedCorrectly: function(selectElement) {
            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.
            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)
            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)
            if (ieVersion) {
                var originalWidth = selectElement.style.width;
                selectElement.style.width = 0;
                selectElement.style.width = originalWidth;
            }
        },

        range: function (min, max) {
            min = ko.utils.unwrapObservable(min);
            max = ko.utils.unwrapObservable(max);
            var result = [];
            for (var i = min; i <= max; i++)
                result.push(i);
            return result;
        },

        makeArray: function(arrayLikeObject) {
            var result = [];
            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {
                result.push(arrayLikeObject[i]);
            };
            return result;
        },

        createSymbolOrString: function(identifier) {
            return canUseSymbols ? Symbol(identifier) : identifier;
        },

        isIe6 : isIe6,
        isIe7 : isIe7,
        ieVersion : ieVersion,

        getFormFields: function(form, fieldName) {
            var fields = ko.utils.makeArray(form.getElementsByTagName("input")).concat(ko.utils.makeArray(form.getElementsByTagName("textarea")));
            var isMatchingField = (typeof fieldName == 'string')
                ? function(field) { return field.name === fieldName }
                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate
            var matches = [];
            for (var i = fields.length - 1; i >= 0; i--) {
                if (isMatchingField(fields[i]))
                    matches.push(fields[i]);
            };
            return matches;
        },

        parseJson: function (jsonString) {
            if (typeof jsonString == "string") {
                jsonString = ko.utils.stringTrim(jsonString);
                if (jsonString) {
                    if (JSON && JSON.parse) // Use native parsing where available
                        return JSON.parse(jsonString);
                    return (new Function("return " + jsonString))(); // Fallback on less safe parsing for older browsers
                }
            }
            return null;
        },

        stringifyJson: function (data, replacer, space) {   // replacer and space are optional
            if (!JSON || !JSON.stringify)
                throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);
        },

        postJson: function (urlOrForm, data, options) {
            options = options || {};
            var params = options['params'] || {};
            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;
            var url = urlOrForm;

            // If we were given a form, use its 'action' URL and pick out any requested field values
            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === "form")) {
                var originalForm = urlOrForm;
                url = originalForm.action;
                for (var i = includeFields.length - 1; i >= 0; i--) {
                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);
                    for (var j = fields.length - 1; j >= 0; j--)
                        params[fields[j].name] = fields[j].value;
                }
            }

            data = ko.utils.unwrapObservable(data);
            var form = document.createElement("form");
            form.style.display = "none";
            form.action = url;
            form.method = "post";
            for (var key in data) {
                // Since 'data' this is a model object, we include all properties including those inherited from its prototype
                var input = document.createElement("input");
                input.type = "hidden";
                input.name = key;
                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));
                form.appendChild(input);
            }
            objectForEach(params, function(key, value) {
                var input = document.createElement("input");
                input.type = "hidden";
                input.name = key;
                input.value = value;
                form.appendChild(input);
            });
            document.body.appendChild(form);
            options['submitter'] ? options['submitter'](form) : form.submit();
            setTimeout(function () { form.parentNode.removeChild(form); }, 0);
        }
    }
}());

ko.exportSymbol('utils', ko.utils);
ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);
ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);
ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);
ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);
ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);
ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);
ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);
ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);
ko.exportSymbol('utils.extend', ko.utils.extend);
ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);
ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);
ko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);
ko.exportSymbol('utils.postJson', ko.utils.postJson);
ko.exportSymbol('utils.parseJson', ko.utils.parseJson);
ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);
ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);
ko.exportSymbol('utils.range', ko.utils.range);
ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);
ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);
ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);
ko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);
ko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);
ko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);
ko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly

if (!Function.prototype['bind']) {
    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)
    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js
    Function.prototype['bind'] = function (object) {
        var originalFunction = this;
        if (arguments.length === 1) {
            return function () {
                return originalFunction.apply(object, arguments);
            };
        } else {
            var partialArgs = Array.prototype.slice.call(arguments, 1);
            return function () {
                var args = partialArgs.slice(0);
                args.push.apply(args, arguments);
                return originalFunction.apply(object, args);
            };
        }
    };
}

ko.utils.domData = new (function () {
    var uniqueId = 0;
    var dataStoreKeyExpandoPropertyName = "__ko__" + (new Date).getTime();
    var dataStore = {};

    function getAll(node, createIfNotFound) {
        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== "null") && dataStore[dataStoreKey];
        if (!hasExistingDataStore) {
            if (!createIfNotFound)
                return undefined;
            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = "ko" + uniqueId++;
            dataStore[dataStoreKey] = {};
        }
        return dataStore[dataStoreKey];
    }

    return {
        get: function (node, key) {
            var allDataForNode = getAll(node, false);
            return allDataForNode === undefined ? undefined : allDataForNode[key];
        },
        set: function (node, key, value) {
            if (value === undefined) {
                // Make sure we don't actually create a new domData key if we are actually deleting a value
                if (getAll(node, false) === undefined)
                    return;
            }
            var allDataForNode = getAll(node, true);
            allDataForNode[key] = value;
        },
        clear: function (node) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            if (dataStoreKey) {
                delete dataStore[dataStoreKey];
                node[dataStoreKeyExpandoPropertyName] = null;
                return true; // Exposing "did clean" flag purely so specs can infer whether things have been cleaned up as intended
            }
            return false;
        },

        nextKey: function () {
            return (uniqueId++) + dataStoreKeyExpandoPropertyName;
        }
    };
})();

ko.exportSymbol('utils.domData', ko.utils.domData);
ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully

ko.utils.domNodeDisposal = new (function () {
    var domDataKey = ko.utils.domData.nextKey();
    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document
    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document

    function getDisposeCallbacksCollection(node, createIfNotFound) {
        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);
        if ((allDisposeCallbacks === undefined) && createIfNotFound) {
            allDisposeCallbacks = [];
            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);
        }
        return allDisposeCallbacks;
    }
    function destroyCallbacksCollection(node) {
        ko.utils.domData.set(node, domDataKey, undefined);
    }

    function cleanSingleNode(node) {
        // Run all the dispose callbacks
        var callbacks = getDisposeCallbacksCollection(node, false);
        if (callbacks) {
            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)
            for (var i = 0; i < callbacks.length; i++)
                callbacks[i](node);
        }

        // Erase the DOM data
        ko.utils.domData.clear(node);

        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)
        ko.utils.domNodeDisposal["cleanExternalData"](node);

        // Clear any immediate-child comment nodes, as these wouldn't have been found by
        // node.getElementsByTagName("*") in cleanNode() (comment nodes aren't elements)
        if (cleanableNodeTypesWithDescendants[node.nodeType])
            cleanImmediateCommentTypeChildren(node);
    }

    function cleanImmediateCommentTypeChildren(nodeWithChildren) {
        var child, nextChild = nodeWithChildren.firstChild;
        while (child = nextChild) {
            nextChild = child.nextSibling;
            if (child.nodeType === 8)
                cleanSingleNode(child);
        }
    }

    return {
        addDisposeCallback : function(node, callback) {
            if (typeof callback != "function")
                throw new Error("Callback must be a function");
            getDisposeCallbacksCollection(node, true).push(callback);
        },

        removeDisposeCallback : function(node, callback) {
            var callbacksCollection = getDisposeCallbacksCollection(node, false);
            if (callbacksCollection) {
                ko.utils.arrayRemoveItem(callbacksCollection, callback);
                if (callbacksCollection.length == 0)
                    destroyCallbacksCollection(node);
            }
        },

        cleanNode : function(node) {
            // First clean this node, where applicable
            if (cleanableNodeTypes[node.nodeType]) {
                cleanSingleNode(node);

                // ... then its descendants, where applicable
                if (cleanableNodeTypesWithDescendants[node.nodeType]) {
                    // Clone the descendants list in case it changes during iteration
                    var descendants = [];
                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName("*"));
                    for (var i = 0, j = descendants.length; i < j; i++)
                        cleanSingleNode(descendants[i]);
                }
            }
            return node;
        },

        removeNode : function(node) {
            ko.cleanNode(node);
            if (node.parentNode)
                node.parentNode.removeChild(node);
        },

        "cleanExternalData" : function (node) {
            // Special support for jQuery here because it's so commonly used.
            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData
            // so notify it to tear down any resources associated with the node & descendants here.
            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == "function"))
                jQueryInstance['cleanData']([node]);
        }
    };
})();
ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience
ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience
ko.exportSymbol('cleanNode', ko.cleanNode);
ko.exportSymbol('removeNode', ko.removeNode);
ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);
ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);
ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);
(function () {
    var none = [0, "", ""],
        table = [1, "<table>", "</table>"],
        tbody = [2, "<table><tbody>", "</tbody></table>"],
        tr = [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        select = [1, "<select multiple='multiple'>", "</select>"],
        lookup = {
            'thead': table,
            'tbody': table,
            'tfoot': table,
            'tr': tbody,
            'td': tr,
            'th': tr,
            'option': select,
            'optgroup': select
        },

        // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.
        mayRequireCreateElementHack = ko.utils.ieVersion <= 8;

    function getWrap(tags) {
        var m = tags.match(/^<([a-z]+)[ >]/);
        return (m && lookup[m[1]]) || none;
    }

    function simpleHtmlParse(html, documentContext) {
        documentContext || (documentContext = document);
        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;

        // Based on jQuery's "clean" function, but only accounting for table-related elements.
        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's "clean" function directly

        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of
        // a descendant node. For example: "<div><!-- mycomment -->abc</div>" will get parsed as "<div>abc</div>"
        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node
        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.

        // Trim whitespace, otherwise indexOf won't work as expected
        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement("div"),
            wrap = getWrap(tags),
            depth = wrap[0];

        // Go to html and back, then peel off extra wrappers
        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.
        var markup = "ignored<div>" + wrap[1] + html + wrap[2] + "</div>";
        if (typeof windowContext['innerShiv'] == "function") {
            // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding
            // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv
            // somehow shims the native APIs so it just works anyway)
            div.appendChild(windowContext['innerShiv'](markup));
        } else {
            if (mayRequireCreateElementHack) {
                // The document.createElement('my-element') trick to enable custom elements in IE6-8
                // only works if we assign innerHTML on an element associated with that document.
                documentContext.appendChild(div);
            }

            div.innerHTML = markup;

            if (mayRequireCreateElementHack) {
                div.parentNode.removeChild(div);
            }
        }

        // Move to the right depth
        while (depth--)
            div = div.lastChild;

        return ko.utils.makeArray(div.lastChild.childNodes);
    }

    function jQueryHtmlParse(html, documentContext) {
        // jQuery's "parseHTML" function was introduced in jQuery 1.8.0 and is a documented public API.
        if (jQueryInstance['parseHTML']) {
            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null
        } else {
            // For jQuery < 1.8.0, we fall back on the undocumented internal "clean" function.
            var elems = jQueryInstance['clean']([html], documentContext);

            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.
            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.
            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.
            if (elems && elems[0]) {
                // Find the top-most parent element that's a direct child of a document fragment
                var elem = elems[0];
                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)
                    elem = elem.parentNode;
                // ... then detach it
                if (elem.parentNode)
                    elem.parentNode.removeChild(elem);
            }

            return elems;
        }
    }

    ko.utils.parseHtmlFragment = function(html, documentContext) {
        return jQueryInstance ?
            jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible
            simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.
    };

    ko.utils.setHtml = function(node, html) {
        ko.utils.emptyDomNode(node);

        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it
        html = ko.utils.unwrapObservable(html);

        if ((html !== null) && (html !== undefined)) {
            if (typeof html != 'string')
                html = html.toString();

            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,
            // for example <tr> elements which are not normally allowed to exist on their own.
            // If you've referenced jQuery we'll use that rather than duplicating its code.
            if (jQueryInstance) {
                jQueryInstance(node)['html'](html);
            } else {
                // ... otherwise, use KO's own parsing logic.
                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);
                for (var i = 0; i < parsedNodes.length; i++)
                    node.appendChild(parsedNodes[i]);
            }
        }
    };
})();

ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);
ko.exportSymbol('utils.setHtml', ko.utils.setHtml);

ko.memoization = (function () {
    var memos = {};

    function randomMax8HexChars() {
        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
    }
    function generateRandomId() {
        return randomMax8HexChars() + randomMax8HexChars();
    }
    function findMemoNodes(rootNode, appendToArray) {
        if (!rootNode)
            return;
        if (rootNode.nodeType == 8) {
            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);
            if (memoId != null)
                appendToArray.push({ domNode: rootNode, memoId: memoId });
        } else if (rootNode.nodeType == 1) {
            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)
                findMemoNodes(childNodes[i], appendToArray);
        }
    }

    return {
        memoize: function (callback) {
            if (typeof callback != "function")
                throw new Error("You can only pass a function to ko.memoization.memoize()");
            var memoId = generateRandomId();
            memos[memoId] = callback;
            return "<!--[ko_memo:" + memoId + "]-->";
        },

        unmemoize: function (memoId, callbackParams) {
            var callback = memos[memoId];
            if (callback === undefined)
                throw new Error("Couldn't find any memo with ID " + memoId + ". Perhaps it's already been unmemoized.");
            try {
                callback.apply(null, callbackParams || []);
                return true;
            }
            finally { delete memos[memoId]; }
        },

        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {
            var memos = [];
            findMemoNodes(domNode, memos);
            for (var i = 0, j = memos.length; i < j; i++) {
                var node = memos[i].domNode;
                var combinedParams = [node];
                if (extraCallbackParamsArray)
                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);
                ko.memoization.unmemoize(memos[i].memoId, combinedParams);
                node.nodeValue = ""; // Neuter this node so we don't try to unmemoize it again
                if (node.parentNode)
                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)
            }
        },

        parseMemoText: function (memoText) {
            var match = memoText.match(/^\[ko_memo\:(.*?)\]$/);
            return match ? match[1] : null;
        }
    };
})();

ko.exportSymbol('memoization', ko.memoization);
ko.exportSymbol('memoization.memoize', ko.memoization.memoize);
ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);
ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);
ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);
ko.tasks = (function () {
    var scheduler,
        taskQueue = [],
        taskQueueLength = 0,
        nextHandle = 1,
        nextIndexToProcess = 0;

    if (window['MutationObserver']) {
        // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+
        // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT
        scheduler = (function (callback) {
            var div = document.createElement("div");
            new MutationObserver(callback).observe(div, {attributes: true});
            return function () { div.classList.toggle("foo"); };
        })(scheduledProcess);
    } else if (document && "onreadystatechange" in document.createElement("script")) {
        // IE 6-10
        // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT
        scheduler = function (callback) {
            var script = document.createElement("script");
            script.onreadystatechange = function () {
                script.onreadystatechange = null;
                document.documentElement.removeChild(script);
                script = null;
                callback();
            };
            document.documentElement.appendChild(script);
        };
    } else {
        scheduler = function (callback) {
            setTimeout(callback, 0);
        };
    }

    function processTasks() {
        if (taskQueueLength) {
            // Each mark represents the end of a logical group of tasks and the number of these groups is
            // limited to prevent unchecked recursion.
            var mark = taskQueueLength, countMarks = 0;

            // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue
            for (var task; nextIndexToProcess < taskQueueLength; ) {
                if (task = taskQueue[nextIndexToProcess++]) {
                    if (nextIndexToProcess > mark) {
                        if (++countMarks >= 5000) {
                            nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion
                            ko.utils.deferError(Error("'Too much recursion' after processing " + countMarks + " task groups."));
                            break;
                        }
                        mark = taskQueueLength;
                    }
                    try {
                        task();
                    } catch (ex) {
                        ko.utils.deferError(ex);
                    }
                }
            }
        }
    }

    function scheduledProcess() {
        processTasks();

        // Reset the queue
        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;
    }

    function scheduleTaskProcessing() {
        ko.tasks['scheduler'](scheduledProcess);
    }

    var tasks = {
        'scheduler': scheduler,     // Allow overriding the scheduler

        schedule: function (func) {
            if (!taskQueueLength) {
                scheduleTaskProcessing();
            }

            taskQueue[taskQueueLength++] = func;
            return nextHandle++;
        },

        cancel: function (handle) {
            var index = handle - (nextHandle - taskQueueLength);
            if (index >= nextIndexToProcess && index < taskQueueLength) {
                taskQueue[index] = null;
            }
        },

        // For testing only: reset the queue and return the previous queue length
        'resetForTesting': function () {
            var length = taskQueueLength - nextIndexToProcess;
            nextIndexToProcess = taskQueueLength = taskQueue.length = 0;
            return length;
        },

        runEarly: processTasks
    };

    return tasks;
})();

ko.exportSymbol('tasks', ko.tasks);
ko.exportSymbol('tasks.schedule', ko.tasks.schedule);
//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  "cancel" isn't minified
ko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);
ko.extenders = {
    'throttle': function(target, timeout) {
        // Throttling means two things:

        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies
        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate
        target['throttleEvaluation'] = timeout;

        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*
        //     so the target cannot change value synchronously or faster than a certain rate
        var writeTimeoutInstance = null;
        return ko.dependentObservable({
            'read': target,
            'write': function(value) {
                clearTimeout(writeTimeoutInstance);
                writeTimeoutInstance = ko.utils.setTimeout(function() {
                    target(value);
                }, timeout);
            }
        });
    },

    'rateLimit': function(target, options) {
        var timeout, method, limitFunction;

        if (typeof options == 'number') {
            timeout = options;
        } else {
            timeout = options['timeout'];
            method = options['method'];
        }

        // rateLimit supersedes deferred updates
        target._deferUpdates = false;

        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;
        target.limit(function(callback) {
            return limitFunction(callback, timeout);
        });
    },

    'deferred': function(target, options) {
        if (options !== true) {
            throw new Error('The \'deferred\' extender only accepts the value \'true\', because it is not supported to turn deferral off once enabled.')
        }

        if (!target._deferUpdates) {
            target._deferUpdates = true;
            target.limit(function (callback) {
                var handle,
                    ignoreUpdates = false;
                return function () {
                    if (!ignoreUpdates) {
                        ko.tasks.cancel(handle);
                        handle = ko.tasks.schedule(callback);

                        try {
                            ignoreUpdates = true;
                            target['notifySubscribers'](undefined, 'dirty');
                        } finally {
                            ignoreUpdates = false;
                        }
                    }
                };
            });
        }
    },

    'notify': function(target, notifyWhen) {
        target["equalityComparer"] = notifyWhen == "always" ?
            null :  // null equalityComparer means to always notify
            valuesArePrimitiveAndEqual;
    }
};

var primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };
function valuesArePrimitiveAndEqual(a, b) {
    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);
    return oldValueIsPrimitive ? (a === b) : false;
}

function throttle(callback, timeout) {
    var timeoutInstance;
    return function () {
        if (!timeoutInstance) {
            timeoutInstance = ko.utils.setTimeout(function () {
                timeoutInstance = undefined;
                callback();
            }, timeout);
        }
    };
}

function debounce(callback, timeout) {
    var timeoutInstance;
    return function () {
        clearTimeout(timeoutInstance);
        timeoutInstance = ko.utils.setTimeout(callback, timeout);
    };
}

function applyExtenders(requestedExtenders) {
    var target = this;
    if (requestedExtenders) {
        ko.utils.objectForEach(requestedExtenders, function(key, value) {
            var extenderHandler = ko.extenders[key];
            if (typeof extenderHandler == 'function') {
                target = extenderHandler(target, value) || target;
            }
        });
    }
    return target;
}

ko.exportSymbol('extenders', ko.extenders);

ko.subscription = function (target, callback, disposeCallback) {
    this._target = target;
    this.callback = callback;
    this.disposeCallback = disposeCallback;
    this.isDisposed = false;
    ko.exportProperty(this, 'dispose', this.dispose);
};
ko.subscription.prototype.dispose = function () {
    this.isDisposed = true;
    this.disposeCallback();
};

ko.subscribable = function () {
    ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);
    ko_subscribable_fn.init(this);
}

var defaultEvent = "change";

// Moved out of "limit" to avoid the extra closure
function limitNotifySubscribers(value, event) {
    if (!event || event === defaultEvent) {
        this._limitChange(value);
    } else if (event === 'beforeChange') {
        this._limitBeforeChange(value);
    } else {
        this._origNotifySubscribers(value, event);
    }
}

var ko_subscribable_fn = {
    init: function(instance) {
        instance._subscriptions = { "change": [] };
        instance._versionNumber = 1;
    },

    subscribe: function (callback, callbackTarget, event) {
        var self = this;

        event = event || defaultEvent;
        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;

        var subscription = new ko.subscription(self, boundCallback, function () {
            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);
            if (self.afterSubscriptionRemove)
                self.afterSubscriptionRemove(event);
        });

        if (self.beforeSubscriptionAdd)
            self.beforeSubscriptionAdd(event);

        if (!self._subscriptions[event])
            self._subscriptions[event] = [];
        self._subscriptions[event].push(subscription);

        return subscription;
    },

    "notifySubscribers": function (valueToNotify, event) {
        event = event || defaultEvent;
        if (event === defaultEvent) {
            this.updateVersion();
        }
        if (this.hasSubscriptionsForEvent(event)) {
            var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);
            try {
                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)
                for (var i = 0, subscription; subscription = subs[i]; ++i) {
                    // In case a subscription was disposed during the arrayForEach cycle, check
                    // for isDisposed on each subscription before invoking its callback
                    if (!subscription.isDisposed)
                        subscription.callback(valueToNotify);
                }
            } finally {
                ko.dependencyDetection.end(); // End suppressing dependency detection
            }
        }
    },

    getVersion: function () {
        return this._versionNumber;
    },

    hasChanged: function (versionToCheck) {
        return this.getVersion() !== versionToCheck;
    },

    updateVersion: function () {
        ++this._versionNumber;
    },

    limit: function(limitFunction) {
        var self = this, selfIsObservable = ko.isObservable(self),
            ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, beforeChange = 'beforeChange';

        if (!self._origNotifySubscribers) {
            self._origNotifySubscribers = self["notifySubscribers"];
            self["notifySubscribers"] = limitNotifySubscribers;
        }

        var finish = limitFunction(function() {
            self._notificationIsPending = false;

            // If an observable provided a reference to itself, access it to get the latest value.
            // This allows computed observables to delay calculating their value until needed.
            if (selfIsObservable && pendingValue === self) {
                pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();
            }
            var shouldNotify = notifyNextChange || self.isDifferent(previousValue, pendingValue);

            notifyNextChange = ignoreBeforeChange = false;

            if (shouldNotify) {
                self._origNotifySubscribers(previousValue = pendingValue);
            }
        });

        self._limitChange = function(value) {
            self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);
            self._notificationIsPending = ignoreBeforeChange = true;
            pendingValue = value;
            finish();
        };
        self._limitBeforeChange = function(value) {
            if (!ignoreBeforeChange) {
                previousValue = value;
                self._origNotifySubscribers(value, beforeChange);
            }
        };
        self._notifyNextChangeIfValueIsDifferent = function() {
            if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {
                notifyNextChange = true;
            }
        };
    },

    hasSubscriptionsForEvent: function(event) {
        return this._subscriptions[event] && this._subscriptions[event].length;
    },

    getSubscriptionsCount: function (event) {
        if (event) {
            return this._subscriptions[event] && this._subscriptions[event].length || 0;
        } else {
            var total = 0;
            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {
                if (eventName !== 'dirty')
                    total += subscriptions.length;
            });
            return total;
        }
    },

    isDifferent: function(oldValue, newValue) {
        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);
    },

    extend: applyExtenders
};

ko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);
ko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);
ko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);

// For browsers that support proto assignment, we overwrite the prototype of each
// observable instance. Since observables are functions, we need Function.prototype
// to still be in the prototype chain.
if (ko.utils.canSetPrototype) {
    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);
}

ko.subscribable['fn'] = ko_subscribable_fn;


ko.isSubscribable = function (instance) {
    return instance != null && typeof instance.subscribe == "function" && typeof instance["notifySubscribers"] == "function";
};

ko.exportSymbol('subscribable', ko.subscribable);
ko.exportSymbol('isSubscribable', ko.isSubscribable);

ko.computedContext = ko.dependencyDetection = (function () {
    var outerFrames = [],
        currentFrame,
        lastId = 0;

    // Return a unique ID that can be assigned to an observable for dependency tracking.
    // Theoretically, you could eventually overflow the number storage size, resulting
    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53
    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would
    // take over 285 years to reach that number.
    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html
    function getId() {
        return ++lastId;
    }

    function begin(options) {
        outerFrames.push(currentFrame);
        currentFrame = options;
    }

    function end() {
        currentFrame = outerFrames.pop();
    }

    return {
        begin: begin,

        end: end,

        registerDependency: function (subscribable) {
            if (currentFrame) {
                if (!ko.isSubscribable(subscribable))
                    throw new Error("Only subscribable things can act as dependencies");
                currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));
            }
        },

        ignore: function (callback, callbackTarget, callbackArgs) {
            try {
                begin();
                return callback.apply(callbackTarget, callbackArgs || []);
            } finally {
                end();
            }
        },

        getDependenciesCount: function () {
            if (currentFrame)
                return currentFrame.computed.getDependenciesCount();
        },

        isInitial: function() {
            if (currentFrame)
                return currentFrame.isInitial;
        }
    };
})();

ko.exportSymbol('computedContext', ko.computedContext);
ko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);
ko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);

ko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);
var observableLatestValue = ko.utils.createSymbolOrString('_latestValue');

ko.observable = function (initialValue) {
    function observable() {
        if (arguments.length > 0) {
            // Write

            // Ignore writes if the value hasn't changed
            if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {
                observable.valueWillMutate();
                observable[observableLatestValue] = arguments[0];
                observable.valueHasMutated();
            }
            return this; // Permits chained assignments
        }
        else {
            // Read
            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a "read" operation
            return observable[observableLatestValue];
        }
    }

    observable[observableLatestValue] = initialValue;

    // Inherit from 'subscribable'
    if (!ko.utils.canSetPrototype) {
        // 'subscribable' won't be on the prototype chain unless we put it there directly
        ko.utils.extend(observable, ko.subscribable['fn']);
    }
    ko.subscribable['fn'].init(observable);

    // Inherit from 'observable'
    ko.utils.setPrototypeOfOrExtend(observable, observableFn);

    if (ko.options['deferUpdates']) {
        ko.extenders['deferred'](observable, true);
    }

    return observable;
}

// Define prototype for observables
var observableFn = {
    'equalityComparer': valuesArePrimitiveAndEqual,
    peek: function() { return this[observableLatestValue]; },
    valueHasMutated: function () { this['notifySubscribers'](this[observableLatestValue]); },
    valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }
};

// Note that for browsers that don't support proto assignment, the
// inheritance chain is created manually in the ko.observable constructor
if (ko.utils.canSetPrototype) {
    ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);
}

var protoProperty = ko.observable.protoProperty = '__ko_proto__';
observableFn[protoProperty] = ko.observable;

ko.hasPrototype = function(instance, prototype) {
    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;
    if (instance[protoProperty] === prototype) return true;
    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain
};

ko.isObservable = function (instance) {
    return ko.hasPrototype(instance, ko.observable);
}
ko.isWriteableObservable = function (instance) {
    // Observable
    if ((typeof instance == 'function') && instance[protoProperty] === ko.observable)
        return true;
    // Writeable dependent observable
    if ((typeof instance == 'function') && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))
        return true;
    // Anything else
    return false;
}

ko.exportSymbol('observable', ko.observable);
ko.exportSymbol('isObservable', ko.isObservable);
ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);
ko.exportSymbol('isWritableObservable', ko.isWriteableObservable);
ko.exportSymbol('observable.fn', observableFn);
ko.exportProperty(observableFn, 'peek', observableFn.peek);
ko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);
ko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);
ko.observableArray = function (initialValues) {
    initialValues = initialValues || [];

    if (typeof initialValues != 'object' || !('length' in initialValues))
        throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");

    var result = ko.observable(initialValues);
    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);
    return result.extend({'trackArrayChanges':true});
};

ko.observableArray['fn'] = {
    'remove': function (valueOrPredicate) {
        var underlyingArray = this.peek();
        var removedValues = [];
        var predicate = typeof valueOrPredicate == "function" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
        for (var i = 0; i < underlyingArray.length; i++) {
            var value = underlyingArray[i];
            if (predicate(value)) {
                if (removedValues.length === 0) {
                    this.valueWillMutate();
                }
                removedValues.push(value);
                underlyingArray.splice(i, 1);
                i--;
            }
        }
        if (removedValues.length) {
            this.valueHasMutated();
        }
        return removedValues;
    },

    'removeAll': function (arrayOfValues) {
        // If you passed zero args, we remove everything
        if (arrayOfValues === undefined) {
            var underlyingArray = this.peek();
            var allValues = underlyingArray.slice(0);
            this.valueWillMutate();
            underlyingArray.splice(0, underlyingArray.length);
            this.valueHasMutated();
            return allValues;
        }
        // If you passed an arg, we interpret it as an array of entries to remove
        if (!arrayOfValues)
            return [];
        return this['remove'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;
        });
    },

    'destroy': function (valueOrPredicate) {
        var underlyingArray = this.peek();
        var predicate = typeof valueOrPredicate == "function" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
        this.valueWillMutate();
        for (var i = underlyingArray.length - 1; i >= 0; i--) {
            var value = underlyingArray[i];
            if (predicate(value))
                underlyingArray[i]["_destroy"] = true;
        }
        this.valueHasMutated();
    },

    'destroyAll': function (arrayOfValues) {
        // If you passed zero args, we destroy everything
        if (arrayOfValues === undefined)
            return this['destroy'](function() { return true });

        // If you passed an arg, we interpret it as an array of entries to destroy
        if (!arrayOfValues)
            return [];
        return this['destroy'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;
        });
    },

    'indexOf': function (item) {
        var underlyingArray = this();
        return ko.utils.arrayIndexOf(underlyingArray, item);
    },

    'replace': function(oldItem, newItem) {
        var index = this['indexOf'](oldItem);
        if (index >= 0) {
            this.valueWillMutate();
            this.peek()[index] = newItem;
            this.valueHasMutated();
        }
    }
};

// Note that for browsers that don't support proto assignment, the
// inheritance chain is created manually in the ko.observableArray constructor
if (ko.utils.canSetPrototype) {
    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);
}

// Populate ko.observableArray.fn with read/write functions from native arrays
// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array
// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale
ko.utils.arrayForEach(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (methodName) {
    ko.observableArray['fn'][methodName] = function () {
        // Use "peek" to avoid creating a subscription in any computed that we're executing in the context of
        // (for consistency with mutating regular observables)
        var underlyingArray = this.peek();
        this.valueWillMutate();
        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);
        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);
        this.valueHasMutated();
        // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.
        return methodCallResult === underlyingArray ? this : methodCallResult;
    };
});

// Populate ko.observableArray.fn with read-only functions from native arrays
ko.utils.arrayForEach(["slice"], function (methodName) {
    ko.observableArray['fn'][methodName] = function () {
        var underlyingArray = this();
        return underlyingArray[methodName].apply(underlyingArray, arguments);
    };
});

ko.exportSymbol('observableArray', ko.observableArray);
var arrayChangeEventName = 'arrayChange';
ko.extenders['trackArrayChanges'] = function(target, options) {
    // Use the provided options--each call to trackArrayChanges overwrites the previously set options
    target.compareArrayOptions = {};
    if (options && typeof options == "object") {
        ko.utils.extend(target.compareArrayOptions, options);
    }
    target.compareArrayOptions['sparse'] = true;

    // Only modify the target observable once
    if (target.cacheDiffForKnownOperation) {
        return;
    }
    var trackingChanges = false,
        cachedDiff = null,
        arrayChangeSubscription,
        pendingNotifications = 0,
        underlyingNotifySubscribersFunction,
        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,
        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;

    // Watch "subscribe" calls, and for array change events, ensure change tracking is enabled
    target.beforeSubscriptionAdd = function (event) {
        if (underlyingBeforeSubscriptionAddFunction)
            underlyingBeforeSubscriptionAddFunction.call(target, event);
        if (event === arrayChangeEventName) {
            trackChanges();
        }
    };
    // Watch "dispose" calls, and for array change events, ensure change tracking is disabled when all are disposed
    target.afterSubscriptionRemove = function (event) {
        if (underlyingAfterSubscriptionRemoveFunction)
            underlyingAfterSubscriptionRemoveFunction.call(target, event);
        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {
            if (underlyingNotifySubscribersFunction) {
                target['notifySubscribers'] = underlyingNotifySubscribersFunction;
                underlyingNotifySubscribersFunction = undefined;
            }
            arrayChangeSubscription.dispose();
            trackingChanges = false;
        }
    };

    function trackChanges() {
        // Calling 'trackChanges' multiple times is the same as calling it once
        if (trackingChanges) {
            return;
        }

        trackingChanges = true;

        // Intercept "notifySubscribers" to track how many times it was called.
        underlyingNotifySubscribersFunction = target['notifySubscribers'];
        target['notifySubscribers'] = function(valueToNotify, event) {
            if (!event || event === defaultEvent) {
                ++pendingNotifications;
            }
            return underlyingNotifySubscribersFunction.apply(this, arguments);
        };

        // Each time the array changes value, capture a clone so that on the next
        // change it's possible to produce a diff
        var previousContents = [].concat(target.peek() || []);
        cachedDiff = null;
        arrayChangeSubscription = target.subscribe(function(currentContents) {
            // Make a copy of the current contents and ensure it's an array
            currentContents = [].concat(currentContents || []);

            // Compute the diff and issue notifications, but only if someone is listening
            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {
                var changes = getChanges(previousContents, currentContents);
            }

            // Eliminate references to the old, removed items, so they can be GCed
            previousContents = currentContents;
            cachedDiff = null;
            pendingNotifications = 0;

            if (changes && changes.length) {
                target['notifySubscribers'](changes, arrayChangeEventName);
            }
        });
    }

    function getChanges(previousContents, currentContents) {
        // We try to re-use cached diffs.
        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates
        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,
        // notifications are issued immediately so we wouldn't be queueing up more than one.
        if (!cachedDiff || pendingNotifications > 1) {
            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);
        }

        return cachedDiff;
    }

    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {
        // Only run if we're currently tracking changes for this observable array
        // and there aren't any pending deferred notifications.
        if (!trackingChanges || pendingNotifications) {
            return;
        }
        var diff = [],
            arrayLength = rawArray.length,
            argsLength = args.length,
            offset = 0;

        function pushDiff(status, value, index) {
            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };
        }
        switch (operationName) {
            case 'push':
                offset = arrayLength;
            case 'unshift':
                for (var index = 0; index < argsLength; index++) {
                    pushDiff('added', args[index], offset + index);
                }
                break;

            case 'pop':
                offset = arrayLength - 1;
            case 'shift':
                if (arrayLength) {
                    pushDiff('deleted', rawArray[offset], offset);
                }
                break;

            case 'splice':
                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].
                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),
                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),
                    endAddIndex = startIndex + argsLength - 2,
                    endIndex = Math.max(endDeleteIndex, endAddIndex),
                    additions = [], deletions = [];
                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {
                    if (index < endDeleteIndex)
                        deletions.push(pushDiff('deleted', rawArray[index], index));
                    if (index < endAddIndex)
                        additions.push(pushDiff('added', args[argsIndex], index));
                }
                ko.utils.findMovesInArrayComparison(deletions, additions);
                break;

            default:
                return;
        }
        cachedDiff = diff;
    };
};
var computedState = ko.utils.createSymbolOrString('_state');

ko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {
    if (typeof evaluatorFunctionOrOptions === "object") {
        // Single-parameter syntax - everything is on this "options" param
        options = evaluatorFunctionOrOptions;
    } else {
        // Multi-parameter syntax - construct the options according to the params passed
        options = options || {};
        if (evaluatorFunctionOrOptions) {
            options["read"] = evaluatorFunctionOrOptions;
        }
    }
    if (typeof options["read"] != "function")
        throw Error("Pass a function that returns the value of the ko.computed");

    var writeFunction = options["write"];
    var state = {
        latestValue: undefined,
        isStale: true,
        isDirty: true,
        isBeingEvaluated: false,
        suppressDisposalUntilDisposeWhenReturnsFalse: false,
        isDisposed: false,
        pure: false,
        isSleeping: false,
        readFunction: options["read"],
        evaluatorFunctionTarget: evaluatorFunctionTarget || options["owner"],
        disposeWhenNodeIsRemoved: options["disposeWhenNodeIsRemoved"] || options.disposeWhenNodeIsRemoved || null,
        disposeWhen: options["disposeWhen"] || options.disposeWhen,
        domNodeDisposalCallback: null,
        dependencyTracking: {},
        dependenciesCount: 0,
        evaluationTimeoutInstance: null
    };

    function computedObservable() {
        if (arguments.length > 0) {
            if (typeof writeFunction === "function") {
                // Writing a value
                writeFunction.apply(state.evaluatorFunctionTarget, arguments);
            } else {
                throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
            }
            return this; // Permits chained assignments
        } else {
            // Reading the value
            ko.dependencyDetection.registerDependency(computedObservable);
            if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {
                computedObservable.evaluateImmediate();
            }
            return state.latestValue;
        }
    }

    computedObservable[computedState] = state;
    computedObservable.hasWriteFunction = typeof writeFunction === "function";

    // Inherit from 'subscribable'
    if (!ko.utils.canSetPrototype) {
        // 'subscribable' won't be on the prototype chain unless we put it there directly
        ko.utils.extend(computedObservable, ko.subscribable['fn']);
    }
    ko.subscribable['fn'].init(computedObservable);

    // Inherit from 'computed'
    ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);

    if (options['pure']) {
        state.pure = true;
        state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription
        ko.utils.extend(computedObservable, pureComputedOverrides);
    } else if (options['deferEvaluation']) {
        ko.utils.extend(computedObservable, deferEvaluationOverrides);
    }

    if (ko.options['deferUpdates']) {
        ko.extenders['deferred'](computedObservable, true);
    }

    if (DEBUG) {
        // #1731 - Aid debugging by exposing the computed's options
        computedObservable["_options"] = options;
    }

    if (state.disposeWhenNodeIsRemoved) {
        // Since this computed is associated with a DOM node, and we don't want to dispose the computed
        // until the DOM node is *removed* from the document (as opposed to never having been in the document),
        // we'll prevent disposal until "disposeWhen" first returns false.
        state.suppressDisposalUntilDisposeWhenReturnsFalse = true;

        // disposeWhenNodeIsRemoved: true can be used to opt into the "only dispose after first false result"
        // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try
        // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't
        // be documented or used by application code, as it's likely to change in a future version of KO.
        if (!state.disposeWhenNodeIsRemoved.nodeType) {
            state.disposeWhenNodeIsRemoved = null;
        }
    }

    // Evaluate, unless sleeping or deferEvaluation is true
    if (!state.isSleeping && !options['deferEvaluation']) {
        computedObservable.evaluateImmediate();
    }

    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is
    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).
    if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {
        ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {
            computedObservable.dispose();
        });
    }

    return computedObservable;
};

// Utility function that disposes a given dependencyTracking entry
function computedDisposeDependencyCallback(id, entryToDispose) {
    if (entryToDispose !== null && entryToDispose.dispose) {
        entryToDispose.dispose();
    }
}

// This function gets called each time a dependency is detected while evaluating a computed.
// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.
function computedBeginDependencyDetectionCallback(subscribable, id) {
    var computedObservable = this.computedObservable,
        state = computedObservable[computedState];
    if (!state.isDisposed) {
        if (this.disposalCount && this.disposalCandidates[id]) {
            // Don't want to dispose this subscription, as it's still being used
            computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);
            this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway
            --this.disposalCount;
        } else if (!state.dependencyTracking[id]) {
            // Brand new subscription - add it
            computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));
        }
        // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)
        if (subscribable._notificationIsPending) {
            subscribable._notifyNextChangeIfValueIsDifferent();
        }
    }
}

var computedFn = {
    "equalityComparer": valuesArePrimitiveAndEqual,
    getDependenciesCount: function () {
        return this[computedState].dependenciesCount;
    },
    addDependencyTracking: function (id, target, trackingObj) {
        if (this[computedState].pure && target === this) {
            throw Error("A 'pure' computed must not be called recursively");
        }

        this[computedState].dependencyTracking[id] = trackingObj;
        trackingObj._order = this[computedState].dependenciesCount++;
        trackingObj._version = target.getVersion();
    },
    haveDependenciesChanged: function () {
        var id, dependency, dependencyTracking = this[computedState].dependencyTracking;
        for (id in dependencyTracking) {
            if (dependencyTracking.hasOwnProperty(id)) {
                dependency = dependencyTracking[id];
                if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {
                    return true;
                }
            }
        }
    },
    markDirty: function () {
        // Process "dirty" events if we can handle delayed notifications
        if (this._evalDelayed && !this[computedState].isBeingEvaluated) {
            this._evalDelayed(false /*isChange*/);
        }
    },
    isActive: function () {
        var state = this[computedState];
        return state.isDirty || state.dependenciesCount > 0;
    },
    respondToChange: function () {
        // Ignore "change" events if we've already scheduled a delayed notification
        if (!this._notificationIsPending) {
            this.evaluatePossiblyAsync();
        } else if (this[computedState].isDirty) {
            this[computedState].isStale = true;
        }
    },
    subscribeToDependency: function (target) {
        if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {
            var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),
                changeSub = target.subscribe(this.respondToChange, this);
            return {
                _target: target,
                dispose: function () {
                    dirtySub.dispose();
                    changeSub.dispose();
                }
            };
        } else {
            return target.subscribe(this.evaluatePossiblyAsync, this);
        }
    },
    evaluatePossiblyAsync: function () {
        var computedObservable = this,
            throttleEvaluationTimeout = computedObservable['throttleEvaluation'];
        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {
            clearTimeout(this[computedState].evaluationTimeoutInstance);
            this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {
                computedObservable.evaluateImmediate(true /*notifyChange*/);
            }, throttleEvaluationTimeout);
        } else if (computedObservable._evalDelayed) {
            computedObservable._evalDelayed(true /*isChange*/);
        } else {
            computedObservable.evaluateImmediate(true /*notifyChange*/);
        }
    },
    evaluateImmediate: function (notifyChange) {
        var computedObservable = this,
            state = computedObservable[computedState],
            disposeWhen = state.disposeWhen,
            changed = false;

        if (state.isBeingEvaluated) {
            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.
            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost
            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing
            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387
            return;
        }

        // Do not evaluate (and possibly capture new dependencies) if disposed
        if (state.isDisposed) {
            return;
        }

        if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {
            // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse
            if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {
                computedObservable.dispose();
                return;
            }
        } else {
            // It just did return false, so we can stop suppressing now
            state.suppressDisposalUntilDisposeWhenReturnsFalse = false;
        }

        state.isBeingEvaluated = true;
        try {
            changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);
        } finally {
            state.isBeingEvaluated = false;
        }

        if (!state.dependenciesCount) {
            computedObservable.dispose();
        }

        return changed;
    },
    evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {
        // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.
        // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,
        // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).

        var computedObservable = this,
            state = computedObservable[computedState],
            changed = false;

        // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).
        // Then, during evaluation, we cross off any that are in fact still being used.
        var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time
            dependencyDetectionContext = {
                computedObservable: computedObservable,
                disposalCandidates: state.dependencyTracking,
                disposalCount: state.dependenciesCount
            };

        ko.dependencyDetection.begin({
            callbackTarget: dependencyDetectionContext,
            callback: computedBeginDependencyDetectionCallback,
            computed: computedObservable,
            isInitial: isInitial
        });

        state.dependencyTracking = {};
        state.dependenciesCount = 0;

        var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);

        if (computedObservable.isDifferent(state.latestValue, newValue)) {
            if (!state.isSleeping) {
                computedObservable["notifySubscribers"](state.latestValue, "beforeChange");
            }

            state.latestValue = newValue;
            if (DEBUG) computedObservable._latestValue = newValue;

            if (state.isSleeping) {
                computedObservable.updateVersion();
            } else if (notifyChange) {
                computedObservable["notifySubscribers"](state.latestValue);
            }

            changed = true;
        }

        if (isInitial) {
            computedObservable["notifySubscribers"](state.latestValue, "awake");
        }

        return changed;
    },
    evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {
        // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.
        // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection
        // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU
        // overhead of computed evaluation (on V8 at least).

        try {
            var readFunction = state.readFunction;
            return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();
        } finally {
            ko.dependencyDetection.end();

            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it
            if (dependencyDetectionContext.disposalCount && !state.isSleeping) {
                ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);
            }

            state.isStale = state.isDirty = false;
        }
    },
    peek: function (evaluate) {
        // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when "deferEvaluation" is set.
        // Pass in true to evaluate if needed.
        var state = this[computedState];
        if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {
            this.evaluateImmediate();
        }
        return state.latestValue;
    },
    limit: function (limitFunction) {
        // Override the limit function with one that delays evaluation as well
        ko.subscribable['fn'].limit.call(this, limitFunction);
        this._evalIfChanged = function () {
            if (this[computedState].isStale) {
                this.evaluateImmediate();
            } else {
                this[computedState].isDirty = false;
            }
            return this[computedState].latestValue;
        };
        this._evalDelayed = function (isChange) {
            this._limitBeforeChange(this[computedState].latestValue);

            // Mark as dirty
            this[computedState].isDirty = true;
            if (isChange) {
                this[computedState].isStale = true;
            }

            // Pass the observable to the "limit" code, which will evaluate it when
            // it's time to do the notification.
            this._limitChange(this);
        };
    },
    dispose: function () {
        var state = this[computedState];
        if (!state.isSleeping && state.dependencyTracking) {
            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {
                if (dependency.dispose)
                    dependency.dispose();
            });
        }
        if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {
            ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);
        }
        state.dependencyTracking = null;
        state.dependenciesCount = 0;
        state.isDisposed = true;
        state.isStale = false;
        state.isDirty = false;
        state.isSleeping = false;
        state.disposeWhenNodeIsRemoved = null;
    }
};

var pureComputedOverrides = {
    beforeSubscriptionAdd: function (event) {
        // If asleep, wake up the computed by subscribing to any dependencies.
        var computedObservable = this,
            state = computedObservable[computedState];
        if (!state.isDisposed && state.isSleeping && event == 'change') {
            state.isSleeping = false;
            if (state.isStale || computedObservable.haveDependenciesChanged()) {
                state.dependencyTracking = null;
                state.dependenciesCount = 0;
                if (computedObservable.evaluateImmediate()) {
                    computedObservable.updateVersion();
                }
            } else {
                // First put the dependencies in order
                var dependeciesOrder = [];
                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {
                    dependeciesOrder[dependency._order] = id;
                });
                // Next, subscribe to each one
                ko.utils.arrayForEach(dependeciesOrder, function (id, order) {
                    var dependency = state.dependencyTracking[id],
                        subscription = computedObservable.subscribeToDependency(dependency._target);
                    subscription._order = order;
                    subscription._version = dependency._version;
                    state.dependencyTracking[id] = subscription;
                });
            }
            if (!state.isDisposed) {     // test since evaluating could trigger disposal
                computedObservable["notifySubscribers"](state.latestValue, "awake");
            }
        }
    },
    afterSubscriptionRemove: function (event) {
        var state = this[computedState];
        if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {
            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {
                if (dependency.dispose) {
                    state.dependencyTracking[id] = {
                        _target: dependency._target,
                        _order: dependency._order,
                        _version: dependency._version
                    };
                    dependency.dispose();
                }
            });
            state.isSleeping = true;
            this["notifySubscribers"](undefined, "asleep");
        }
    },
    getVersion: function () {
        // Because a pure computed is not automatically updated while it is sleeping, we can't
        // simply return the version number. Instead, we check if any of the dependencies have
        // changed and conditionally re-evaluate the computed observable.
        var state = this[computedState];
        if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {
            this.evaluateImmediate();
        }
        return ko.subscribable['fn'].getVersion.call(this);
    }
};

var deferEvaluationOverrides = {
    beforeSubscriptionAdd: function (event) {
        // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.
        if (event == 'change' || event == 'beforeChange') {
            this.peek();
        }
    }
};

// Note that for browsers that don't support proto assignment, the
// inheritance chain is created manually in the ko.computed constructor
if (ko.utils.canSetPrototype) {
    ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);
}

// Set the proto chain values for ko.hasPrototype
var protoProp = ko.observable.protoProperty; // == "__ko_proto__"
ko.computed[protoProp] = ko.observable;
computedFn[protoProp] = ko.computed;

ko.isComputed = function (instance) {
    return ko.hasPrototype(instance, ko.computed);
};

ko.isPureComputed = function (instance) {
    return ko.hasPrototype(instance, ko.computed)
        && instance[computedState] && instance[computedState].pure;
};

ko.exportSymbol('computed', ko.computed);
ko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)
ko.exportSymbol('isComputed', ko.isComputed);
ko.exportSymbol('isPureComputed', ko.isPureComputed);
ko.exportSymbol('computed.fn', computedFn);
ko.exportProperty(computedFn, 'peek', computedFn.peek);
ko.exportProperty(computedFn, 'dispose', computedFn.dispose);
ko.exportProperty(computedFn, 'isActive', computedFn.isActive);
ko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);

ko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {
    if (typeof evaluatorFunctionOrOptions === 'function') {
        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});
    } else {
        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object
        evaluatorFunctionOrOptions['pure'] = true;
        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);
    }
}
ko.exportSymbol('pureComputed', ko.pureComputed);

(function() {
    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)

    ko.toJS = function(rootObject) {
        if (arguments.length == 0)
            throw new Error("When calling ko.toJS, pass the object you want to convert.");

        // We just unwrap everything at every level in the object graph
        return mapJsObjectGraph(rootObject, function(valueToMap) {
            // Loop because an observable's value might in turn be another observable wrapper
            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)
                valueToMap = valueToMap();
            return valueToMap;
        });
    };

    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional
        var plainJavaScriptObject = ko.toJS(rootObject);
        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);
    };

    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {
        visitedObjects = visitedObjects || new objectLookup();

        rootObject = mapInputCallback(rootObject);
        var canHaveProperties = (typeof rootObject == "object") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));
        if (!canHaveProperties)
            return rootObject;

        var outputProperties = rootObject instanceof Array ? [] : {};
        visitedObjects.save(rootObject, outputProperties);

        visitPropertiesOrArrayEntries(rootObject, function(indexer) {
            var propertyValue = mapInputCallback(rootObject[indexer]);

            switch (typeof propertyValue) {
                case "boolean":
                case "number":
                case "string":
                case "function":
                    outputProperties[indexer] = propertyValue;
                    break;
                case "object":
                case "undefined":
                    var previouslyMappedValue = visitedObjects.get(propertyValue);
                    outputProperties[indexer] = (previouslyMappedValue !== undefined)
                        ? previouslyMappedValue
                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);
                    break;
            }
        });

        return outputProperties;
    }

    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
        if (rootObject instanceof Array) {
            for (var i = 0; i < rootObject.length; i++)
                visitorCallback(i);

            // For arrays, also respect toJSON property for custom mappings (fixes #278)
            if (typeof rootObject['toJSON'] == 'function')
                visitorCallback('toJSON');
        } else {
            for (var propertyName in rootObject) {
                visitorCallback(propertyName);
            }
        }
    };

    function objectLookup() {
        this.keys = [];
        this.values = [];
    };

    objectLookup.prototype = {
        constructor: objectLookup,
        save: function(key, value) {
            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);
            if (existingIndex >= 0)
                this.values[existingIndex] = value;
            else {
                this.keys.push(key);
                this.values.push(value);
            }
        },
        get: function(key) {
            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);
            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;
        }
    };
})();

ko.exportSymbol('toJS', ko.toJS);
ko.exportSymbol('toJSON', ko.toJSON);
(function () {
    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';

    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values
    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values
    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.
    ko.selectExtensions = {
        readValue : function(element) {
            switch (ko.utils.tagNameLower(element)) {
                case 'option':
                    if (element[hasDomDataExpandoProperty] === true)
                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);
                    return ko.utils.ieVersion <= 7
                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)
                        : element.value;
                case 'select':
                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;
                default:
                    return element.value;
            }
        },

        writeValue: function(element, value, allowUnset) {
            switch (ko.utils.tagNameLower(element)) {
                case 'option':
                    switch(typeof value) {
                        case "string":
                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);
                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node
                                delete element[hasDomDataExpandoProperty];
                            }
                            element.value = value;
                            break;
                        default:
                            // Store arbitrary object using DomData
                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);
                            element[hasDomDataExpandoProperty] = true;

                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.
                            element.value = typeof value === "number" ? value : "";
                            break;
                    }
                    break;
                case 'select':
                    if (value === "" || value === null)       // A blank string or null value will select the caption
                        value = undefined;
                    var selection = -1;
                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {
                        optionValue = ko.selectExtensions.readValue(element.options[i]);
                        // Include special check to handle selecting a caption with a blank string value
                        if (optionValue == value || (optionValue == "" && value === undefined)) {
                            selection = i;
                            break;
                        }
                    }
                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {
                        element.selectedIndex = selection;
                    }
                    break;
                default:
                    if ((value === null) || (value === undefined))
                        value = "";
                    element.value = value;
                    break;
            }
        }
    };
})();

ko.exportSymbol('selectExtensions', ko.selectExtensions);
ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);
ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);
ko.expressionRewriting = (function () {
    var javaScriptReservedWords = ["true", "false", "null", "undefined"];

    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor
    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).
    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).
    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i;

    function getWriteableValue(expression) {
        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)
            return false;
        var match = expression.match(javaScriptAssignmentTarget);
        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;
    }

    // The following regular expressions will be used to split an object-literal string into tokens

        // These two match strings, either with double quotes or single quotes
    var stringDouble = '"(?:[^"\\\\]|\\\\.)*"',
        stringSingle = "'(?:[^'\\\\]|\\\\.)*'",
        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions
        // as a regular expression (this is handled by the parsing loop below).
        stringRegexp = '/(?:[^/\\\\]|\\\\.)*/\w*',
        // These characters have special meaning to the parser and must not appear in the middle of a
        // token, except as part of a string.
        specials = ',"\'{}()/:[\\]',
        // Match text (at least two characters) that does not contain any of the above special characters,
        // although some of the special characters are allowed to start it (all but the colon and comma).
        // The text can contain spaces, but leading or trailing spaces are skipped.
        everyThingElse = '[^\\s:,/][^' + specials + ']*[^\\s' + specials + ']',
        // Match any non-space character not matched already. This will match colons and commas, since they're
        // not matched by "everyThingElse", but will also match any other single character that wasn't already
        // matched (for example: in "a: 1, b: 2", each of the non-space characters will be matched by oneNotSpace).
        oneNotSpace = '[^\\s]',

        // Create the actual regular expression by or-ing the above strings. The order is important.
        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),

        // Match end of previous token to determine whether a slash is a division or regex.
        divisionLookBehind = /[\])"'A-Za-z0-9_$]+$/,
        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};

    function parseObjectLiteral(objectLiteralString) {
        // Trim leading and trailing spaces from the string
        var str = ko.utils.stringTrim(objectLiteralString);

        // Trim braces '{' surrounding the whole object literal
        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);

        // Split into tokens
        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;

        if (toks) {
            // Append a comma so that we don't need a separate code block to deal with the last item
            toks.push(',');

            for (var i = 0, tok; tok = toks[i]; ++i) {
                var c = tok.charCodeAt(0);
                // A comma signals the end of a key/value pair if depth is zero
                if (c === 44) { // ","
                    if (depth <= 0) {
                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});
                        key = depth = 0;
                        values = [];
                        continue;
                    }
                // Simply skip the colon that separates the name and value
                } else if (c === 58) { // ":"
                    if (!depth && !key && values.length === 1) {
                        key = values.pop();
                        continue;
                    }
                // A set of slashes is initially matched as a regular expression, but could be division
                } else if (c === 47 && i && tok.length > 1) {  // "/"
                    // Look at the end of the previous token to determine if the slash is actually division
                    var match = toks[i-1].match(divisionLookBehind);
                    if (match && !keywordRegexLookBehind[match[0]]) {
                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)
                        str = str.substr(str.indexOf(tok) + 1);
                        toks = str.match(bindingToken);
                        toks.push(',');
                        i = -1;
                        // Continue with just the slash
                        tok = '/';
                    }
                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored
                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['
                    ++depth;
                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'
                    --depth;
                // The key will be the first token; if it's a string, trim the quotes
                } else if (!key && !values.length && (c === 34 || c === 39)) { // '"', "'"
                    tok = tok.slice(1, -1);
                }
                values.push(tok);
            }
        }
        return result;
    }

    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.
    var twoWayBindings = {};

    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {
        bindingOptions = bindingOptions || {};

        function processKeyValue(key, val) {
            var writableVal;
            function callPreprocessHook(obj) {
                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;
            }
            if (!bindingParams) {
                if (!callPreprocessHook(ko['getBindingHandler'](key)))
                    return;

                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {
                    // For two-way bindings, provide a write method in case the value
                    // isn't a writable observable.
                    propertyAccessorResultStrings.push("'" + key + "':function(_z){" + writableVal + "=_z}");
                }
            }
            // Values are wrapped in a function so that each value can be accessed independently
            if (makeValueAccessors) {
                val = 'function(){return ' + val + ' }';
            }
            resultStrings.push("'" + key + "':" + val);
        }

        var resultStrings = [],
            propertyAccessorResultStrings = [],
            makeValueAccessors = bindingOptions['valueAccessors'],
            bindingParams = bindingOptions['bindingParams'],
            keyValueArray = typeof bindingsStringOrKeyValueArray === "string" ?
                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;

        ko.utils.arrayForEach(keyValueArray, function(keyValue) {
            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);
        });

        if (propertyAccessorResultStrings.length)
            processKeyValue('_ko_property_writers', "{" + propertyAccessorResultStrings.join(",") + " }");

        return resultStrings.join(",");
    }

    return {
        bindingRewriteValidators: [],

        twoWayBindings: twoWayBindings,

        parseObjectLiteral: parseObjectLiteral,

        preProcessBindings: preProcessBindings,

        keyValueArrayContainsKey: function(keyValueArray, key) {
            for (var i = 0; i < keyValueArray.length; i++)
                if (keyValueArray[i]['key'] == key)
                    return true;
            return false;
        },

        // Internal, private KO utility for updating model properties from within bindings
        // property:            If the property being updated is (or might be) an observable, pass it here
        //                      If it turns out to be a writable observable, it will be written to directly
        // allBindings:         An object with a get method to retrieve bindings in the current execution context.
        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable
        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'
        // value:               The value to be written
        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if
        //                      it is !== existing value on that writable observable
        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {
            if (!property || !ko.isObservable(property)) {
                var propWriters = allBindings.get('_ko_property_writers');
                if (propWriters && propWriters[key])
                    propWriters[key](value);
            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {
                property(value);
            }
        }
    };
})();

ko.exportSymbol('expressionRewriting', ko.expressionRewriting);
ko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);
ko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);
ko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);

// Making bindings explicitly declare themselves as "two way" isn't ideal in the long term (it would be better if
// all bindings could use an official 'property writer' API without needing to declare that they might). However,
// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable
// as an internal implementation detail in the short term.
// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an
// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official
// public API, and we reserve the right to remove it at any time if we create a real public property writers API.
ko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);

// For backward compatibility, define the following aliases. (Previously, these function names were misleading because
// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)
ko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);
ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);
(function() {
    // "Virtual elements" is an abstraction on top of the usual DOM API which understands the notion that comment nodes
    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).
    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state
    // of that virtual hierarchy
    //
    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)
    // without having to scatter special cases all over the binding and templating code.

    // IE 9 cannot reliably read the "nodeValue" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)
    // but it does give them a nonstandard alternative property called "text" that it can read reliably. Other browsers don't have that property.
    // So, use node.text where available, and node.nodeValue elsewhere
    var commentNodesHaveTextProperty = document && document.createComment("test").text === "<!--test-->";

    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/ : /^\s*ko(?:\s+([\s\S]+))?\s*$/;
    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\s*\/ko\s*-->$/ : /^\s*\/ko\s*$/;
    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };

    function isStartComment(node) {
        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);
    }

    function isEndComment(node) {
        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);
    }

    function getVirtualChildren(startComment, allowUnbalanced) {
        var currentNode = startComment;
        var depth = 1;
        var children = [];
        while (currentNode = currentNode.nextSibling) {
            if (isEndComment(currentNode)) {
                depth--;
                if (depth === 0)
                    return children;
            }

            children.push(currentNode);

            if (isStartComment(currentNode))
                depth++;
        }
        if (!allowUnbalanced)
            throw new Error("Cannot find closing comment tag to match: " + startComment.nodeValue);
        return null;
    }

    function getMatchingEndComment(startComment, allowUnbalanced) {
        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);
        if (allVirtualChildren) {
            if (allVirtualChildren.length > 0)
                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;
            return startComment.nextSibling;
        } else
            return null; // Must have no matching end comment, and allowUnbalanced is true
    }

    function getUnbalancedChildTags(node) {
        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>
        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->
        var childNode = node.firstChild, captureRemaining = null;
        if (childNode) {
            do {
                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes
                    captureRemaining.push(childNode);
                else if (isStartComment(childNode)) {
                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);
                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set
                        childNode = matchingEndComment;
                    else
                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point
                } else if (isEndComment(childNode)) {
                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing
                }
            } while (childNode = childNode.nextSibling);
        }
        return captureRemaining;
    }

    ko.virtualElements = {
        allowedBindings: {},

        childNodes: function(node) {
            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;
        },

        emptyNode: function(node) {
            if (!isStartComment(node))
                ko.utils.emptyDomNode(node);
            else {
                var virtualChildren = ko.virtualElements.childNodes(node);
                for (var i = 0, j = virtualChildren.length; i < j; i++)
                    ko.removeNode(virtualChildren[i]);
            }
        },

        setDomNodeChildren: function(node, childNodes) {
            if (!isStartComment(node))
                ko.utils.setDomNodeChildren(node, childNodes);
            else {
                ko.virtualElements.emptyNode(node);
                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children
                for (var i = 0, j = childNodes.length; i < j; i++)
                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);
            }
        },

        prepend: function(containerNode, nodeToPrepend) {
            if (!isStartComment(containerNode)) {
                if (containerNode.firstChild)
                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);
                else
                    containerNode.appendChild(nodeToPrepend);
            } else {
                // Start comments must always have a parent and at least one following sibling (the end comment)
                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);
            }
        },

        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {
            if (!insertAfterNode) {
                ko.virtualElements.prepend(containerNode, nodeToInsert);
            } else if (!isStartComment(containerNode)) {
                // Insert after insertion point
                if (insertAfterNode.nextSibling)
                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
                else
                    containerNode.appendChild(nodeToInsert);
            } else {
                // Children of start comments must always have a parent and at least one following sibling (the end comment)
                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
            }
        },

        firstChild: function(node) {
            if (!isStartComment(node))
                return node.firstChild;
            if (!node.nextSibling || isEndComment(node.nextSibling))
                return null;
            return node.nextSibling;
        },

        nextSibling: function(node) {
            if (isStartComment(node))
                node = getMatchingEndComment(node);
            if (node.nextSibling && isEndComment(node.nextSibling))
                return null;
            return node.nextSibling;
        },

        hasBindingValue: isStartComment,

        virtualNodeBindingValue: function(node) {
            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);
            return regexMatch ? regexMatch[1] : null;
        },

        normaliseVirtualElementDomStructure: function(elementVerified) {
            // Workaround for https://github.com/SteveSanderson/knockout/issues/155
            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes
            // that are direct descendants of <ul> into the preceding <li>)
            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])
                return;

            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags
            // must be intended to appear *after* that child, so move them there.
            var childNode = elementVerified.firstChild;
            if (childNode) {
                do {
                    if (childNode.nodeType === 1) {
                        var unbalancedTags = getUnbalancedChildTags(childNode);
                        if (unbalancedTags) {
                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child
                            var nodeToInsertBefore = childNode.nextSibling;
                            for (var i = 0; i < unbalancedTags.length; i++) {
                                if (nodeToInsertBefore)
                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);
                                else
                                    elementVerified.appendChild(unbalancedTags[i]);
                            }
                        }
                    }
                } while (childNode = childNode.nextSibling);
            }
        }
    };
})();
ko.exportSymbol('virtualElements', ko.virtualElements);
ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);
ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);
//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified
ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);
//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified
ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);
ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);
(function() {
    var defaultBindingAttributeName = "data-bind";

    ko.bindingProvider = function() {
        this.bindingCache = {};
    };

    ko.utils.extend(ko.bindingProvider.prototype, {
        'nodeHasBindings': function(node) {
            switch (node.nodeType) {
                case 1: // Element
                    return node.getAttribute(defaultBindingAttributeName) != null
                        || ko.components['getComponentNameForNode'](node);
                case 8: // Comment node
                    return ko.virtualElements.hasBindingValue(node);
                default: return false;
            }
        },

        'getBindings': function(node, bindingContext) {
            var bindingsString = this['getBindingsString'](node, bindingContext),
                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;
            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);
        },

        'getBindingAccessors': function(node, bindingContext) {
            var bindingsString = this['getBindingsString'](node, bindingContext),
                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;
            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);
        },

        // The following function is only used internally by this default provider.
        // It's not part of the interface definition for a general binding provider.
        'getBindingsString': function(node, bindingContext) {
            switch (node.nodeType) {
                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element
                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node
                default: return null;
            }
        },

        // The following function is only used internally by this default provider.
        // It's not part of the interface definition for a general binding provider.
        'parseBindingsString': function(bindingsString, bindingContext, node, options) {
            try {
                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);
                return bindingFunction(bindingContext, node);
            } catch (ex) {
                ex.message = "Unable to parse bindings.\nBindings value: " + bindingsString + "\nMessage: " + ex.message;
                throw ex;
            }
        }
    });

    ko.bindingProvider['instance'] = new ko.bindingProvider();

    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {
        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');
        return cache[cacheKey]
            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));
    }

    function createBindingsStringEvaluator(bindingsString, options) {
        // Build the source for a function that evaluates "expression"
        // For each scope variable, add an extra level of "with" nesting
        // Example result: with(sc1) { with(sc0) { return (expression) } }
        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),
            functionBody = "with($context){with($data||{}){return{" + rewrittenBindings + "}}}";
        return new Function("$context", "$element", functionBody);
    }
})();

ko.exportSymbol('bindingProvider', ko.bindingProvider);
(function () {
    ko.bindingHandlers = {};

    // The following element types will not be recursed into during binding.
    var bindingDoesNotRecurseIntoElementTypes = {
        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,
        // because it's unexpected and a potential XSS issue.
        // Also bindings should not operate on <template> elements since this breaks in Internet Explorer
        // and because such elements' contents are always intended to be bound in a different context
        // from where they appear in the document.
        'script': true,
        'textarea': true,
        'template': true
    };

    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers
    ko['getBindingHandler'] = function(bindingKey) {
        return ko.bindingHandlers[bindingKey];
    };

    // The ko.bindingContext constructor is only called directly to create the root context. For child
    // contexts, use bindingContext.createChildContext or bindingContext.extend.
    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {

        // The binding context object includes static properties for the current, parent, and root view models.
        // If a view model is actually stored in an observable, the corresponding binding context object, and
        // any child contexts, must be updated when the view model is changed.
        function updateContext() {
            // Most of the time, the context will directly get a view model object, but if a function is given,
            // we call the function to retrieve the view model. If the function accesses any observables or returns
            // an observable, the dependency is tracked, and those observables can later cause the binding
            // context to be updated.
            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,
                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);

            if (parentContext) {
                // When a "parent" context is given, register a dependency on the parent context. Thus whenever the
                // parent context is updated, this context will also be updated.
                if (parentContext._subscribable)
                    parentContext._subscribable();

                // Copy $root and any custom properties from the parent context
                ko.utils.extend(self, parentContext);

                // Because the above copy overwrites our own properties, we need to reset them.
                self._subscribable = subscribable;
            } else {
                self['$parents'] = [];
                self['$root'] = dataItem;

                // Export 'ko' in the binding context so it will be available in bindings and templates
                // even if 'ko' isn't exported as a global, such as when using an AMD loader.
                // See https://github.com/SteveSanderson/knockout/issues/490
                self['ko'] = ko;
            }
            self['$rawData'] = dataItemOrObservable;
            self['$data'] = dataItem;
            if (dataItemAlias)
                self[dataItemAlias] = dataItem;

            // The extendCallback function is provided when creating a child context or extending a context.
            // It handles the specific actions needed to finish setting up the binding context. Actions in this
            // function could also add dependencies to this binding context.
            if (extendCallback)
                extendCallback(self, parentContext, dataItem);

            return self['$data'];
        }
        function disposeWhen() {
            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);
        }

        var self = this,
            isFunc = typeof(dataItemOrAccessor) == "function" && !ko.isObservable(dataItemOrAccessor),
            nodes,
            subscribable;

        if (options && options['exportDependencies']) {
            // The "exportDependencies" option means that the calling code will track any dependencies and re-create
            // the binding context when they change.
            updateContext();
        } else {
            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });

            // At this point, the binding context has been initialized, and the "subscribable" computed observable is
            // subscribed to any observables that were accessed in the process. If there is nothing to track, the
            // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in
            // the context object.
            if (subscribable.isActive()) {
                self._subscribable = subscribable;

                // Always notify because even if the model ($data) hasn't changed, other context properties might have changed
                subscribable['equalityComparer'] = null;

                // We need to be able to dispose of this computed observable when it's no longer needed. This would be
                // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and
                // we cannot assume that those nodes have any relation to each other. So instead we track any node that
                // the context is attached to, and dispose the computed when all of those nodes have been cleaned.

                // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates
                nodes = [];
                subscribable._addNode = function(node) {
                    nodes.push(node);
                    ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {
                        ko.utils.arrayRemoveItem(nodes, node);
                        if (!nodes.length) {
                            subscribable.dispose();
                            self._subscribable = subscribable = undefined;
                        }
                    });
                };
            }
        }
    }

    // Extend the binding context hierarchy with a new view model object. If the parent context is watching
    // any observables, the new child context will automatically get a dependency on the parent context.
    // But this does not mean that the $data value of the child context will also get updated. If the child
    // view model also depends on the parent view model, you must provide a function that returns the correct
    // view model on each update.
    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {
        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {
            // Extend the context hierarchy by setting the appropriate pointers
            self['$parentContext'] = parentContext;
            self['$parent'] = parentContext['$data'];
            self['$parents'] = (parentContext['$parents'] || []).slice(0);
            self['$parents'].unshift(self['$parent']);
            if (extendCallback)
                extendCallback(self);
        }, options);
    };

    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.
    // Similarly to "child" contexts, provide a function here to make sure that the correct values are set
    // when an observable view model is updated.
    ko.bindingContext.prototype['extend'] = function(properties) {
        // If the parent context references an observable view model, "_subscribable" will always be the
        // latest view model object. If not, "_subscribable" isn't set, and we can use the static "$data" value.
        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {
            // This "child" context doesn't directly track a parent observable view model,
            // so we need to manually set the $rawData value to match the parent.
            self['$rawData'] = parentContext['$rawData'];
            ko.utils.extend(self, typeof(properties) == "function" ? properties() : properties);
        });
    };

    ko.bindingContext.prototype.createStaticChildContext = function (dataItemOrAccessor, dataItemAlias) {
        return this['createChildContext'](dataItemOrAccessor, dataItemAlias, null, { "exportDependencies": true });
    };

    // Returns the valueAccesor function for a binding value
    function makeValueAccessor(value) {
        return function() {
            return value;
        };
    }

    // Returns the value of a valueAccessor function
    function evaluateValueAccessor(valueAccessor) {
        return valueAccessor();
    }

    // Given a function that returns bindings, create and return a new object that contains
    // binding value-accessors functions. Each accessor function calls the original function
    // so that it always gets the latest value and all dependencies are captured. This is used
    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.
    function makeAccessorsFromFunction(callback) {
        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {
            return function() {
                return callback()[key];
            };
        });
    }

    // Given a bindings function or object, create and return a new object that contains
    // binding value-accessors functions. This is used by ko.applyBindingsToNode.
    function makeBindingAccessors(bindings, context, node) {
        if (typeof bindings === 'function') {
            return makeAccessorsFromFunction(bindings.bind(null, context, node));
        } else {
            return ko.utils.objectMap(bindings, makeValueAccessor);
        }
    }

    // This function is used if the binding provider doesn't include a getBindingAccessors function.
    // It must be called with 'this' set to the provider instance.
    function getBindingsAndMakeAccessors(node, context) {
        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));
    }

    function validateThatBindingIsAllowedForVirtualElements(bindingName) {
        var validator = ko.virtualElements.allowedBindings[bindingName];
        if (!validator)
            throw new Error("The binding '" + bindingName + "' cannot be used with virtual elements")
    }

    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {
        var currentChild,
            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),
            provider = ko.bindingProvider['instance'],
            preprocessNode = provider['preprocessNode'];

        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's
        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to
        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that
        // trigger insertion of <template> contents at that point in the document.
        if (preprocessNode) {
            while (currentChild = nextInQueue) {
                nextInQueue = ko.virtualElements.nextSibling(currentChild);
                preprocessNode.call(provider, currentChild);
            }
            // Reset nextInQueue for the next loop
            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);
        }

        while (currentChild = nextInQueue) {
            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position
            nextInQueue = ko.virtualElements.nextSibling(currentChild);
            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);
        }
    }

    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {
        var shouldBindDescendants = true;

        // Perf optimisation: Apply bindings only if...
        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)
        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those
        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)
        var isElement = (nodeVerified.nodeType === 1);
        if (isElement) // Workaround IE <= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);

        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)
                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)
        if (shouldApplyBindings)
            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];

        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {
            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,
            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,
            //    hence bindingContextsMayDifferFromDomParentElement is false
            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may
            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,
            //    hence bindingContextsMayDifferFromDomParentElement is true
            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);
        }
    }

    var boundElementDomDataKey = ko.utils.domData.nextKey();


    function topologicalSortBindings(bindings) {
        // Depth-first sort
        var result = [],                // The list of key/handler pairs that we will return
            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'
            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it
        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {
            if (!bindingsConsidered[bindingKey]) {
                var binding = ko['getBindingHandler'](bindingKey);
                if (binding) {
                    // First add dependencies (if any) of the current binding
                    if (binding['after']) {
                        cyclicDependencyStack.push(bindingKey);
                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {
                            if (bindings[bindingDependencyKey]) {
                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {
                                    throw Error("Cannot combine the following bindings, because they have a cyclic dependency: " + cyclicDependencyStack.join(", "));
                                } else {
                                    pushBinding(bindingDependencyKey);
                                }
                            }
                        });
                        cyclicDependencyStack.length--;
                    }
                    // Next add the current binding
                    result.push({ key: bindingKey, handler: binding });
                }
                bindingsConsidered[bindingKey] = true;
            }
        });

        return result;
    }

    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {
        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified
        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);
        if (!sourceBindings) {
            if (alreadyBound) {
                throw Error("You cannot apply bindings multiple times to the same element.");
            }
            ko.utils.domData.set(node, boundElementDomDataKey, true);
        }

        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because
        // we can easily recover it just by scanning up the node's ancestors in the DOM
        // (note: here, parent node means "real DOM parent" not "virtual parent", as there's no O(1) way to find the virtual parent)
        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)
            ko.storedBindingContextForNode(node, bindingContext);

        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings
        var bindings;
        if (sourceBindings && typeof sourceBindings !== 'function') {
            bindings = sourceBindings;
        } else {
            var provider = ko.bindingProvider['instance'],
                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;

            // Get the binding from the provider within a computed observable so that we can update the bindings whenever
            // the binding context is updated or if the binding provider accesses observables.
            var bindingsUpdater = ko.dependentObservable(
                function() {
                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);
                    // Register a dependency on the binding context to support observable view models.
                    if (bindings && bindingContext._subscribable)
                        bindingContext._subscribable();
                    return bindings;
                },
                null, { disposeWhenNodeIsRemoved: node }
            );

            if (!bindings || !bindingsUpdater.isActive())
                bindingsUpdater = null;
        }

        var bindingHandlerThatControlsDescendantBindings;
        if (bindings) {
            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding
            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets
            // the latest binding value and registers a dependency on the binding updater.
            var getValueAccessor = bindingsUpdater
                ? function(bindingKey) {
                    return function() {
                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);
                    };
                } : function(bindingKey) {
                    return bindings[bindingKey];
                };

            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated
            function allBindings() {
                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);
            }
            // The following is the 3.x allBindings API
            allBindings['get'] = function(key) {
                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));
            };
            allBindings['has'] = function(key) {
                return key in bindings;
            };

            // First put the bindings into the right order
            var orderedBindings = topologicalSortBindings(bindings);

            // Go through the sorted bindings, calling init and update for each
            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {
                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,
                // so bindingKeyAndHandler.handler will always be nonnull.
                var handlerInitFn = bindingKeyAndHandler.handler["init"],
                    handlerUpdateFn = bindingKeyAndHandler.handler["update"],
                    bindingKey = bindingKeyAndHandler.key;

                if (node.nodeType === 8) {
                    validateThatBindingIsAllowedForVirtualElements(bindingKey);
                }

                try {
                    // Run init, ignoring any dependencies
                    if (typeof handlerInitFn == "function") {
                        ko.dependencyDetection.ignore(function() {
                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);

                            // If this binding handler claims to control descendant bindings, make a note of this
                            if (initResult && initResult['controlsDescendantBindings']) {
                                if (bindingHandlerThatControlsDescendantBindings !== undefined)
                                    throw new Error("Multiple bindings (" + bindingHandlerThatControlsDescendantBindings + " and " + bindingKey + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
                                bindingHandlerThatControlsDescendantBindings = bindingKey;
                            }
                        });
                    }

                    // Run update in its own computed wrapper
                    if (typeof handlerUpdateFn == "function") {
                        ko.dependentObservable(
                            function() {
                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);
                            },
                            null,
                            { disposeWhenNodeIsRemoved: node }
                        );
                    }
                } catch (ex) {
                    ex.message = "Unable to process binding \"" + bindingKey + ": " + bindings[bindingKey] + "\"\nMessage: " + ex.message;
                    throw ex;
                }
            });
        }

        return {
            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined
        };
    };

    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();
    ko.storedBindingContextForNode = function (node, bindingContext) {
        if (arguments.length == 2) {
            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);
            if (bindingContext._subscribable)
                bindingContext._subscribable._addNode(node);
        } else {
            return ko.utils.domData.get(node, storedBindingContextDomDataKey);
        }
    }

    function getBindingContext(viewModelOrBindingContext) {
        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)
            ? viewModelOrBindingContext
            : new ko.bindingContext(viewModelOrBindingContext);
    }

    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {
        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(node);
        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);
    };

    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {
        var context = getBindingContext(viewModelOrBindingContext);
        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);
    };

    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {
        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)
            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);
    };

    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {
        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.
        if (!jQueryInstance && window['jQuery']) {
            jQueryInstance = window['jQuery'];
        }

        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))
            throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");
        rootNode = rootNode || window.document.body; // Make "rootNode" parameter optional

        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);
    };

    // Retrieving binding context from arbitrary nodes
    ko.contextFor = function(node) {
        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)
        switch (node.nodeType) {
            case 1:
            case 8:
                var context = ko.storedBindingContextForNode(node);
                if (context) return context;
                if (node.parentNode) return ko.contextFor(node.parentNode);
                break;
        }
        return undefined;
    };
    ko.dataFor = function(node) {
        var context = ko.contextFor(node);
        return context ? context['$data'] : undefined;
    };

    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);
    ko.exportSymbol('applyBindings', ko.applyBindings);
    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);
    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);
    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);
    ko.exportSymbol('contextFor', ko.contextFor);
    ko.exportSymbol('dataFor', ko.dataFor);
})();
(function(undefined) {
    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight
        loadedDefinitionsCache = {};    // Tracks component loads that have already completed

    ko.components = {
        get: function(componentName, callback) {
            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);
            if (cachedDefinition) {
                // It's already loaded and cached. Reuse the same definition object.
                // Note that for API consistency, even cache hits complete asynchronously by default.
                // You can bypass this by putting synchronous:true on your component config.
                if (cachedDefinition.isSynchronousComponent) {
                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning
                        callback(cachedDefinition.definition);
                    });
                } else {
                    ko.tasks.schedule(function() { callback(cachedDefinition.definition); });
                }
            } else {
                // Join the loading process that is already underway, or start a new one.
                loadComponentAndNotify(componentName, callback);
            }
        },

        clearCachedDefinition: function(componentName) {
            delete loadedDefinitionsCache[componentName];
        },

        _getFirstResultFromLoaders: getFirstResultFromLoaders
    };

    function getObjectOwnProperty(obj, propName) {
        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;
    }

    function loadComponentAndNotify(componentName, callback) {
        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),
            completedAsync;
        if (!subscribable) {
            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.
            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();
            subscribable.subscribe(callback);

            beginLoadingComponent(componentName, function(definition, config) {
                var isSynchronousComponent = !!(config && config['synchronous']);
                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };
                delete loadingSubscribablesCache[componentName];

                // For API consistency, all loads complete asynchronously. However we want to avoid
                // adding an extra task schedule if it's unnecessary (i.e., the completion is already
                // async).
                //
                // You can bypass the 'always asynchronous' feature by putting the synchronous:true
                // flag on your component configuration when you register it.
                if (completedAsync || isSynchronousComponent) {
                    // Note that notifySubscribers ignores any dependencies read within the callback.
                    // See comment in loaderRegistryBehaviors.js for reasoning
                    subscribable['notifySubscribers'](definition);
                } else {
                    ko.tasks.schedule(function() {
                        subscribable['notifySubscribers'](definition);
                    });
                }
            });
            completedAsync = true;
        } else {
            subscribable.subscribe(callback);
        }
    }

    function beginLoadingComponent(componentName, callback) {
        getFirstResultFromLoaders('getConfig', [componentName], function(config) {
            if (config) {
                // We have a config, so now load its definition
                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {
                    callback(definition, config);
                });
            } else {
                // The component has no config - it's unknown to all the loaders.
                // Note that this is not an error (e.g., a module loading error) - that would abort the
                // process and this callback would not run. For this callback to run, all loaders must
                // have confirmed they don't know about this component.
                callback(null, null);
            }
        });
    }

    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {
        // On the first call in the stack, start with the full set of loaders
        if (!candidateLoaders) {
            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array
        }

        // Try the next candidate
        var currentCandidateLoader = candidateLoaders.shift();
        if (currentCandidateLoader) {
            var methodInstance = currentCandidateLoader[methodName];
            if (methodInstance) {
                var wasAborted = false,
                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {
                        if (wasAborted) {
                            callback(null);
                        } else if (result !== null) {
                            // This candidate returned a value. Use it.
                            callback(result);
                        } else {
                            // Try the next candidate
                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);
                        }
                    }));

                // Currently, loaders may not return anything synchronously. This leaves open the possibility
                // that we'll extend the API to support synchronous return values in the future. It won't be
                // a breaking change, because currently no loader is allowed to return anything except undefined.
                if (synchronousReturnValue !== undefined) {
                    wasAborted = true;

                    // Method to suppress exceptions will remain undocumented. This is only to keep
                    // KO's specs running tidily, since we can observe the loading got aborted without
                    // having exceptions cluttering up the console too.
                    if (!currentCandidateLoader['suppressLoaderExceptions']) {
                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');
                    }
                }
            } else {
                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.
                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);
            }
        } else {
            // No candidates returned a value
            callback(null);
        }
    }

    // Reference the loaders via string name so it's possible for developers
    // to replace the whole array by assigning to ko.components.loaders
    ko.components['loaders'] = [];

    ko.exportSymbol('components', ko.components);
    ko.exportSymbol('components.get', ko.components.get);
    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);
})();
(function(undefined) {

    // The default loader is responsible for two things:
    // 1. Maintaining the default in-memory registry of component configuration objects
    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))
    // 2. Answering requests for components by fetching configuration objects
    //    from that default in-memory registry and resolving them into standard
    //    component definition objects (of the form { createViewModel: ..., template: ... })
    // Custom loaders may override either of these facilities, i.e.,
    // 1. To supply configuration objects from some other source (e.g., conventions)
    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.

    var defaultConfigRegistry = {};

    ko.components.register = function(componentName, config) {
        if (!config) {
            throw new Error('Invalid configuration for ' + componentName);
        }

        if (ko.components.isRegistered(componentName)) {
            throw new Error('Component ' + componentName + ' is already registered');
        }

        defaultConfigRegistry[componentName] = config;
    };

    ko.components.isRegistered = function(componentName) {
        return defaultConfigRegistry.hasOwnProperty(componentName);
    };

    ko.components.unregister = function(componentName) {
        delete defaultConfigRegistry[componentName];
        ko.components.clearCachedDefinition(componentName);
    };

    ko.components.defaultLoader = {
        'getConfig': function(componentName, callback) {
            var result = defaultConfigRegistry.hasOwnProperty(componentName)
                ? defaultConfigRegistry[componentName]
                : null;
            callback(result);
        },

        'loadComponent': function(componentName, config, callback) {
            var errorCallback = makeErrorCallback(componentName);
            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {
                resolveConfig(componentName, errorCallback, loadedConfig, callback);
            });
        },

        'loadTemplate': function(componentName, templateConfig, callback) {
            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);
        },

        'loadViewModel': function(componentName, viewModelConfig, callback) {
            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);
        }
    };

    var createViewModelKey = 'createViewModel';

    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it
    // into the standard component definition format:
    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.
    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed
    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,
    // so this is implemented manually below.
    function resolveConfig(componentName, errorCallback, config, callback) {
        var result = {},
            makeCallBackWhenZero = 2,
            tryIssueCallback = function() {
                if (--makeCallBackWhenZero === 0) {
                    callback(result);
                }
            },
            templateConfig = config['template'],
            viewModelConfig = config['viewModel'];

        if (templateConfig) {
            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {
                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {
                    result['template'] = resolvedTemplate;
                    tryIssueCallback();
                });
            });
        } else {
            tryIssueCallback();
        }

        if (viewModelConfig) {
            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {
                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {
                    result[createViewModelKey] = resolvedViewModel;
                    tryIssueCallback();
                });
            });
        } else {
            tryIssueCallback();
        }
    }

    function resolveTemplate(errorCallback, templateConfig, callback) {
        if (typeof templateConfig === 'string') {
            // Markup - parse it
            callback(ko.utils.parseHtmlFragment(templateConfig));
        } else if (templateConfig instanceof Array) {
            // Assume already an array of DOM nodes - pass through unchanged
            callback(templateConfig);
        } else if (isDocumentFragment(templateConfig)) {
            // Document fragment - use its child nodes
            callback(ko.utils.makeArray(templateConfig.childNodes));
        } else if (templateConfig['element']) {
            var element = templateConfig['element'];
            if (isDomElement(element)) {
                // Element instance - copy its child nodes
                callback(cloneNodesFromTemplateSourceElement(element));
            } else if (typeof element === 'string') {
                // Element ID - find it, then copy its child nodes
                var elemInstance = document.getElementById(element);
                if (elemInstance) {
                    callback(cloneNodesFromTemplateSourceElement(elemInstance));
                } else {
                    errorCallback('Cannot find element with ID ' + element);
                }
            } else {
                errorCallback('Unknown element type: ' + element);
            }
        } else {
            errorCallback('Unknown template value: ' + templateConfig);
        }
    }

    function resolveViewModel(errorCallback, viewModelConfig, callback) {
        if (typeof viewModelConfig === 'function') {
            // Constructor - convert to standard factory function format
            // By design, this does *not* supply componentInfo to the constructor, as the intent is that
            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only
            // be used in factory functions, not viewmodel constructors.
            callback(function (params /*, componentInfo */) {
                return new viewModelConfig(params);
            });
        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {
            // Already a factory function - use it as-is
            callback(viewModelConfig[createViewModelKey]);
        } else if ('instance' in viewModelConfig) {
            // Fixed object instance - promote to createViewModel format for API consistency
            var fixedInstance = viewModelConfig['instance'];
            callback(function (params, componentInfo) {
                return fixedInstance;
            });
        } else if ('viewModel' in viewModelConfig) {
            // Resolved AMD module whose value is of the form { viewModel: ... }
            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);
        } else {
            errorCallback('Unknown viewModel value: ' + viewModelConfig);
        }
    }

    function cloneNodesFromTemplateSourceElement(elemInstance) {
        switch (ko.utils.tagNameLower(elemInstance)) {
            case 'script':
                return ko.utils.parseHtmlFragment(elemInstance.text);
            case 'textarea':
                return ko.utils.parseHtmlFragment(elemInstance.value);
            case 'template':
                // For browsers with proper <template> element support (i.e., where the .content property
                // gives a document fragment), use that document fragment.
                if (isDocumentFragment(elemInstance.content)) {
                    return ko.utils.cloneNodes(elemInstance.content.childNodes);
                }
        }

        // Regular elements such as <div>, and <template> elements on old browsers that don't really
        // understand <template> and just treat it as a regular container
        return ko.utils.cloneNodes(elemInstance.childNodes);
    }

    function isDomElement(obj) {
        if (window['HTMLElement']) {
            return obj instanceof HTMLElement;
        } else {
            return obj && obj.tagName && obj.nodeType === 1;
        }
    }

    function isDocumentFragment(obj) {
        if (window['DocumentFragment']) {
            return obj instanceof DocumentFragment;
        } else {
            return obj && obj.nodeType === 11;
        }
    }

    function possiblyGetConfigFromAmd(errorCallback, config, callback) {
        if (typeof config['require'] === 'string') {
            // The config is the value of an AMD module
            if (amdRequire || window['require']) {
                (amdRequire || window['require'])([config['require']], callback);
            } else {
                errorCallback('Uses require, but no AMD loader is present');
            }
        } else {
            callback(config);
        }
    }

    function makeErrorCallback(componentName) {
        return function (message) {
            throw new Error('Component \'' + componentName + '\': ' + message);
        };
    }

    ko.exportSymbol('components.register', ko.components.register);
    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);
    ko.exportSymbol('components.unregister', ko.components.unregister);

    // Expose the default loader so that developers can directly ask it for configuration
    // or to resolve configuration
    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);

    // By default, the default loader is the only registered component loader
    ko.components['loaders'].push(ko.components.defaultLoader);

    // Privately expose the underlying config registry for use in old-IE shim
    ko.components._allRegisteredComponents = defaultConfigRegistry;
})();
(function (undefined) {
    // Overridable API for determining which component name applies to a given node. By overriding this,
    // you can for example map specific tagNames to components that are not preregistered.
    ko.components['getComponentNameForNode'] = function(node) {
        var tagNameLower = ko.utils.tagNameLower(node);
        if (ko.components.isRegistered(tagNameLower)) {
            // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603
            if (tagNameLower.indexOf('-') != -1 || ('' + node) == "[object HTMLUnknownElement]" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {
                return tagNameLower;
            }
        }
    };

    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {
        // Determine if it's really a custom element matching a component
        if (node.nodeType === 1) {
            var componentName = ko.components['getComponentNameForNode'](node);
            if (componentName) {
                // It does represent a component, so add a component binding for it
                allBindings = allBindings || {};

                if (allBindings['component']) {
                    // Avoid silently overwriting some other 'component' binding that may already be on the element
                    throw new Error('Cannot use the "component" binding on a custom element matching a component');
                }

                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };

                allBindings['component'] = valueAccessors
                    ? function() { return componentBindingValue; }
                    : componentBindingValue;
            }
        }

        return allBindings;
    }

    var nativeBindingProviderInstance = new ko.bindingProvider();

    function getComponentParamsFromCustomElement(elem, bindingContext) {
        var paramsAttribute = elem.getAttribute('params');

        if (paramsAttribute) {
            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),
                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {
                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });
                }),
                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {
                    var paramValue = paramValueComputed.peek();
                    // Does the evaluation of the parameter value unwrap any observables?
                    if (!paramValueComputed.isActive()) {
                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.
                        // Example: "someVal: firstName, age: 123" (whether or not firstName is an observable/computed)
                        return paramValue;
                    } else {
                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)
                        // level of observability, and any inner (resulting model value) level of observability.
                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a
                        // writable observable, the computed will also be writable and pass the value on to the observable.
                        return ko.computed({
                            'read': function() {
                                return ko.utils.unwrapObservable(paramValueComputed());
                            },
                            'write': ko.isWriteableObservable(paramValue) && function(value) {
                                paramValueComputed()(value);
                            },
                            disposeWhenNodeIsRemoved: elem
                        });
                    }
                });

            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'
            // This is in case the developer wants to react to outer (binding) observability separately from inner
            // (model value) observability, or in case the model value observable has subobservables.
            if (!result.hasOwnProperty('$raw')) {
                result['$raw'] = rawParamComputedValues;
            }

            return result;
        } else {
            // For consistency, absence of a "params" attribute is treated the same as the presence of
            // any empty one. Otherwise component viewmodels need special code to check whether or not
            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.
            return { '$raw': {} };
        }
    }

    // --------------------------------------------------------------------------------
    // Compatibility code for older (pre-HTML5) IE browsers

    if (ko.utils.ieVersion < 9) {
        // Whenever you preregister a component, enable it as a custom element in the current document
        ko.components['register'] = (function(originalFunction) {
            return function(componentName) {
                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element
                return originalFunction.apply(this, arguments);
            }
        })(ko.components['register']);

        // Whenever you create a document fragment, enable all preregistered component names as custom elements
        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements
        document.createDocumentFragment = (function(originalFunction) {
            return function() {
                var newDocFrag = originalFunction(),
                    allComponents = ko.components._allRegisteredComponents;
                for (var componentName in allComponents) {
                    if (allComponents.hasOwnProperty(componentName)) {
                        newDocFrag.createElement(componentName);
                    }
                }
                return newDocFrag;
            };
        })(document.createDocumentFragment);
    }
})();(function(undefined) {

    var componentLoadingOperationUniqueId = 0;

    ko.bindingHandlers['component'] = {
        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {
            var currentViewModel,
                currentLoadingOperationId,
                disposeAssociatedComponentViewModel = function () {
                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];
                    if (typeof currentViewModelDispose === 'function') {
                        currentViewModelDispose.call(currentViewModel);
                    }
                    currentViewModel = null;
                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion
                    currentLoadingOperationId = null;
                },
                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));

            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);

            ko.computed(function () {
                var value = ko.utils.unwrapObservable(valueAccessor()),
                    componentName, componentParams;

                if (typeof value === 'string') {
                    componentName = value;
                } else {
                    componentName = ko.utils.unwrapObservable(value['name']);
                    componentParams = ko.utils.unwrapObservable(value['params']);
                }

                if (!componentName) {
                    throw new Error('No component name specified');
                }

                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;
                ko.components.get(componentName, function(componentDefinition) {
                    // If this is not the current load operation for this element, ignore it.
                    if (currentLoadingOperationId !== loadingOperationId) {
                        return;
                    }

                    // Clean up previous state
                    disposeAssociatedComponentViewModel();

                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.
                    if (!componentDefinition) {
                        throw new Error('Unknown component \'' + componentName + '\'');
                    }
                    cloneTemplateIntoElement(componentName, componentDefinition, element);
                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),
                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {
                            ctx['$component'] = componentViewModel;
                            ctx['$componentTemplateNodes'] = originalChildNodes;
                        });
                    currentViewModel = componentViewModel;
                    ko.applyBindingsToDescendants(childBindingContext, element);
                });
            }, null, { disposeWhenNodeIsRemoved: element });

            return { 'controlsDescendantBindings': true };
        }
    };

    ko.virtualElements.allowedBindings['component'] = true;

    function cloneTemplateIntoElement(componentName, componentDefinition, element) {
        var template = componentDefinition['template'];
        if (!template) {
            throw new Error('Component \'' + componentName + '\' has no template');
        }

        var clonedNodesArray = ko.utils.cloneNodes(template);
        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);
    }

    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {
        var componentViewModelFactory = componentDefinition['createViewModel'];
        return componentViewModelFactory
            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })
            : componentParams; // Template-only component
    }

})();
var attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };
ko.bindingHandlers['attr'] = {
    'update': function(element, valueAccessor, allBindings) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        ko.utils.objectForEach(value, function(attrName, attrValue) {
            attrValue = ko.utils.unwrapObservable(attrValue);

            // To cover cases like "attr: { checked:someProp }", we want to remove the attribute entirely
            // when someProp is a "no value"-like value (strictly null, false, or undefined)
            // (because the absence of the "checked" attr is how to mark an element as not checked, etc.)
            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);
            if (toRemove)
                element.removeAttribute(attrName);

            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the
            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,
            // but instead of figuring out the mode, we'll just set the attribute through the Javascript
            // property for IE <= 8.
            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {
                attrName = attrHtmlToJavascriptMap[attrName];
                if (toRemove)
                    element.removeAttribute(attrName);
                else
                    element[attrName] = attrValue;
            } else if (!toRemove) {
                element.setAttribute(attrName, attrValue.toString());
            }

            // Treat "name" specially - although you can think of it as an attribute, it also needs
            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)
            // Deliberately being case-sensitive here because XHTML would regard "Name" as a different thing
            // entirely, and there's no strong reason to allow for such casing in HTML.
            if (attrName === "name") {
                ko.utils.setElementName(element, toRemove ? "" : attrValue.toString());
            }
        });
    }
};
(function() {

ko.bindingHandlers['checked'] = {
    'after': ['value', 'attr'],
    'init': function (element, valueAccessor, allBindings) {
        var checkedValue = ko.pureComputed(function() {
            // Treat "value" like "checkedValue" when it is included with "checked" binding
            if (allBindings['has']('checkedValue')) {
                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));
            } else if (allBindings['has']('value')) {
                return ko.utils.unwrapObservable(allBindings.get('value'));
            }

            return element.value;
        });

        function updateModel() {
            // This updates the model value from the view value.
            // It runs in response to DOM events (click) and changes in checkedValue.
            var isChecked = element.checked,
                elemValue = useCheckedValue ? checkedValue() : isChecked;

            // When we're first setting up this computed, don't change any model state.
            if (ko.computedContext.isInitial()) {
                return;
            }

            // We can ignore unchecked radio buttons, because some other radio
            // button will be getting checked, and that one can take care of updating state.
            if (isRadio && !isChecked) {
                return;
            }

            var modelValue = ko.dependencyDetection.ignore(valueAccessor);
            if (valueIsArray) {
                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;
                if (oldElemValue !== elemValue) {
                    // When we're responding to the checkedValue changing, and the element is
                    // currently checked, replace the old elem value with the new elem value
                    // in the model array.
                    if (isChecked) {
                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);
                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);
                    }

                    oldElemValue = elemValue;
                } else {
                    // When we're responding to the user having checked/unchecked a checkbox,
                    // add/remove the element value to the model array.
                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);
                }
                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {
                    modelValue(writableValue);
                }
            } else {
                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);
            }
        };

        function updateView() {
            // This updates the view value from the model value.
            // It runs in response to changes in the bound (checked) value.
            var modelValue = ko.utils.unwrapObservable(valueAccessor());

            if (valueIsArray) {
                // When a checkbox is bound to an array, being checked represents its value being present in that array
                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;
            } else if (isCheckbox) {
                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish
                element.checked = modelValue;
            } else {
                // For radio buttons, being checked means that the radio button's value corresponds to the model value
                element.checked = (checkedValue() === modelValue);
            }
        };

        var isCheckbox = element.type == "checkbox",
            isRadio = element.type == "radio";

        // Only bind to check boxes and radio buttons
        if (!isCheckbox && !isRadio) {
            return;
        }

        var rawValue = valueAccessor(),
            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),
            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),
            oldElemValue = valueIsArray ? checkedValue() : undefined,
            useCheckedValue = isRadio || valueIsArray;

        // IE 6 won't allow radio buttons to be selected unless they have a name
        if (isRadio && !element.name)
            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });

        // Set up two computeds to update the binding:

        // The first responds to changes in the checkedValue value and to element clicks
        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });
        ko.utils.registerEventHandler(element, "click", updateModel);

        // The second responds to changes in the model value (the one associated with the checked binding)
        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });

        rawValue = undefined;
    }
};
ko.expressionRewriting.twoWayBindings['checked'] = true;

ko.bindingHandlers['checkedValue'] = {
    'update': function (element, valueAccessor) {
        element.value = ko.utils.unwrapObservable(valueAccessor());
    }
};

})();var classesWrittenByBindingKey = '__ko__cssValue';
ko.bindingHandlers['css'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (value !== null && typeof value == "object") {
            ko.utils.objectForEach(value, function(className, shouldHaveClass) {
                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);
                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);
            });
        } else {
            value = ko.utils.stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value
            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);
            element[classesWrittenByBindingKey] = value;
            ko.utils.toggleDomNodeCssClass(element, value, true);
        }
    }
};
ko.bindingHandlers['enable'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (value && element.disabled)
            element.removeAttribute("disabled");
        else if ((!value) && (!element.disabled))
            element.disabled = true;
    }
};

ko.bindingHandlers['disable'] = {
    'update': function (element, valueAccessor) {
        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });
    }
};
// For certain common events (currently just 'click'), allow a simplified data-binding syntax
// e.g. click:handler instead of the usual full-length event:{click:handler}
function makeEventHandlerShortcut(eventName) {
    ko.bindingHandlers[eventName] = {
        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            var newValueAccessor = function () {
                var result = {};
                result[eventName] = valueAccessor();
                return result;
            };
            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);
        }
    }
}

ko.bindingHandlers['event'] = {
    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var eventsToHandle = valueAccessor() || {};
        ko.utils.objectForEach(eventsToHandle, function(eventName) {
            if (typeof eventName == "string") {
                ko.utils.registerEventHandler(element, eventName, function (event) {
                    var handlerReturnValue;
                    var handlerFunction = valueAccessor()[eventName];
                    if (!handlerFunction)
                        return;

                    try {
                        // Take all the event args, and prefix with the viewmodel
                        var argsForHandler = ko.utils.makeArray(arguments);
                        viewModel = bindingContext['$data'];
                        argsForHandler.unshift(viewModel);
                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);
                    } finally {
                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                            if (event.preventDefault)
                                event.preventDefault();
                            else
                                event.returnValue = false;
                        }
                    }

                    var bubble = allBindings.get(eventName + 'Bubble') !== false;
                    if (!bubble) {
                        event.cancelBubble = true;
                        if (event.stopPropagation)
                            event.stopPropagation();
                    }
                });
            }
        });
    }
};
// "foreach: someExpression" is equivalent to "template: { foreach: someExpression }"
// "foreach: { data: someExpression, afterAdd: myfn }" is equivalent to "template: { foreach: someExpression, afterAdd: myfn }"
ko.bindingHandlers['foreach'] = {
    makeTemplateValueAccessor: function(valueAccessor) {
        return function() {
            var modelValue = valueAccessor(),
                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here

            // If unwrappedValue is the array, pass in the wrapped value on its own
            // The value will be unwrapped and tracked within the template binding
            // (See https://github.com/SteveSanderson/knockout/issues/523)
            if ((!unwrappedValue) || typeof unwrappedValue.length == "number")
                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };

            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates
            ko.utils.unwrapObservable(modelValue);
            return {
                'foreach': unwrappedValue['data'],
                'as': unwrappedValue['as'],
                'includeDestroyed': unwrappedValue['includeDestroyed'],
                'afterAdd': unwrappedValue['afterAdd'],
                'beforeRemove': unwrappedValue['beforeRemove'],
                'afterRender': unwrappedValue['afterRender'],
                'beforeMove': unwrappedValue['beforeMove'],
                'afterMove': unwrappedValue['afterMove'],
                'templateEngine': ko.nativeTemplateEngine.instance
            };
        };
    },
    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));
    },
    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);
    }
};
ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings
ko.virtualElements.allowedBindings['foreach'] = true;
var hasfocusUpdatingProperty = '__ko_hasfocusUpdating';
var hasfocusLastValue = '__ko_hasfocusLastValue';
ko.bindingHandlers['hasfocus'] = {
    'init': function(element, valueAccessor, allBindings) {
        var handleElementFocusChange = function(isFocused) {
            // Where possible, ignore which event was raised and determine focus state using activeElement,
            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.
            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,
            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus
            // from calling 'blur()' on the element when it loses focus.
            // Discussion at https://github.com/SteveSanderson/knockout/pull/352
            element[hasfocusUpdatingProperty] = true;
            var ownerDoc = element.ownerDocument;
            if ("activeElement" in ownerDoc) {
                var active;
                try {
                    active = ownerDoc.activeElement;
                } catch(e) {
                    // IE9 throws if you access activeElement during page load (see issue #703)
                    active = ownerDoc.body;
                }
                isFocused = (active === element);
            }
            var modelValue = valueAccessor();
            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);

            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function
            element[hasfocusLastValue] = isFocused;
            element[hasfocusUpdatingProperty] = false;
        };
        var handleElementFocusIn = handleElementFocusChange.bind(null, true);
        var handleElementFocusOut = handleElementFocusChange.bind(null, false);

        ko.utils.registerEventHandler(element, "focus", handleElementFocusIn);
        ko.utils.registerEventHandler(element, "focusin", handleElementFocusIn); // For IE
        ko.utils.registerEventHandler(element, "blur",  handleElementFocusOut);
        ko.utils.registerEventHandler(element, "focusout",  handleElementFocusOut); // For IE
    },
    'update': function(element, valueAccessor) {
        var value = !!ko.utils.unwrapObservable(valueAccessor());

        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {
            value ? element.focus() : element.blur();

            // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).
            // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current
            // element was focused already.
            if (!value && element[hasfocusLastValue]) {
                element.ownerDocument.body.focus();
            }

            // For IE, which doesn't reliably fire "focus" or "blur" events synchronously
            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? "focusin" : "focusout"]);
        }
    }
};
ko.expressionRewriting.twoWayBindings['hasfocus'] = true;

ko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make "hasFocus" an alias
ko.expressionRewriting.twoWayBindings['hasFocus'] = true;
ko.bindingHandlers['html'] = {
    'init': function() {
        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)
        return { 'controlsDescendantBindings': true };
    },
    'update': function (element, valueAccessor) {
        // setHtml will unwrap the value if needed
        ko.utils.setHtml(element, valueAccessor());
    }
};
// Makes a binding like with or if
function makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {
    ko.bindingHandlers[bindingKey] = {
        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            var didDisplayOnLastUpdate,
                savedNodes;
            ko.computed(function() {
                var rawValue = valueAccessor(),
                    dataValue = ko.utils.unwrapObservable(rawValue),
                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue
                    isFirstRender = !savedNodes,
                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);

                if (needsRefresh) {
                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.
                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {
                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);
                    }

                    if (shouldDisplay) {
                        if (!isFirstRender) {
                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));
                        }
                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, rawValue) : bindingContext, element);
                    } else {
                        ko.virtualElements.emptyNode(element);
                    }

                    didDisplayOnLastUpdate = shouldDisplay;
                }
            }, null, { disposeWhenNodeIsRemoved: element });
            return { 'controlsDescendantBindings': true };
        }
    };
    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings
    ko.virtualElements.allowedBindings[bindingKey] = true;
}

// Construct the actual binding handlers
makeWithIfBinding('if');
makeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);
makeWithIfBinding('with', true /* isWith */, false /* isNot */,
    function(bindingContext, dataValue) {
        return bindingContext.createStaticChildContext(dataValue);
    }
);
var captionPlaceholder = {};
ko.bindingHandlers['options'] = {
    'init': function(element) {
        if (ko.utils.tagNameLower(element) !== "select")
            throw new Error("options binding applies only to SELECT elements");

        // Remove all existing <option>s.
        while (element.length > 0) {
            element.remove(0);
        }

        // Ensures that the binding processor doesn't try to bind the options
        return { 'controlsDescendantBindings': true };
    },
    'update': function (element, valueAccessor, allBindings) {
        function selectedOptions() {
            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });
        }

        var selectWasPreviouslyEmpty = element.length == 0,
            multiple = element.multiple,
            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,
            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),
            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),
            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),
            arrayToDomNodeChildrenOptions = {},
            captionValue,
            filteredArray,
            previousSelectedValues = [];

        if (!valueAllowUnset) {
            if (multiple) {
                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);
            } else if (element.selectedIndex >= 0) {
                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));
            }
        }

        if (unwrappedArray) {
            if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
                unwrappedArray = [unwrappedArray];

            // Filter out any entries marked as destroyed
            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {
                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);
            });

            // If caption is included, add it to the array
            if (allBindings['has']('optionsCaption')) {
                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));
                // If caption value is null or undefined, don't show a caption
                if (captionValue !== null && captionValue !== undefined) {
                    filteredArray.unshift(captionPlaceholder);
                }
            }
        } else {
            // If a falsy value is provided (e.g. null), we'll simply empty the select element
        }

        function applyToObject(object, predicate, defaultValue) {
            var predicateType = typeof predicate;
            if (predicateType == "function")    // Given a function; run it against the data value
                return predicate(object);
            else if (predicateType == "string") // Given a string; treat it as a property name on the data value
                return object[predicate];
            else                                // Given no optionsText arg; use the data value itself
                return defaultValue;
        }

        // The following functions can run at two different times:
        // The first is when the whole array is being updated directly from this binding handler.
        // The second is when an observable value for a specific array entry is updated.
        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.
        var itemUpdate = false;
        function optionForArrayItem(arrayEntry, index, oldOptions) {
            if (oldOptions.length) {
                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];
                itemUpdate = true;
            }
            var option = element.ownerDocument.createElement("option");
            if (arrayEntry === captionPlaceholder) {
                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));
                ko.selectExtensions.writeValue(option, undefined);
            } else {
                // Apply a value to the option element
                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);
                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));

                // Apply some text to the option element
                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);
                ko.utils.setTextContent(option, optionText);
            }
            return [option];
        }

        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection
        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208
        arrayToDomNodeChildrenOptions['beforeRemove'] =
            function (option) {
                element.removeChild(option);
            };

        function setSelectionCallback(arrayEntry, newOptions) {
            if (itemUpdate && valueAllowUnset) {
                // The model value is authoritative, so make sure its value is the one selected
                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.
                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);
            } else if (previousSelectedValues.length) {
                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.
                // That's why we first added them without selection. Now it's time to set the selection.
                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;
                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);

                // If this option was changed from being selected during a single-item update, notify the change
                if (itemUpdate && !isSelected) {
                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, "change"]);
                }
            }
        }

        var callback = setSelectionCallback;
        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == "function") {
            callback = function(arrayEntry, newOptions) {
                setSelectionCallback(arrayEntry, newOptions);
                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);
            }
        }

        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);

        ko.dependencyDetection.ignore(function () {
            if (valueAllowUnset) {
                // The model value is authoritative, so make sure its value is the one selected
                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);
            } else {
                // Determine if the selection has changed as a result of updating the options list
                var selectionChanged;
                if (multiple) {
                    // For a multiple-select box, compare the new selection count to the previous one
                    // But if nothing was selected before, the selection can't have changed
                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;
                } else {
                    // For a single-select box, compare the current value to the previous value
                    // But if nothing was selected before or nothing is selected now, just look for a change in selection
                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)
                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])
                        : (previousSelectedValues.length || element.selectedIndex >= 0);
                }

                // Ensure consistency between model value and selected option.
                // If the dropdown was changed so that selection is no longer the same,
                // notify the value or selectedOptions binding.
                if (selectionChanged) {
                    ko.utils.triggerEvent(element, "change");
                }
            }
        });

        // Workaround for IE bug
        ko.utils.ensureSelectElementIsRenderedCorrectly(element);

        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)
            element.scrollTop = previousScrollTop;
    }
};
ko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();
ko.bindingHandlers['selectedOptions'] = {
    'after': ['options', 'foreach'],
    'init': function (element, valueAccessor, allBindings) {
        ko.utils.registerEventHandler(element, "change", function () {
            var value = valueAccessor(), valueToWrite = [];
            ko.utils.arrayForEach(element.getElementsByTagName("option"), function(node) {
                if (node.selected)
                    valueToWrite.push(ko.selectExtensions.readValue(node));
            });
            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);
        });
    },
    'update': function (element, valueAccessor) {
        if (ko.utils.tagNameLower(element) != "select")
            throw new Error("values binding applies only to SELECT elements");

        var newValue = ko.utils.unwrapObservable(valueAccessor()),
            previousScrollTop = element.scrollTop;

        if (newValue && typeof newValue.length == "number") {
            ko.utils.arrayForEach(element.getElementsByTagName("option"), function(node) {
                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;
                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE
                    ko.utils.setOptionNodeSelectionState(node, isSelected);
                }
            });
        }

        element.scrollTop = previousScrollTop;
    }
};
ko.expressionRewriting.twoWayBindings['selectedOptions'] = true;
ko.bindingHandlers['style'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        ko.utils.objectForEach(value, function(styleName, styleValue) {
            styleValue = ko.utils.unwrapObservable(styleValue);

            if (styleValue === null || styleValue === undefined || styleValue === false) {
                // Empty string removes the value, whereas null/undefined have no effect
                styleValue = "";
            }

            element.style[styleName] = styleValue;
        });
    }
};
ko.bindingHandlers['submit'] = {
    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        if (typeof valueAccessor() != "function")
            throw new Error("The value for a submit binding must be a function");
        ko.utils.registerEventHandler(element, "submit", function (event) {
            var handlerReturnValue;
            var value = valueAccessor();
            try { handlerReturnValue = value.call(bindingContext['$data'], element); }
            finally {
                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                    if (event.preventDefault)
                        event.preventDefault();
                    else
                        event.returnValue = false;
                }
            }
        });
    }
};
ko.bindingHandlers['text'] = {
    'init': function() {
        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).
        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.
        return { 'controlsDescendantBindings': true };
    },
    'update': function (element, valueAccessor) {
        ko.utils.setTextContent(element, valueAccessor());
    }
};
ko.virtualElements.allowedBindings['text'] = true;
(function () {

if (window && window.navigator) {
    var parseVersion = function (matches) {
        if (matches) {
            return parseFloat(matches[1]);
        }
    };

    // Detect various browser versions because some old versions don't fully support the 'input' event
    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),
        userAgent = window.navigator.userAgent,
        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),
        firefoxVersion = parseVersion(userAgent.match(/Firefox\/([^ ]*)/));
}

// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.
// But it does fire the 'selectionchange' event on many of those, presumably because the
// cursor is moving and that counts as the selection changing. The 'selectionchange' event is
// fired at the document level only and doesn't directly indicate which element changed. We
// set up just one event handler for the document and use 'activeElement' to determine which
// element was changed.
if (ko.utils.ieVersion < 10) {
    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),
        selectionChangeHandlerName = ko.utils.domData.nextKey();
    var selectionChangeHandler = function(event) {
        var target = this.activeElement,
            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);
        if (handler) {
            handler(event);
        }
    };
    var registerForSelectionChangeEvent = function (element, handler) {
        var ownerDoc = element.ownerDocument;
        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {
            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);
            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);
        }
        ko.utils.domData.set(element, selectionChangeHandlerName, handler);
    };
}

ko.bindingHandlers['textInput'] = {
    'init': function (element, valueAccessor, allBindings) {

        var previousElementValue = element.value,
            timeoutHandle,
            elementValueBeforeEvent;

        var updateModel = function (event) {
            clearTimeout(timeoutHandle);
            elementValueBeforeEvent = timeoutHandle = undefined;

            var elementValue = element.value;
            if (previousElementValue !== elementValue) {
                // Provide a way for tests to know exactly which event was processed
                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;
                previousElementValue = elementValue;
                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);
            }
        };

        var deferUpdateModel = function (event) {
            if (!timeoutHandle) {
                // The elementValueBeforeEvent variable is set *only* during the brief gap between an
                // event firing and the updateModel function running. This allows us to ignore model
                // updates that are from the previous state of the element, usually due to techniques
                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.
                elementValueBeforeEvent = element.value;
                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;
                timeoutHandle = ko.utils.setTimeout(handler, 4);
            }
        };

        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);
        // so we'll make sure all updates are asynchronous
        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;

        var updateView = function () {
            var modelValue = ko.utils.unwrapObservable(valueAccessor());

            if (modelValue === null || modelValue === undefined) {
                modelValue = '';
            }

            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {
                ko.utils.setTimeout(updateView, 4);
                return;
            }

            // Update the element only if the element and model are different. On some browsers, updating the value
            // will move the cursor to the end of the input, which would be bad while the user is typing.
            if (element.value !== modelValue) {
                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value
                element.value = modelValue;
            }
        };

        var onEvent = function (event, handler) {
            ko.utils.registerEventHandler(element, event, handler);
        };

        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {
            // Provide a way for tests to specify exactly which events are bound
            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {
                if (eventName.slice(0,5) == 'after') {
                    onEvent(eventName.slice(5), deferUpdateModel);
                } else {
                    onEvent(eventName, updateModel);
                }
            });
        } else {
            if (ko.utils.ieVersion < 10) {
                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever
                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,
                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it
                // when using autocomplete, we'll use 'propertychange' for it also.
                onEvent('propertychange', function(event) {
                    if (event.propertyName === 'value') {
                        ieUpdateModel(event);
                    }
                });

                if (ko.utils.ieVersion == 8) {
                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from
                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following
                    // events too.
                    onEvent('keyup', updateModel);      // A single keystoke
                    onEvent('keydown', updateModel);    // The first character when a key is held down
                }
                if (ko.utils.ieVersion >= 8) {
                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using
                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text
                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'
                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.
                    // These are also needed in IE8 because of the bug described above.
                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.
                    onEvent('dragend', deferUpdateModel);
                }
            } else {
                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed
                // through the user interface.
                onEvent('input', updateModel);

                if (safariVersion < 5 && ko.utils.tagNameLower(element) === "textarea") {
                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'
                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.
                    onEvent('keydown', deferUpdateModel);
                    onEvent('paste', deferUpdateModel);
                    onEvent('cut', deferUpdateModel);
                } else if (operaVersion < 11) {
                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.
                    // We can try to catch some of those using 'keydown'.
                    onEvent('keydown', deferUpdateModel);
                } else if (firefoxVersion < 4.0) {
                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete
                    onEvent('DOMAutoComplete', updateModel);

                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.
                    onEvent('dragdrop', updateModel);       // <3.5
                    onEvent('drop', updateModel);           // 3.5
                }
            }
        }

        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.
        onEvent('change', updateModel);

        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });
    }
};
ko.expressionRewriting.twoWayBindings['textInput'] = true;

// textinput is an alias for textInput
ko.bindingHandlers['textinput'] = {
    // preprocess is the only way to set up a full alias
    'preprocess': function (value, name, addBinding) {
        addBinding('textInput', value);
    }
};

})();ko.bindingHandlers['uniqueName'] = {
    'init': function (element, valueAccessor) {
        if (valueAccessor()) {
            var name = "ko_unique_" + (++ko.bindingHandlers['uniqueName'].currentIndex);
            ko.utils.setElementName(element, name);
        }
    }
};
ko.bindingHandlers['uniqueName'].currentIndex = 0;
ko.bindingHandlers['value'] = {
    'after': ['options', 'foreach'],
    'init': function (element, valueAccessor, allBindings) {
        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit
        if (element.tagName.toLowerCase() == "input" && (element.type == "checkbox" || element.type == "radio")) {
            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });
            return;
        }

        // Always catch "change" event; possibly other events too if asked
        var eventsToCatch = ["change"];
        var requestedEventsToCatch = allBindings.get("valueUpdate");
        var propertyChangedFired = false;
        var elementValueBeforeEvent = null;

        if (requestedEventsToCatch) {
            if (typeof requestedEventsToCatch == "string") // Allow both individual event names, and arrays of event names
                requestedEventsToCatch = [requestedEventsToCatch];
            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);
            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);
        }

        var valueUpdateHandler = function() {
            elementValueBeforeEvent = null;
            propertyChangedFired = false;
            var modelValue = valueAccessor();
            var elementValue = ko.selectExtensions.readValue(element);
            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);
        }

        // Workaround for https://github.com/SteveSanderson/knockout/issues/122
        // IE doesn't fire "change" events on textboxes if the user selects a value from its autocomplete list
        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == "input" && element.type == "text"
                                       && element.autocomplete != "off" && (!element.form || element.form.autocomplete != "off");
        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, "propertychange") == -1) {
            ko.utils.registerEventHandler(element, "propertychange", function () { propertyChangedFired = true });
            ko.utils.registerEventHandler(element, "focus", function () { propertyChangedFired = false });
            ko.utils.registerEventHandler(element, "blur", function() {
                if (propertyChangedFired) {
                    valueUpdateHandler();
                }
            });
        }

        ko.utils.arrayForEach(eventsToCatch, function(eventName) {
            // The syntax "after<eventname>" means "run the handler asynchronously after the event"
            // This is useful, for example, to catch "keydown" events after the browser has updated the control
            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)
            var handler = valueUpdateHandler;
            if (ko.utils.stringStartsWith(eventName, "after")) {
                handler = function() {
                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between
                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen
                    // at the earliest asynchronous opportunity. We store this temporary information so that
                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,
                    // we can overwrite that model value change with the value the user just typed. Otherwise,
                    // techniques like rateLimit can trigger model changes at critical moments that will
                    // override the user's inputs, causing keystrokes to be lost.
                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);
                    ko.utils.setTimeout(valueUpdateHandler, 0);
                };
                eventName = eventName.substring("after".length);
            }
            ko.utils.registerEventHandler(element, eventName, handler);
        });

        var updateFromModel = function () {
            var newValue = ko.utils.unwrapObservable(valueAccessor());
            var elementValue = ko.selectExtensions.readValue(element);

            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {
                ko.utils.setTimeout(updateFromModel, 0);
                return;
            }

            var valueHasChanged = (newValue !== elementValue);

            if (valueHasChanged) {
                if (ko.utils.tagNameLower(element) === "select") {
                    var allowUnset = allBindings.get('valueAllowUnset');
                    var applyValueAction = function () {
                        ko.selectExtensions.writeValue(element, newValue, allowUnset);
                    };
                    applyValueAction();

                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {
                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,
                        // because you're not allowed to have a model value that disagrees with a visible UI selection.
                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, "change"]);
                    } else {
                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread
                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread
                        // to apply the value as well.
                        ko.utils.setTimeout(applyValueAction, 0);
                    }
                } else {
                    ko.selectExtensions.writeValue(element, newValue);
                }
            }
        };

        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });
    },
    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding
};
ko.expressionRewriting.twoWayBindings['value'] = true;
ko.bindingHandlers['visible'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        var isCurrentlyVisible = !(element.style.display == "none");
        if (value && !isCurrentlyVisible)
            element.style.display = "";
        else if ((!value) && isCurrentlyVisible)
            element.style.display = "none";
    }
};
// 'click' is just a shorthand for the usual full-length event:{click:handler}
makeEventHandlerShortcut('click');
// If you want to make a custom template engine,
//
// [1] Inherit from this class (like ko.nativeTemplateEngine does)
// [2] Override 'renderTemplateSource', supplying a function with this signature:
//
//        function (templateSource, bindingContext, options) {
//            // - templateSource.text() is the text of the template you should render
//            // - bindingContext.$data is the data you should pass into the template
//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,
//            //     and bindingContext.$root available in the template too
//            // - options gives you access to any other properties set on "data-bind: { template: options }"
//            // - templateDocument is the document object of the template
//            //
//            // Return value: an array of DOM nodes
//        }
//
// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:
//
//        function (script) {
//            // Return value: Whatever syntax means "Evaluate the JavaScript statement 'script' and output the result"
//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'
//        }
//
//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.
//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)
//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.

ko.templateEngine = function () { };

ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {
    throw new Error("Override renderTemplateSource");
};

ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {
    throw new Error("Override createJavaScriptEvaluatorBlock");
};

ko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {
    // Named template
    if (typeof template == "string") {
        templateDocument = templateDocument || document;
        var elem = templateDocument.getElementById(template);
        if (!elem)
            throw new Error("Cannot find template with ID " + template);
        return new ko.templateSources.domElement(elem);
    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {
        // Anonymous template
        return new ko.templateSources.anonymousTemplate(template);
    } else
        throw new Error("Unknown template type: " + template);
};

ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {
    var templateSource = this['makeTemplateSource'](template, templateDocument);
    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);
};

ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {
    // Skip rewriting if requested
    if (this['allowTemplateRewriting'] === false)
        return true;
    return this['makeTemplateSource'](template, templateDocument)['data']("isRewritten");
};

ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {
    var templateSource = this['makeTemplateSource'](template, templateDocument);
    var rewritten = rewriterCallback(templateSource['text']());
    templateSource['text'](rewritten);
    templateSource['data']("isRewritten", true);
};

ko.exportSymbol('templateEngine', ko.templateEngine);

ko.templateRewriting = (function () {
    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi;
    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;

    function validateDataBindValuesForRewriting(keyValueArray) {
        var allValidators = ko.expressionRewriting.bindingRewriteValidators;
        for (var i = 0; i < keyValueArray.length; i++) {
            var key = keyValueArray[i]['key'];
            if (allValidators.hasOwnProperty(key)) {
                var validator = allValidators[key];

                if (typeof validator === "function") {
                    var possibleErrorMessage = validator(keyValueArray[i]['value']);
                    if (possibleErrorMessage)
                        throw new Error(possibleErrorMessage);
                } else if (!validator) {
                    throw new Error("This template engine does not support the '" + key + "' binding within its templates");
                }
            }
        }
    }

    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {
        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);
        validateDataBindValuesForRewriting(dataBindKeyValueArray);
        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});

        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional
        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this
        // extra indirection.
        var applyBindingsToNextSiblingScript =
            "ko.__tr_ambtns(function($context,$element){return(function(){return{ " + rewrittenDataBindAttributeValue + " } })()},'" + nodeName.toLowerCase() + "')";
        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;
    }

    return {
        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {
            if (!templateEngine['isTemplateRewritten'](template, templateDocument))
                templateEngine['rewriteTemplate'](template, function (htmlString) {
                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);
                }, templateDocument);
        },

        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {
            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {
                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);
            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {
                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ "<!-- ko -->", /* nodeName: */ "#comment", templateEngine);
            });
        },

        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {
            return ko.memoization.memoize(function (domNode, bindingContext) {
                var nodeToBind = domNode.nextSibling;
                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {
                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);
                }
            });
        }
    }
})();


// Exported only because it has to be referenced by string lookup from within rewritten template
ko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);
(function() {
    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving
    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)
    //
    // Two are provided by default:
    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element
    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but
    //                                           without reading/writing the actual element text content, since it will be overwritten
    //                                           with the rendered template output.
    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.
    // Template sources need to have the following functions:
    //   text() 			- returns the template text from your storage location
    //   text(value)		- writes the supplied template text to your storage location
    //   data(key)			- reads values stored using data(key, value) - see below
    //   data(key, value)	- associates "value" with this template and the key "key". Is used to store information like "isRewritten".
    //
    // Optionally, template sources can also have the following functions:
    //   nodes()            - returns a DOM element containing the nodes of this template, where available
    //   nodes(value)       - writes the given DOM element to your storage location
    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()
    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().
    //
    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were
    // using and overriding "makeTemplateSource" to return an instance of your custom template source.

    ko.templateSources = {};

    // ---- ko.templateSources.domElement -----

    // template types
    var templateScript = 1,
        templateTextArea = 2,
        templateTemplate = 3,
        templateElement = 4;

    ko.templateSources.domElement = function(element) {
        this.domElement = element;

        if (element) {
            var tagNameLower = ko.utils.tagNameLower(element);
            this.templateType =
                tagNameLower === "script" ? templateScript :
                tagNameLower === "textarea" ? templateTextArea :
                    // For browsers with proper <template> element support, where the .content property gives a document fragment
                tagNameLower == "template" && element.content && element.content.nodeType === 11 ? templateTemplate :
                templateElement;
        }
    }

    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {
        var elemContentsProperty = this.templateType === templateScript ? "text"
                                 : this.templateType === templateTextArea ? "value"
                                 : "innerHTML";

        if (arguments.length == 0) {
            return this.domElement[elemContentsProperty];
        } else {
            var valueToWrite = arguments[0];
            if (elemContentsProperty === "innerHTML")
                ko.utils.setHtml(this.domElement, valueToWrite);
            else
                this.domElement[elemContentsProperty] = valueToWrite;
        }
    };

    var dataDomDataPrefix = ko.utils.domData.nextKey() + "_";
    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {
        if (arguments.length === 1) {
            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);
        } else {
            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);
        }
    };

    var templatesDomDataKey = ko.utils.domData.nextKey();
    function getTemplateDomData(element) {
        return ko.utils.domData.get(element, templatesDomDataKey) || {};
    }
    function setTemplateDomData(element, data) {
        ko.utils.domData.set(element, templatesDomDataKey, data);
    }

    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {
        var element = this.domElement;
        if (arguments.length == 0) {
            var templateData = getTemplateDomData(element),
                containerData = templateData.containerData;
            return containerData || (
                this.templateType === templateTemplate ? element.content :
                this.templateType === templateElement ? element :
                undefined);
        } else {
            var valueToWrite = arguments[0];
            setTemplateDomData(element, {containerData: valueToWrite});
        }
    };

    // ---- ko.templateSources.anonymousTemplate -----
    // Anonymous templates are normally saved/retrieved as DOM nodes through "nodes".
    // For compatibility, you can also read "text"; it will be serialized from the nodes on demand.
    // Writing to "text" is still supported, but then the template data will not be available as DOM nodes.

    ko.templateSources.anonymousTemplate = function(element) {
        this.domElement = element;
    }
    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();
    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;
    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {
        if (arguments.length == 0) {
            var templateData = getTemplateDomData(this.domElement);
            if (templateData.textData === undefined && templateData.containerData)
                templateData.textData = templateData.containerData.innerHTML;
            return templateData.textData;
        } else {
            var valueToWrite = arguments[0];
            setTemplateDomData(this.domElement, {textData: valueToWrite});
        }
    };

    ko.exportSymbol('templateSources', ko.templateSources);
    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);
    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);
})();
(function () {
    var _templateEngine;
    ko.setTemplateEngine = function (templateEngine) {
        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))
            throw new Error("templateEngine must inherit from ko.templateEngine");
        _templateEngine = templateEngine;
    }

    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {
        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);
        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {
            nextInQueue = ko.virtualElements.nextSibling(node);
            action(node, nextInQueue);
        }
    }

    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {
        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element
        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because
        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,
        // (1) Does a regular "applyBindings" to associate bindingContext with this node and to activate any non-memoized bindings
        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)

        if (continuousNodeArray.length) {
            var firstNode = continuousNodeArray[0],
                lastNode = continuousNodeArray[continuousNodeArray.length - 1],
                parentNode = firstNode.parentNode,
                provider = ko.bindingProvider['instance'],
                preprocessNode = provider['preprocessNode'];

            if (preprocessNode) {
                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {
                    var nodePreviousSibling = node.previousSibling;
                    var newNodes = preprocessNode.call(provider, node);
                    if (newNodes) {
                        if (node === firstNode)
                            firstNode = newNodes[0] || nextNodeInRange;
                        if (node === lastNode)
                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;
                    }
                });

                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.
                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real
                // first node needs to be in the array).
                continuousNodeArray.length = 0;
                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do
                    return;
                }
                if (firstNode === lastNode) {
                    continuousNodeArray.push(firstNode);
                } else {
                    continuousNodeArray.push(firstNode, lastNode);
                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);
                }
            }

            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)
            // whereas a regular applyBindings won't introduce new memoized nodes
            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {
                if (node.nodeType === 1 || node.nodeType === 8)
                    ko.applyBindings(bindingContext, node);
            });
            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {
                if (node.nodeType === 1 || node.nodeType === 8)
                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);
            });

            // Make sure any changes done by applyBindings or unmemoize are reflected in the array
            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);
        }
    }

    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {
        return nodeOrNodeArray.nodeType ? nodeOrNodeArray
                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]
                                        : null;
    }

    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {
        options = options || {};
        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
        var templateDocument = (firstTargetNode || template || {}).ownerDocument;
        var templateEngineToUse = (options['templateEngine'] || _templateEngine);
        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);
        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);

        // Loosely check result is an array of DOM nodes
        if ((typeof renderedNodesArray.length != "number") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != "number"))
            throw new Error("Template engine must return an array of DOM nodes");

        var haveAddedNodesToParent = false;
        switch (renderMode) {
            case "replaceChildren":
                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);
                haveAddedNodesToParent = true;
                break;
            case "replaceNode":
                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);
                haveAddedNodesToParent = true;
                break;
            case "ignoreTargetNode": break;
            default:
                throw new Error("Unknown renderMode: " + renderMode);
        }

        if (haveAddedNodesToParent) {
            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);
            if (options['afterRender'])
                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);
        }

        return renderedNodesArray;
    }

    function resolveTemplateName(template, data, context) {
        // The template can be specified as:
        if (ko.isObservable(template)) {
            // 1. An observable, with string value
            return template();
        } else if (typeof template === 'function') {
            // 2. A function of (data, context) returning a string
            return template(data, context);
        } else {
            // 3. A string
            return template;
        }
    }

    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {
        options = options || {};
        if ((options['templateEngine'] || _templateEngine) == undefined)
            throw new Error("Set a template engine before calling renderTemplate");
        renderMode = renderMode || "replaceChildren";

        if (targetNodeOrNodeArray) {
            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);

            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)
            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == "replaceNode") ? firstTargetNode.parentNode : firstTargetNode;

            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes
                function () {
                    // Ensure we've got a proper binding context to work with
                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))
                        ? dataOrBindingContext
                        : new ko.bindingContext(dataOrBindingContext, null, null, null, { "exportDependencies": true });

                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),
                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);

                    if (renderMode == "replaceNode") {
                        targetNodeOrNodeArray = renderedNodesArray;
                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
                    }
                },
                null,
                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }
            );
        } else {
            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node
            return ko.memoization.memoize(function (domNode) {
                ko.renderTemplate(template, dataOrBindingContext, options, domNode, "replaceNode");
            });
        }
    };

    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {
        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then
        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.
        var arrayItemContext;

        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode
        var executeTemplateForArrayItem = function (arrayValue, index) {
            // Support selecting template as a function of the data being rendered
            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {
                context['$index'] = index;
            });

            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);
            return executeTemplate(null, "ignoreTargetNode", templateName, arrayItemContext, options);
        }

        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode
        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {
            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);
            if (options['afterRender'])
                options['afterRender'](addedNodesArray, arrayValue);

            // release the "cache" variable, so that it can be collected by
            // the GC when its value isn't used from within the bindings anymore.
            arrayItemContext = null;
        };

        return ko.dependentObservable(function () {
            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];
            if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
                unwrappedArray = [unwrappedArray];

            // Filter out any entries marked as destroyed
            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {
                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);
            });

            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).
            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.
            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);

        }, null, { disposeWhenNodeIsRemoved: targetNode });
    };

    var templateComputedDomDataKey = ko.utils.domData.nextKey();
    function disposeOldComputedAndStoreNewOne(element, newComputed) {
        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);
        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))
            oldComputed.dispose();
        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);
    }

    ko.bindingHandlers['template'] = {
        'init': function(element, valueAccessor) {
            // Support anonymous templates
            var bindingValue = ko.utils.unwrapObservable(valueAccessor());
            if (typeof bindingValue == "string" || bindingValue['name']) {
                // It's a named template - clear the element
                ko.virtualElements.emptyNode(element);
            } else if ('nodes' in bindingValue) {
                // We've been given an array of DOM nodes. Save them as the template source.
                // There is no known use case for the node array being an observable array (if the output
                // varies, put that behavior *into* your template - that's what templates are for), and
                // the implementation would be a mess, so assert that it's not observable.
                var nodes = bindingValue['nodes'] || [];
                if (ko.isObservable(nodes)) {
                    throw new Error('The "nodes" option must be a plain, non-observable array.');
                }
                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent
                new ko.templateSources.anonymousTemplate(element)['nodes'](container);
            } else {
                // It's an anonymous template - store the element contents, then clear the element
                var templateNodes = ko.virtualElements.childNodes(element),
                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent
                new ko.templateSources.anonymousTemplate(element)['nodes'](container);
            }
            return { 'controlsDescendantBindings': true };
        },
        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var value = valueAccessor(),
                options = ko.utils.unwrapObservable(value),
                shouldDisplay = true,
                templateComputed = null,
                templateName;

            if (typeof options == "string") {
                templateName = value;
                options = {};
            } else {
                templateName = options['name'];

                // Support "if"/"ifnot" conditions
                if ('if' in options)
                    shouldDisplay = ko.utils.unwrapObservable(options['if']);
                if (shouldDisplay && 'ifnot' in options)
                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);
            }

            if ('foreach' in options) {
                // Render once for each data point (treating data set as empty if shouldDisplay==false)
                var dataArray = (shouldDisplay && options['foreach']) || [];
                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);
            } else if (!shouldDisplay) {
                ko.virtualElements.emptyNode(element);
            } else {
                // Render once for this single data point (or use the viewModel if no data was provided)
                var innerBindingContext = ('data' in options) ?
                    bindingContext.createStaticChildContext(options['data'], options['as']) :  // Given an explitit 'data' value, we create a child binding context for it
                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context
                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);
            }

            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)
            disposeOldComputedAndStoreNewOne(element, templateComputed);
        }
    };

    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.
    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {
        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);

        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])
            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)

        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, "name"))
            return null; // Named templates can be rewritten, so return "no error"
        return "This template engine does not support anonymous templates nested within its templates";
    };

    ko.virtualElements.allowedBindings['template'] = true;
})();

ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);
ko.exportSymbol('renderTemplate', ko.renderTemplate);
// Go through the items that have been added and deleted and try to find matches between them.
ko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {
    if (left.length && right.length) {
        var failedCompares, l, r, leftItem, rightItem;
        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {
            for (r = 0; rightItem = right[r]; ++r) {
                if (leftItem['value'] === rightItem['value']) {
                    leftItem['moved'] = rightItem['index'];
                    rightItem['moved'] = leftItem['index'];
                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list
                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures
                    break;
                }
            }
            failedCompares += r;
        }
    }
};

ko.utils.compareArrays = (function () {
    var statusNotInOld = 'added', statusNotInNew = 'deleted';

    // Simple calculation based on Levenshtein distance.
    function compareArrays(oldArray, newArray, options) {
        // For backward compatibility, if the third arg is actually a bool, interpret
        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.
        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});
        oldArray = oldArray || [];
        newArray = newArray || [];

        if (oldArray.length < newArray.length)
            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);
        else
            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);
    }

    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {
        var myMin = Math.min,
            myMax = Math.max,
            editDistanceMatrix = [],
            smlIndex, smlIndexMax = smlArray.length,
            bigIndex, bigIndexMax = bigArray.length,
            compareRange = (bigIndexMax - smlIndexMax) || 1,
            maxDistance = smlIndexMax + bigIndexMax + 1,
            thisRow, lastRow,
            bigIndexMaxForRow, bigIndexMinForRow;

        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {
            lastRow = thisRow;
            editDistanceMatrix.push(thisRow = []);
            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);
            bigIndexMinForRow = myMax(0, smlIndex - 1);
            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {
                if (!bigIndex)
                    thisRow[bigIndex] = smlIndex + 1;
                else if (!smlIndex)  // Top row - transform empty array into new array via additions
                    thisRow[bigIndex] = bigIndex + 1;
                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])
                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)
                else {
                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)
                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)
                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;
                }
            }
        }

        var editScript = [], meMinusOne, notInSml = [], notInBig = [];
        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {
            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;
            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {
                notInSml.push(editScript[editScript.length] = {     // added
                    'status': statusNotInSml,
                    'value': bigArray[--bigIndex],
                    'index': bigIndex });
            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {
                notInBig.push(editScript[editScript.length] = {     // deleted
                    'status': statusNotInBig,
                    'value': smlArray[--smlIndex],
                    'index': smlIndex });
            } else {
                --bigIndex;
                --smlIndex;
                if (!options['sparse']) {
                    editScript.push({
                        'status': "retained",
                        'value': bigArray[bigIndex] });
                }
            }
        }

        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of
        // smlIndexMax keeps the time complexity of this algorithm linear.
        ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);

        return editScript.reverse();
    }

    return compareArrays;
})();

ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);
(function () {
    // Objective:
    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,
    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node
    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node
    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we
    //   previously mapped - retain those nodes, and just insert/delete other ones

    // "callbackAfterAddingNodes" will be invoked after any "mapping"-generated nodes are inserted into the container node
    // You can use this, for example, to activate bindings on those nodes.

    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {
        // Map this array value inside a dependentObservable so we re-map when any dependency changes
        var mappedNodes = [];
        var dependentObservable = ko.dependentObservable(function() {
            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];

            // On subsequent evaluations, just replace the previously-inserted DOM nodes
            if (mappedNodes.length > 0) {
                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);
                if (callbackAfterAddingNodes)
                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);
            }

            // Replace the contents of the mappedNodes array, thereby updating the record
            // of which nodes would be deleted if valueToMap was itself later removed
            mappedNodes.length = 0;
            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);
        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });
        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };
    }

    var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),
        deletedItemDummyValue = ko.utils.domData.nextKey();

    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {
        // Compare the provided array against the previous one
        array = array || [];
        options = options || {};
        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;
        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];
        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });
        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);

        // Build the new mapping result
        var newMappingResult = [];
        var lastMappingResultIndex = 0;
        var newMappingResultIndex = 0;

        var nodesToDelete = [];
        var itemsToProcess = [];
        var itemsForBeforeRemoveCallbacks = [];
        var itemsForMoveCallbacks = [];
        var itemsForAfterAddCallbacks = [];
        var mapData;

        function itemMovedOrRetained(editScriptIndex, oldPosition) {
            mapData = lastMappingResult[oldPosition];
            if (newMappingResultIndex !== oldPosition)
                itemsForMoveCallbacks[editScriptIndex] = mapData;
            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray
            mapData.indexObservable(newMappingResultIndex++);
            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);
            newMappingResult.push(mapData);
            itemsToProcess.push(mapData);
        }

        function callCallback(callback, items) {
            if (callback) {
                for (var i = 0, n = items.length; i < n; i++) {
                    if (items[i]) {
                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {
                            callback(node, i, items[i].arrayEntry);
                        });
                    }
                }
            }
        }

        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {
            movedIndex = editScriptItem['moved'];
            switch (editScriptItem['status']) {
                case "deleted":
                    if (movedIndex === undefined) {
                        mapData = lastMappingResult[lastMappingResultIndex];

                        // Stop tracking changes to the mapping for these nodes
                        if (mapData.dependentObservable) {
                            mapData.dependentObservable.dispose();
                            mapData.dependentObservable = undefined;
                        }

                        // Queue these nodes for later removal
                        if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {
                            if (options['beforeRemove']) {
                                newMappingResult.push(mapData);
                                itemsToProcess.push(mapData);
                                if (mapData.arrayEntry === deletedItemDummyValue) {
                                    mapData = null;
                                } else {
                                    itemsForBeforeRemoveCallbacks[i] = mapData;
                                }
                            }
                            if (mapData) {
                                nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);
                            }
                        }
                    }
                    lastMappingResultIndex++;
                    break;

                case "retained":
                    itemMovedOrRetained(i, lastMappingResultIndex++);
                    break;

                case "added":
                    if (movedIndex !== undefined) {
                        itemMovedOrRetained(i, movedIndex);
                    } else {
                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };
                        newMappingResult.push(mapData);
                        itemsToProcess.push(mapData);
                        if (!isFirstExecution)
                            itemsForAfterAddCallbacks[i] = mapData;
                    }
                    break;
            }
        }

        // Store a copy of the array items we just considered so we can difference it next time
        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);

        // Call beforeMove first before any changes have been made to the DOM
        callCallback(options['beforeMove'], itemsForMoveCallbacks);

        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)
        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);

        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)
        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {
            // Get nodes for newly added items
            if (!mapData.mappedNodes)
                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));

            // Put nodes in the right place if they aren't there already
            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {
                if (node !== nextNode)
                    ko.virtualElements.insertAfter(domNode, node, lastNode);
            }

            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)
            if (!mapData.initialized && callbackAfterAddingNodes) {
                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);
                mapData.initialized = true;
            }
        }

        // If there's a beforeRemove callback, call it after reordering.
        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using
        // some sort of animation, which is why we first reorder the nodes that will be removed. If the
        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.
        // Perhaps we'll make that change in the future if this scenario becomes more common.
        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);

        // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item
        // as already "removed" so we won't call beforeRemove for it again, and it ensures that the item won't match up
        // with an actual item in the array and appear as "retained" or "moved".
        for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {
            if (itemsForBeforeRemoveCallbacks[i]) {
                itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;
            }
        }

        // Finally call afterMove and afterAdd callbacks
        callCallback(options['afterMove'], itemsForMoveCallbacks);
        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);
    }
})();

ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);
ko.nativeTemplateEngine = function () {
    this['allowTemplateRewriting'] = false;
}

ko.nativeTemplateEngine.prototype = new ko.templateEngine();
ko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;
ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {
    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly
        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,
        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;

    if (templateNodes) {
        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);
    } else {
        var templateText = templateSource['text']();
        return ko.utils.parseHtmlFragment(templateText, templateDocument);
    }
};

ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();
ko.setTemplateEngine(ko.nativeTemplateEngine.instance);

ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);
(function() {
    ko.jqueryTmplTemplateEngine = function () {
        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl
        // doesn't expose a version number, so we have to infer it.
        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,
        // which KO internally refers to as version "2", so older versions are no longer detected.
        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {
            if (!jQueryInstance || !(jQueryInstance['tmpl']))
                return 0;
            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.
            try {
                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {
                    // Since 1.0.0pre, custom tags should append markup to an array called "__"
                    return 2; // Final version of jquery.tmpl
                }
            } catch(ex) { /* Apparently not the version we were looking for */ }

            return 1; // Any older version that we don't support
        })();

        function ensureHasReferencedJQueryTemplates() {
            if (jQueryTmplVersion < 2)
                throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");
        }

        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {
            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);
        }

        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {
            templateDocument = templateDocument || document;
            options = options || {};
            ensureHasReferencedJQueryTemplates();

            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)
            var precompiled = templateSource['data']('precompiled');
            if (!precompiled) {
                var templateText = templateSource['text']() || "";
                // Wrap in "with($whatever.koBindingContext) { ... }"
                templateText = "{{ko_with $item.koBindingContext}}" + templateText + "{{/ko_with}}";

                precompiled = jQueryInstance['template'](null, templateText);
                templateSource['data']('precompiled', precompiled);
            }

            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays
            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);

            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);
            resultNodes['appendTo'](templateDocument.createElement("div")); // Using "appendTo" forces jQuery/jQuery.tmpl to perform necessary cleanup work

            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders
            return resultNodes;
        };

        this['createJavaScriptEvaluatorBlock'] = function(script) {
            return "{{ko_code ((function() { return " + script + " })()) }}";
        };

        this['addTemplate'] = function(templateName, templateMarkup) {
            document.write("<script type='text/html' id='" + templateName + "'>" + templateMarkup + "<" + "/script>");
        };

        if (jQueryTmplVersion > 0) {
            jQueryInstance['tmpl']['tag']['ko_code'] = {
                open: "__.push($1 || '');"
            };
            jQueryInstance['tmpl']['tag']['ko_with'] = {
                open: "with($1) {",
                close: "} "
            };
        }
    };

    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();
    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;

    // Use this one by default *only if jquery.tmpl is referenced*
    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();
    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)
        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);

    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);
})();
}));
}());
})();


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_model_serializable__ = __webpack_require__(3);


class Action extends __WEBPACK_IMPORTED_MODULE_0_common_model_serializable__["a" /* default */] {

    constructor(definition) {
        super();
    }

    static execute(state, args) {
        const action = new this(args);
        action.execute(state);
    }

    execute(state) {
        this.doExecute(state);
        state.actionHistory.addAction(this);
    }

    doUndo() {}

    doExecute() {}

    summary(state) {
        return '';
    }

    confirmation(state) {
        return '';
    }

    details(state) {
        return [];
    }

    instructions(state) {
        return [this.summary(state)];
    }

}

/* harmony default export */ __webpack_exports__["a"] = (Action);

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);



const classRegistry = {};

class Serializable {
    serialize() {
        return JSON.stringify(this);
    }

    getTypeName() {
        return this.constructor.name;
    }

    toJSON() {
        const plainObject = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.toPlainObject(this);
        plainObject.className = this.getTypeName();
        __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.each(plainObject, (value, key) => {
            if (__WEBPACK_IMPORTED_MODULE_1_knockout___default.a.isObservable(value) && !__WEBPACK_IMPORTED_MODULE_1_knockout___default.a.isComputed(value)) {
                plainObject[key] = value();
            }
        });
        return plainObject;
    }

    clone() {
        return Serializable.deserialize(this.serialize());
    }

    static deserialize(definition) {
        let objDefinition = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isString(definition) ? JSON.parse(definition) : definition;
        let objClass = this;

        if (!__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isPlainObject(objDefinition)) {
            return objDefinition;
        }

        objDefinition = this.deserializeCollection(objDefinition);

        if (this.prototype.constructor.name === 'Serializable') {
            objClass = classRegistry[objDefinition.className];
        }

        if (!objClass) {
            throw Error('Attempt to deserialize unknown Serializable ' + objDefinition.className);
        }
        return new objClass(objDefinition);
    }

    static registerClass() {
        classRegistry[this.prototype.constructor.name] = this;
    }

    static deserializeCollection(obj) {
        __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.each(obj, (value, keyOrIndex) => {
            if (__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isPlainObject(value) && value.className) {
                obj[keyOrIndex] = this.deserialize(value);
            } else if (__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isArray(value) || __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isPlainObject(value)) {
                this.deserializeCollection(value);
            }
        });

        return obj;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Serializable);

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);


const CurrentGame = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();

/* harmony default export */ __webpack_exports__["a"] = (CurrentGame);

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

const CompanyIDs = {
    GRAND_TRUNK: 'gt',
    NEW_YORK_CENTRAL: 'nyc',
    ERIE: 'erie',
    PENNSYLVANIA: 'prr',
    BALTIMORE_OHIO: 'bando',
    ILLINOIS_CENTRAL: 'ic',
    CHESAPEAKE_OHIO: 'cando',
    MICHIGAN_SOUTHERN: 'ms',
    BIG_4: 'big4',
    CHICAGO_WESTERN_INDIANA: 'cwi',
    OHIO_INDIANA: 'oandi',
    MEAT_PACKING_COMPANY: 'meat',
    STEAMBOAT_COMPANY: 'boat',
    LAKE_SHORE_LINE: 'lsl',
    MICHIGAN_CENTRAL: 'mc',
    MAIL_CONTRACT: 'mail',
    TUNNEL_BLASTING_COMPANY: 'tbc'
};

/* harmony default export */ __webpack_exports__["a"] = (CompanyIDs);

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);


const PriceList = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 112, 124, 137, 150, 165, 180, 195, 212, 230, 250, 270, 295, 320, 345, 375, 405, 475, 510, 550];

class Prices {

    constructor(definition) {}

    static getPriceList() {
        return PriceList;
    }

    static price(priceIndex) {
        return PriceList[priceIndex];
    }

    static leftPrice(priceIndex, count) {
        return PriceList[this.leftIndex(priceIndex, count)];
    }

    static leftIndex(priceIndex, count) {
        if (!__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isNumber(count)) {
            count = 1;
        }
        return Math.max(0, priceIndex - count);
    }

    static rightPrice(priceIndex, count) {
        return PriceList[this.rightIndex(priceIndex, count)];
    }

    static rightIndex(priceIndex, count) {
        if (!__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isNumber(count)) {
            count = 1;
        }
        return Math.min(PriceList.length - 1, priceIndex + count);
    }

}

/* harmony default export */ __webpack_exports__["a"] = (Prices);

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_events__);


class Events extends __WEBPACK_IMPORTED_MODULE_0_events___default.a {

    off(type, listener) {
        this.removeListener(type, listener);
    }

}

/* harmony default export */ __webpack_exports__["a"] = (new Events());

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const PhaseIDs = {
    PHASE_I: 'I',
    PHASE_II: 'II',
    PHASE_III: 'III',
    PHASE_IV: 'IV'
};

/* harmony default export */ __webpack_exports__["a"] = (PhaseIDs);

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

const CompanyTypes = {
    PRIVATE: 'private',
    PUBLIC: 'public',
    INDEPENDANT: 'independant'
};

/* harmony default export */ __webpack_exports__["a"] = (CompanyTypes);

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Created by Samuel on 6/4/2016.
 * Simple wrapper functions to produce shorter UUIDs for cookies, maybe everything?
 */
module.exports = (function(){

    var anyBase = __webpack_require__(34);
    var uuidV4 = __webpack_require__(160);

    var flickrBase58 = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
    var cookieBase90 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~";

    /**
     * Takes a UUID, strips the dashes, and translates.
     * @param {string} longId
     * @param {function(string)} translator
     * @returns {string}
     */
    function shortenUUID (longId, translator) {
        return translator(longId.toLowerCase().replace(/-/g,''));
    }

    /**
     * Translate back to hex and turn back into UUID format, with dashes
     * @param {string} shortId
     * @param {function(string)} translator
     * @returns {string}
     */
    function enlargeUUID(shortId, translator) {
        var uu1 = translator(shortId);
        var leftPad = "";
        var m;

        // Pad out UUIDs beginning with zeros (any number shorter than 32 characters of hex)
        for (var i = 0, len = 32-uu1.length; i < len; ++i) {
            leftPad += "0";
        }

        // Join the zero padding and the UUID and then slice it up with match
        m = (leftPad + uu1).match(/(\w{8})(\w{4})(\w{4})(\w{4})(\w{12})/);

        // Accumulate the matches and join them.
        return [m[1], m[2], m[3], m[4], m[5]].join('-');
    }

    /**
     * @constructor
     * @param {string?} toAlphabet - Defaults to flickrBase58 if not provided
     * @returns {{new: (function()),
     *  uuid: (function()),
     *  fromUUID: (function(string)),
     *  toUUID: (function(string)),
     *  alphabet: (string)}}
     */
    function MakeConvertor(toAlphabet) {

        // Default to Flickr 58
        var useAlphabet = toAlphabet || flickrBase58;

        // UUIDs are in hex, so we translate to and from.
        var fromHex = anyBase(anyBase.HEX, useAlphabet);
        var toHex = anyBase(useAlphabet, anyBase.HEX);

        return {
            new: function() { return shortenUUID(uuidV4(), fromHex); },
            uuid: uuidV4,
            fromUUID: function(uuid) { return shortenUUID(uuid, fromHex); },
            toUUID: function(shortUuid) { return enlargeUUID(shortUuid, toHex); },
            alphabet: useAlphabet
        };
    }

    // Expose the constants for other purposes.
    MakeConvertor.constants = {
        flickrBase58: flickrBase58,
        cookieBase90: cookieBase90
    };

    // Expose the generic v4 UUID generator for convenience
    MakeConvertor.uuid = uuidV4;

    return MakeConvertor;

}());


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__ = __webpack_require__(12);


const TrainDefinitions = {
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_2]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_2,
        name: '2',
        stops: 2,
        payingStops: 2,
        cost: 80
    },
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_3_5]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_3_5,
        name: '3/5',
        stops: 5,
        payingStops: 3,
        cost: 160
    },
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_4]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_4,
        name: '4',
        stops: 4,
        payingStops: 4,
        cost: 180
    },
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_4_6]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_4_6,
        name: '4/6',
        stops: 6,
        payingStops: 4,
        cost: 450
    },
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_5]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_5,
        name: '5',
        stops: 5,
        payingStops: 5,
        cost: 500
    },
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_6]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_6,
        name: '6',
        stops: 6,
        payingStops: 6,
        cost: 800
    },
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_7_8]: {
        id: __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_7_8,
        name: '7/8',
        stops: 8,
        payingStops: 7,
        cost: 900
    }
};

/* harmony default export */ __webpack_exports__["a"] = (TrainDefinitions);

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const TrainIDs = {
    TRAIN_2: '2t',
    TRAIN_3_5: '3_5t',
    TRAIN_4: '4t',
    TRAIN_4_6: '4_6t',
    TRAIN_5: '5t',
    TRAIN_6: '6t',
    TRAIN_7_8: '7_8t'
};

/* harmony default export */ __webpack_exports__["a"] = (TrainIDs);

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_game_privateDraft__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_game_stockRound__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_actions_setPriorityDeal__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_actions_setOperatingOrder__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_actions_adjustStockPrices__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_actions_privateIncome__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_lodash__);












class Sequence {

    static undoLastAction() {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn().undoLast();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().saveLocalState();
        __WEBPACK_IMPORTED_MODULE_8_common_util_events__["a" /* default */].emit('undo');
    }

    static interruptTurn(interruptionType) {
        __WEBPACK_IMPORTED_MODULE_8_common_util_events__["a" /* default */].emit('turnEnd');
        const game = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])();
        const state = game.state();
        state.interruptionType(interruptionType);
        state.interruptedCompanyId(state.currentCompanyId());

        //commit to server

        // if local
        state.actionHistory.commit();
        this.nextOutOfTurn();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().saveLocalState();
    }

    static finishTurn() {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state();
        if (state.interruptionType()) {
            state.turnHistory.currentTurn().commitActionGroup();

            //commit to server
            state.actionHistory.commit();
            this.nextOutOfTurn();
        } else {
            state.turnHistory.commitTurn();
            __WEBPACK_IMPORTED_MODULE_8_common_util_events__["a" /* default */].emit('turnEnd');

            //commit to server

            // if local
            state.actionHistory.commit();
            if (Sequence.isGameOverDueToBankruptcy()) {
                this.endGame();
            } else {
                this.nextRoundPhaseAndTurn();
            }
        }
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().saveLocalState();
    }

    static endGame() {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state();
        state.roundHistory.commitRound();
        state.winner(__WEBPACK_IMPORTED_MODULE_10_lodash___default.a.maxBy(state.players(), player => player.getNetWorth()).id);
    }

    static nextOutOfTurn() {
        const game = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])();
        const state = game.state();

        // Train limit checks
        const companyWithTooManyTrains = __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.find(state.publicCompanies, company => {
            return company.hasTooManyTrains();
        });

        if (companyWithTooManyTrains) {
            state.turnHistory.currentTurn().startActionGroup(state.interruptionType());
            state.currentCompanyId(companyWithTooManyTrains.id);
        } else {
            state.currentCompanyId(state.interruptedCompanyId());
            state.interruptionType(null);
            state.interruptedCompanyId(null);
        }

        const presidentPlayerId = state.currentCompany().president();
        const nextPresidentIndex = __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.findIndex(state.players(), player => player.id === presidentPlayerId);
        state.currentPlayerIndex(nextPresidentIndex);
    }

    static nextRoundPhaseAndTurn() {
        const game = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])();
        const state = game.state();

        const currentRound = state.roundHistory.getCurrentRound();

        if (!currentRound) {
            state.roundHistory.startRound(__WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].PRIVATE_DRAFT, 1);
            state.currentPlayerIndex(state.players().length - 1);
            game.privateDraft(new __WEBPACK_IMPORTED_MODULE_1_1846_game_privateDraft__["a" /* default */]());
        } else if (currentRound.roundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].PRIVATE_DRAFT) {
            if (state.undraftedPrivateIds().length > 0) {
                state.currentPlayerIndex(Sequence.nextPlayerIndex(null, true));
                game.privateDraft(new __WEBPACK_IMPORTED_MODULE_1_1846_game_privateDraft__["a" /* default */]());
            } else {
                Sequence.onPrivateDraftEnd(game);
            }
        } else if (currentRound.roundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].STOCK_ROUND) {
            const nextPlayer = Sequence.nextPlayerIndex();
            if (state.firstPassIndex() === nextPlayer) {
                Sequence.onStockRoundEnd(game);
            } else {
                state.currentPlayerIndex(nextPlayer);
            }
        } else if (currentRound.roundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_1 || currentRound.roundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_2) {
            const nextCompanyIndex = Sequence.getNextCompanyIndex(state);
            if (nextCompanyIndex < state.operatingOrder().length) {
                Sequence.setNextCompanyAndPlayer(state, nextCompanyIndex);
            } else {
                Sequence.onOperatingRoundEnd(game, currentRound.roundType);
            }
        }
        state.turnHistory.startTurn({ state });
    }

    static onPrivateDraftEnd(game) {
        const state = game.state();
        state.roundHistory.commitRound();
        state.currentPlayerIndex(0);
        game.privateDraft(null);
        game.stockRound(new __WEBPACK_IMPORTED_MODULE_2_1846_game_stockRound__["a" /* default */]());
        state.roundHistory.startRound(__WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].STOCK_ROUND, 1);
        game.showOwnership();
    }

    static onStockRoundEnd(game) {
        const state = game.state();
        new __WEBPACK_IMPORTED_MODULE_3_1846_actions_setPriorityDeal__["a" /* default */]({ playerIndex: state.firstPassIndex() }).execute(state);
        new __WEBPACK_IMPORTED_MODULE_5_1846_actions_adjustStockPrices__["a" /* default */]({}).execute(state);
        const currentRoundNumber = state.roundNumber();
        state.roundHistory.commitRound();

        game.stockRound(null);
        state.roundHistory.startRound(__WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_1);
        new __WEBPACK_IMPORTED_MODULE_4_1846_actions_setOperatingOrder__["a" /* default */]({ operatingOrder: state.stockBoard.getOperatingOrder(currentRoundNumber === 1) }).execute(state);
        new __WEBPACK_IMPORTED_MODULE_6_1846_actions_privateIncome__["a" /* default */]({}).execute(state);
        if (!Sequence.doSteamboat(state)) {
            Sequence.setNextCompanyAndPlayer(state, 0);
        }
        game.showMap();
    }

    static onOperatingRoundEnd(game, currentRoundType) {
        const state = game.state();
        __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.each(state.publicCompanies, company => {
            __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.each(company.trains(), train => {
                train.purchased = false;
            });
        });

        if (currentRoundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_1) {
            state.roundHistory.commitRound();
            state.roundHistory.startRound(__WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_2);
            new __WEBPACK_IMPORTED_MODULE_4_1846_actions_setOperatingOrder__["a" /* default */]({ operatingOrder: state.stockBoard.getOperatingOrder() }).execute(state);
            new __WEBPACK_IMPORTED_MODULE_6_1846_actions_privateIncome__["a" /* default */]({}).execute(state);
            if (!Sequence.doSteamboat(state)) {
                Sequence.setNextCompanyAndPlayer(state, 0);
            }
        } else {
            if (Sequence.isGameOverDueToBankBreaking()) {
                this.endGame();
            } else {
                const currentRoundNumber = state.roundNumber();
                state.roundHistory.commitRound();
                state.currentCompanyId(null);
                state.currentPlayerIndex(state.priorityDealIndex());
                state.roundHistory.startRound(__WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].STOCK_ROUND, currentRoundNumber + 1);
                state.firstPassIndex(null);
                game.stockRound(new __WEBPACK_IMPORTED_MODULE_2_1846_game_stockRound__["a" /* default */]());
                game.showOwnership();
            }
        }
    }

    static getNextCompanyIndex(state) {
        // In case of bankruptcy causing change of presidency but still no train...
        const company = state.currentCompany();
        if (company && company.president() && company.getNonPhasedOutTrains().length === 0) {
            return __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.indexOf(state.operatingOrder(), state.currentCompanyId());
        }

        return company ? __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.indexOf(state.operatingOrder(), state.currentCompanyId()) + 1 : 0;
    }

    static doSteamboat(state) {
        const steamboatOwner = Sequence.getSteamboatOwner();
        if (steamboatOwner) {
            const steamboatOwnerIndex = __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.findIndex(state.players(), player => player.id === steamboatOwner.id);
            state.currentCompanyId(null);
            state.currentPlayerIndex(steamboatOwnerIndex);
            return true;
        }
        return false;
    }

    static setNextCompanyAndPlayer(state, companyIndex) {
        state.currentCompanyId(state.operatingOrder()[companyIndex]);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().selectedCompany(state.currentCompanyId());
        let presidentPlayerId = state.getCompany(state.currentCompanyId()).president();
        if (!presidentPlayerId) {
            presidentPlayerId = __WEBPACK_IMPORTED_MODULE_10_lodash___default()(state.players()).reject(player => player.bankrupt()).sample().id;
        }
        const nextPresidentIndex = __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.findIndex(state.players(), player => player.id === presidentPlayerId);
        state.currentPlayerIndex(nextPresidentIndex);
    }

    static nextPlayerIndex(fromIndex, reverse) {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state();
        if (!__WEBPACK_IMPORTED_MODULE_10_lodash___default.a.isNumber(fromIndex)) {
            fromIndex = state.currentPlayerIndex();
        }

        let nextPlayerIndex = 0;
        do {
            nextPlayerIndex = fromIndex + (reverse ? -1 : 1);
            if (nextPlayerIndex < 0) {
                nextPlayerIndex = state.players().length - 1;
            } else if (nextPlayerIndex === state.players().length) {
                nextPlayerIndex = 0;
            }
            fromIndex = nextPlayerIndex;
        } while (state.players()[nextPlayerIndex].bankrupt());

        return nextPlayerIndex;
    }

    static restore() {

        const game = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])();
        const state = game.state();
        const currentRound = state.roundHistory.getCurrentRound();
        if (!currentRound) {
            return;
        }
        if (currentRound.roundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].PRIVATE_DRAFT) {
            game.privateDraft(new __WEBPACK_IMPORTED_MODULE_1_1846_game_privateDraft__["a" /* default */]());
        } else if (currentRound.roundType === __WEBPACK_IMPORTED_MODULE_0_1846_config_roundTypes__["a" /* default */].STOCK_ROUND) {
            game.stockRound(new __WEBPACK_IMPORTED_MODULE_2_1846_game_stockRound__["a" /* default */]());
            game.showOwnership();
        } else {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().selectedCompany(state.currentCompanyId());
        }
    }

    static getSteamboatOwner() {
        return __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.find(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state().players(), player => {
            return player.hasPrivate(__WEBPACK_IMPORTED_MODULE_9_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY);
        });
    }

    static isGameOverDueToBankBreaking() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state().bank.cash() <= 0;
    }

    static isGameOverDueToBankruptcy() {
        return __WEBPACK_IMPORTED_MODULE_10_lodash___default.a.filter(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_common_game_currentGame__["a" /* default */])().state().players(), player => !player.bankrupt()).length === 1;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Sequence);

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class ValidationError {
    constructor(message) {
        this.name = 'ValidationError';
        this.message = message;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (ValidationError);

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

const MapTileIDs = {
    BLANK: 'blank',
    CITY: 'city',
    CHICAGO: 'chicago',
    CHICAGO_CONNECTIONS: 'chicago_connections',
    CENTRALIA: 'centralia',
    DETROIT: 'detroit',
    ERIE: 'erie',
    FORT_WAYNE: 'fort_wayne',
    CLEVELAND: 'cleveland',
    WHEELING: 'wheeling',
    CINCINNATI: 'cincinnati',
    SALAMANCA: 'salamanca',
    HOMEWOOD: 'homewood',
    HUNTINGTON: 'huntington',
    INDIANAPOLIS: 'indianapolis',
    CAIRO: 'cairo',
    HOLLAND: 'holland',
    ST_LOUIS: 'stlouis',
    SARNIA: 'sarnia',
    WINDSOR: 'windsor',
    BUFFALO: 'buffalo',
    BINGHAMTON: 'binghamton',
    PITTSBURGH: 'pittsburgh',
    CUMBERLAND: 'cumberland',
    PORT_HURON: 'porthuron',
    LOUISVILLE: 'louisville',
    CHARLESTON: 'charleston',
    C7: 'c7',
    A15: 'a15'
};

/* harmony default export */ __webpack_exports__["a"] = (MapTileIDs);

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const OffBoardIds = {
    CHICAGO_CONNECTIONS: 'chicago_connections',
    ST_LOUIS: 'st_louis',
    HOLLAND: 'holland',
    SARNIA: 'sarnia',
    WINDSOR: 'windsor',
    LOUISVILLE: 'louisville',
    CHARLESTON: 'charleston',
    BUFFALO: 'buffalo',
    BINGHAMTON: 'binghamton',
    PITTSBURGH: 'pittsburgh',
    CUMBERLAND: 'cumberland'
};

/* harmony default export */ __webpack_exports__["a"] = (OffBoardIds);

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const RoundTypes = {
    PRIVATE_DRAFT: 'privates',
    STOCK_ROUND: 'sr',
    OPERATING_ROUND_1: 'or1',
    OPERATING_ROUND_2: 'or2'
};

/* harmony default export */ __webpack_exports__["a"] = (RoundTypes);

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_map_tile__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_common_game_validationError__ = __webpack_require__(14);








const TileDefinitions = {
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO_CONNECTIONS]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO_CONNECTIONS,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'chicagoConnections',
        connections: [[-1, 0]],
        map: true,
        direction: 'w',
        ewBonus: 50,
        revenue: [20, 20, 40, 40]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ST_LOUIS]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ST_LOUIS,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'stLouis',
        connections: [[-1, 0], [-1, 1]],
        map: true,
        direction: 'w',
        ewBonus: 20,
        revenue: [50, 50, 70, 70]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HOLLAND]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HOLLAND,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'holland',
        connections: [[-1, 0]],
        revenue: [40, 40, 10, 10]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].SARNIA]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].SARNIA,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'sarnia',
        connections: [[-1, 0]],
        direction: 'e',
        ewBonus: 20,
        revenue: [30, 30, 50, 50]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WINDSOR]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WINDSOR,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'windsor',
        connections: [[-1, 0]],
        direction: 'e',
        ewBonus: 30,
        revenue: [40, 40, 60, 60]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].LOUISVILLE]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].LOUISVILLE,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'louisville',
        connections: [[-1, 0], [-1, 1]],
        revenue: [50, 50, 70, 70]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHARLESTON]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHARLESTON,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'charleston',
        connections: [[-1, 0]],
        direction: 'e',
        ewBonus: 20,
        revenue: [20, 20, 50, 50]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BUFFALO]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BUFFALO,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'buffalo',
        connections: [[-1, 0], [-1, 1]],
        direction: 'e',
        ewBonus: 30,
        revenue: [30, 30, 60, 60]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BINGHAMTON]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BINGHAMTON,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'binghamton',
        connections: [[-1, 0]],
        direction: 'e',
        ewBonus: 30,
        revenue: [20, 20, 50, 50]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].PITTSBURGH]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].PITTSBURGH,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'pittsburgh',
        connections: [[-1, 0], [-1, 1], [-1, 2]],
        direction: 'e',
        ewBonus: 20,
        revenue: [30, 30, 70, 70]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CUMBERLAND]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CUMBERLAND,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'cumberland',
        connections: [[-1, 0]],
        direction: 'e',
        ewBonus: 30,
        revenue: [20, 20, 40, 40]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BLANK]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BLANK,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CAIRO]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CAIRO,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        revenue: 20,
        template: 'cairo',
        connections: [[0, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CITY]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CITY,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 10,
        template: 'mapChicago',
        connections: [[0, 7], [1, 8], [2, 9], [3, 10]],
        cities: {
            7: { id: 7, maxTokens: 1 },
            8: { id: 8, maxTokens: 1 },
            9: { id: 9, maxTokens: 1 },
            10: { id: 10, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CENTRALIA]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CENTRALIA,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        revenue: 10,
        template: 'mapDoubleCity',
        connections: [[0, 7], [1, 7], [3, 7], [4, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].PORT_HURON]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].PORT_HURON,
        map: true,
        template: 'portHuron',
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },

    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].DETROIT]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].DETROIT,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 40,
        template: 'mapDoubleCity',
        connections: [[0, 7], [4, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ERIE]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ERIE,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 10,
        template: 'mapDoubleCity',
        connections: [[0, 7], [3, 7], [4, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CLEVELAND]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CLEVELAND,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CINCINNATI]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CINCINNATI,
        map: true,
        template: 'cincinnati',
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].FORT_WAYNE]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].FORT_WAYNE,
        map: true,
        template: 'fortWayne',
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].INDIANAPOLIS]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].INDIANAPOLIS,
        map: true,
        template: 'indianapolis',
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WHEELING]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WHEELING,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 10,
        template: 'wheeling',
        connections: [[2, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].SALAMANCA]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].SALAMANCA,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        revenue: 10,
        template: 'salamanca',
        connections: [[1, 7], [4, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HOMEWOOD]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HOMEWOOD,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'homewood',
        revenue: 10,
        connections: [[1, 7], [2, 7], [4, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HUNTINGTON]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HUNTINGTON,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        revenue: 20,
        template: 'huntington',
        connections: [[0, 7], [1, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].C7]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].C7,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'mapCommon',
        connections: [[2, 3]]
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].A15]: {
        id: __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].A15,
        map: true,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].INVISIBLE,
        template: 'mapCommon',
        connections: [[2, 3]]
    },
    5: {
        id: 5,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 20,
        template: 'city',
        maxTokens: 1,
        connections: [[2, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    6: {
        id: 6,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 20,
        template: 'city',
        maxTokens: 1,
        connections: [[1, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    7: {
        id: 7,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        connections: [[2, 3]]
    },
    8: {
        id: 8,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        connections: [[1, 3]]
    },
    9: {
        id: 9,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        connections: [[0, 3]]
    },
    14: {
        id: 14,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 30,
        template: 'city',
        maxTokens: 2,
        connections: [[0, 7], [2, 7], [3, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    15: {
        id: 15,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 30,
        template: 'city',
        maxTokens: 2,
        connections: [[0, 7], [1, 7], [2, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    16: {
        id: 16,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[1, 3], [2, 4]]
    },
    17: {
        id: 17,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 4], [1, 3]]
    },
    18: {
        id: 18,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [1, 2]]
    },
    19: {
        id: 19,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [2, 4]]
    },
    20: {
        id: 20,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [2, 5]]
    },
    21: {
        id: 21,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 1], [3, 5]]
    },
    22: {
        id: 22,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 5], [1, 3]]
    },
    23: {
        id: 23,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [1, 3]]
    },
    24: {
        id: 24,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [3, 5]]
    },
    25: {
        id: 25,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[1, 3], [3, 5]]
    },
    26: {
        id: 26,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [2, 3]]
    },
    27: {
        id: 27,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[0, 3], [0, 1]]
    },
    28: {
        id: 28,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[1, 3], [2, 3]]
    },
    29: {
        id: 29,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[1, 3], [1, 2]]
    },
    30: {
        id: 30,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[1, 3], [3, 4]]
    },
    31: {
        id: 31,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        connections: [[2, 3], [3, 5]]
    },
    39: {
        id: 39,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[2, 4], [2, 3], [3, 4]]
    },
    40: {
        id: 40,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[1, 5], [1, 3], [3, 5]]
    },
    41: {
        id: 41,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 3], [0, 1], [1, 3]]
    },
    42: {
        id: 42,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 5], [0, 3], [3, 5]]
    },
    43: {
        id: 43,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 2], [0, 3], [1, 3], [1, 2]]
    },
    44: {
        id: 44,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 3], [0, 5], [2, 3], [2, 5]]
    },
    45: {
        id: 45,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 3], [0, 4], [2, 3], [2, 4]]
    },
    46: {
        id: 46,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 2], [0, 3], [2, 4], [3, 4]]
    },
    47: {
        id: 47,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 2], [0, 3], [2, 5], [3, 5]]
    },
    51: {
        id: 51,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GRAY,
        revenue: 50,
        template: 'city',
        maxTokens: 2,
        connections: [[0, 7], [1, 7], [3, 7], [4, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    57: {
        id: 57,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 20,
        template: 'city',
        maxTokens: 1,
        connections: [[0, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    70: {
        id: 70,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        connections: [[0, 1], [0, 2], [1, 3], [2, 3]]
    },
    290: {
        id: 290,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GRAY,
        revenue: 70,
        template: 'z',
        maxTokens: 3,
        connections: [[0, 7], [1, 7], [3, 7], [4, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 3 }
        }
    },
    291: {
        id: 291,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 40,
        template: 'z',
        maxTokens: 1,
        connections: [[2, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    292: {
        id: 292,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 40,
        template: 'z',
        maxTokens: 1,
        connections: [[1, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    293: {
        id: 293,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW,
        revenue: 40,
        template: 'z',
        maxTokens: 1,
        connections: [[0, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 1 }
        }
    },
    294: {
        id: 294,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 50,
        template: 'z',
        maxTokens: 2,
        connections: [[0, 7], [2, 7], [3, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    295: {
        id: 295,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 50,
        template: 'z',
        maxTokens: 2,
        connections: [[0, 7], [1, 7], [2, 7], [3, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    296: {
        id: 296,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 50,
        template: 'z',
        maxTokens: 2,
        connections: [[0, 7], [2, 7], [3, 7], [4, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    297: {
        id: 297,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        revenue: 60,
        template: 'z',
        maxTokens: 3,
        connections: [[0, 7], [1, 7], [3, 7], [4, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 3 }
        }
    },
    298: {
        id: 298,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 40,
        template: 'chicago',
        connections: [[0, 7], [1, 7], [0, 8], [2, 8], [0, 9], [3, 9], [0, 10], [4, 10]],
        cities: {
            7: { id: 7, maxTokens: 1 },
            8: { id: 8, maxTokens: 1 },
            9: { id: 9, maxTokens: 1 },
            10: { id: 10, maxTokens: 1 }
        }
    },
    299: {
        id: 299,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        revenue: 70,
        template: 'chicago',
        connections: [[0, 7], [1, 7], [0, 8], [2, 8], [0, 9], [3, 9], [0, 10], [4, 10]],
        cities: {
            7: { id: 7, maxTokens: 1 },
            8: { id: 8, maxTokens: 1 },
            9: { id: 9, maxTokens: 1 },
            10: { id: 10, maxTokens: 1 }
        }
    },
    300: {
        id: 300,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GRAY,
        revenue: 90,
        template: 'chicago',
        connections: [[0, 7], [1, 7], [0, 8], [2, 8], [0, 9], [3, 9], [0, 10], [4, 10]],
        cities: {
            7: { id: 7, maxTokens: 1 },
            8: { id: 8, maxTokens: 1 },
            9: { id: 9, maxTokens: 1 },
            10: { id: 10, maxTokens: 1 }
        }
    },
    611: {
        id: 611,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].BROWN,
        revenue: 40,
        template: 'city',
        maxTokens: 2,
        connections: [[0, 7], [1, 7], [3, 7], [4, 7], [5, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    },
    619: {
        id: 619,
        colorId: __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].GREEN,
        revenue: 30,
        template: 'city',
        maxTokens: 2,
        connections: [[0, 7], [2, 7], [3, 7], [4, 7]],
        cities: {
            7: { id: 7, maxTokens: 2 }
        }
    }
};

const Manifest = {
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO_CONNECTIONS]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ST_LOUIS]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HOLLAND]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].SARNIA]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WINDSOR]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].LOUISVILLE]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHARLESTON]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BUFFALO]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BINGHAMTON]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].PITTSBURGH]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CUMBERLAND]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].BLANK]: {
        upgrades: [7, 8, 9],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CAIRO]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CITY]: {
        upgrades: [5, 6, 57],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].PORT_HURON]: {
        upgrades: [5, 6, 57],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO]: {
        upgrades: [298],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CENTRALIA]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].DETROIT]: {
        upgrades: [294, 295],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ERIE]: {
        upgrades: [14, 619],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CLEVELAND]: {
        upgrades: [291, 292, 293],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].FORT_WAYNE]: {
        upgrades: [5, 6, 57],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].INDIANAPOLIS]: {
        upgrades: [5, 6, 57],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CINCINNATI]: {
        upgrades: [291, 292, 293],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WHEELING]: {
        upgrades: [14],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].SALAMANCA]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HOMEWOOD]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].HUNTINGTON]: {
        upgrades: []
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].C7]: {
        upgrades: [],
        count: -1
    },
    [__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].A15]: {
        upgrades: [],
        count: -1
    },
    5: {
        upgrades: [14, 15, 619],
        count: 3
    },
    6: {
        upgrades: [14, 15, 619],
        count: 4
    },
    7: {
        upgrades: [18, 21, 22, 26, 27, 28, 29, 30, 31],
        count: -1
    },
    8: {
        upgrades: [16, 17, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31],
        count: -1
    },
    9: {
        upgrades: [18, 19, 20, 23, 24, 26, 27],
        count: -1
    },
    14: {
        upgrades: [611],
        count: 4
    },
    15: {
        upgrades: [611],
        count: 5
    },
    16: {
        upgrades: [43, 70],
        count: 2
    },
    17: {
        upgrades: [47],
        count: 1
    },
    18: {
        upgrades: [43],
        count: 1
    },
    19: {

        upgrades: [45, 46],
        count: 2
    },
    20: {
        upgrades: [44, 47],
        count: 2
    },
    21: {
        upgrades: [46],
        count: 1
    },
    22: {
        upgrades: [45],
        count: 1
    },
    23: {
        upgrades: [41, 43, 45, 47],
        count: 4
    },
    24: {
        upgrades: [42, 43, 46, 47],
        count: 4
    },
    25: {
        upgrades: [40, 45, 46],
        count: 2
    },
    26: {
        upgrades: [42, 44, 45],
        count: 1
    },
    27: {
        upgrades: [41, 44, 46],
        count: 1
    },
    28: {
        upgrades: [39, 43, 46, 70],
        count: 1
    },
    29: {
        upgrades: [39, 43, 45, 70],
        count: 1
    },
    30: {
        upgrades: [42, 70],
        count: 1
    },
    31: {
        upgrades: [41, 70],
        count: 1
    },
    39: {
        count: 1
    },
    40: {
        count: 1
    },
    41: {
        count: 2
    },
    42: {
        count: 2
    },
    43: {
        count: 2
    },
    44: {
        count: 1
    },
    45: {
        count: 2
    },
    46: {
        count: 2
    },
    47: {
        count: 2
    },
    51: {
        count: 2
    },
    57: {
        upgrades: [14, 15, 619],
        count: 4
    },
    70: {
        count: 1
    },
    290: {
        count: 1
    },
    291: {
        upgrades: [294, 295, 296],
        count: 1
    },
    292: {
        upgrades: [294, 295, 296],
        count: 1
    },
    293: {
        upgrades: [294, 295, 296],
        count: 1
    },
    294: {
        upgrades: [297],
        count: 2
    },
    295: {
        upgrades: [297],
        count: 2
    },
    296: {
        upgrades: [297],
        count: 1
    },
    297: {
        upgrades: [290],
        count: 2
    },
    298: {
        upgrades: [299],
        count: 1
    },
    299: {
        upgrades: [300],
        count: 1
    },
    300: {
        count: 1
    },
    611: {
        upgrades: [51],
        count: 1
    },
    619: {
        upgrades: [611],
        count: 3
    }
};

class TileManifest extends __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        super();
        definition = definition || {};
        this.TileColorIDs = __WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */];

        this.availableTiles = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.observable(definition.availableTiles || __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.mapValues(Manifest, 'count'));
        this.displayTilesById = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default()(TileDefinitions).map(definition => TileManifest.createTile(definition.id)).keyBy('id').value();
        });
        this.tilesByColor = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default()(TileDefinitions).reject(tileDefinition => __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.indexOf([__WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].CHICAGO, __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].WHEELING, __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].DETROIT, __WEBPACK_IMPORTED_MODULE_4_1846_config_mapTileIds__["a" /* default */].ERIE], tileDefinition.id) >= 0).map(tileDefinition => {
                return {
                    id: tileDefinition.id,
                    tile: this.displayTilesById()[tileDefinition.id],
                    colorId: tileDefinition.colorId,
                    upgrades: Manifest[tileDefinition.id].upgrades,
                    remaining: this.availableTiles()[tileDefinition.id]
                };
            }).groupBy('colorId').value();
        });
        this.activeTileSet = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.observable(__WEBPACK_IMPORTED_MODULE_3_1846_config_tileColorIds__["a" /* default */].YELLOW);
        this.activeTiles = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.computed(() => {
            return this.tilesByColor()[this.activeTileSet()] || [];
        });

        this.popoverParams = {
            placement: 'right',
            content: '<div data-bind="template: { name: \'views/tileUpgradePopover\' }"></div>'
        };
    }

    toJSON() {
        const plainObject = super.toJSON();
        delete plainObject.popoverParams;
        delete plainObject.TileColorIDs;
        return plainObject;
    }

    setActiveTileSet(colorId) {
        this.activeTileSet(colorId);
    }

    getUpgradesForTile(id) {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default()(Manifest[id].upgrades || []).map(upgradeId => {
            return {
                tile: this.displayTilesById()[upgradeId],
                remaining: this.availableTiles()[upgradeId]
            };
        }).value();
    }

    getTile(id, replacedId) {
        const numAvailable = this.availableTiles()[id];
        if (numAvailable === 0) {
            throw new __WEBPACK_IMPORTED_MODULE_6_common_game_validationError__["a" /* default */]('No ' + id + ' tile available');
        } else if (numAvailable > 0) {
            this.availableTiles()[id] = numAvailable - 1;
        }

        if (replacedId) {
            const numReplacedAvailable = this.availableTiles()[replacedId];
            const isUnlimited = numReplacedAvailable === -1;
            if (!isUnlimited) {
                this.availableTiles()[replacedId] = numReplacedAvailable + 1;
            }
        }

        return TileManifest.createTile(id);
    }

    static getTileDefinition(id) {
        return TileDefinitions[id];
    }

    getTemplateName(id) {
        return TileManifest.getTileDefinition(id).template || 'common';
    }

    static createTile(id) {
        const definition = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.clone(TileDefinitions[id]);
        definition['upgrades'] = Manifest[id].upgrades;
        return new __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */](definition);
    }
}

TileManifest.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (TileManifest);

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_routeColors__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_config_tileManifest__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_1846_config_offBoardIds__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_1846_config_mapTileIds__ = __webpack_require__(15);










const EdgeCoordinates = ['31,-53.69', '62,0', '31,53.69', '-31,53.69', '-62,0', '-31,-53.69', '0,0', '0,0'];

const CurveControls = {
    '0-1': '17.22,-29.83 34.45,0',
    '0-2': '11.82,-20.47 11.82,20.47',
    '0-4': '11.82,-20.47 -23.64,0',
    '0-5': '17.22,-29.83 -17.22,-29.83',
    '1-2': '34.45,0 17.22,29.83',
    '1-3': '23.64,0 -11.82,20.47',
    '1-5': '23.64,0 -11.82,-20.47',
    '2-3': '17.22,29.83 -17.22,29.83',
    '2-4': '11.82,20.47 -23.64,0',
    '3-4': '-17.22,29.83 -34.45,0',
    '3-5': '-11.82,20.47 -11.82,-20.47'
};

class Tile extends __WEBPACK_IMPORTED_MODULE_2_common_model_serializable__["a" /* default */] {
    constructor(data) {
        super();
        data = data || {};

        this.id = data.id;

        // Static data from tile definition
        this.map = data.map;
        this.colorId = data.colorId;
        this.connections = data.connections || [];
        this.cities = data.cities || {};
        this.upgrades = data.upgrades || [];
        this.revenue = data.revenue || 0;
        this.direction = data.direction || '';
        this.ewBonus = data.ewBonus || 0;

        // Dynamic data
        this.position = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(data.position || 0);
        this.tokens = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(data.tokens || []);
        this.reservedTokens = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(data.reservedTokens);

        this.hasMeat = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(data.hasMeat);
        this.hasSteamboat = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(data.hasSteamboat);

        this.tokensPerCity = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            const tokensPerCity = {};
            __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(this.tokens(), token => {
                const splitToken = token.split('|');
                const tokenArray = tokensPerCity[splitToken[0]] || [];
                tokenArray.push(splitToken[1]);
                tokensPerCity[splitToken[0]] = tokenArray;
            });
            return tokensPerCity;
        });
        this.reservedTokensPerCity = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            const tokensPerCity = {};
            __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(this.reservedTokens(), token => {
                const splitToken = token.split('|');
                const tokenArray = tokensPerCity[splitToken[0]] || [];
                tokenArray.push(splitToken[1]);
                tokensPerCity[splitToken[0]] = tokenArray;
            });
            return tokensPerCity;
        });

        // Not serialized
        this.routedConnectionsById = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(data.routedConnectionsById || {});
    }

    copyToTile(newTile) {
        newTile.tokens(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.clone(this.tokens()));
        newTile.reservedTokens(this.reservedTokens());
        newTile.hasMeat(this.hasMeat());
        newTile.hasSteamboat(this.hasSteamboat());
    }

    toJSON() {
        const plainObject = super.toJSON();
        delete plainObject.routedConnectionsById;
        return plainObject;
    }

    getRevenue(cellId, companyId, ewBonus) {
        let revenue = 0;
        if (this.hasMeat() && this.hasMeat() === companyId) {
            revenue += 30;
        }

        if (this.hasSteamboat() && this.hasSteamboat() === companyId) {
            revenue += cellId === 'G19' || cellId === __WEBPACK_IMPORTED_MODULE_7_1846_config_offBoardIds__["a" /* default */].HOLLAND ? 40 : 20;
        }

        if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isArray(this.revenue)) {
            const phaseId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_common_game_currentGame__["a" /* default */])().state().currentPhaseId();
            if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I) {
                revenue += this.revenue[0];
            } else if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II) {
                revenue += this.revenue[1];
            } else if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III) {
                revenue += this.revenue[2];
            } else if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV) {
                revenue += this.revenue[3];
            }
        } else {
            revenue += this.revenue;
        }

        if (ewBonus) {
            revenue += this.ewBonus || 0;
        }

        return revenue;
    }

    getTokensForCity(cityId) {
        return this.tokensPerCity()[cityId] || [];
    }

    getReservedTokensForCity(cityId) {
        return this.reservedTokensPerCity()[cityId] || [];
    }

    getReservedTokenForCompany(companyId) {
        const cityId = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.findKey(this.reservedTokensPerCity(), tokens => __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(tokens, companyId) >= 0);
        return cityId ? cityId + '|' + companyId : null;
    }

    hasReservedTokenForCompany(companyId, cityId) {
        if (cityId) {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(this.getReservedTokensForCity(cityId), companyId) >= 0;
        } else {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.reservedTokensPerCity()).values().flatten().indexOf(companyId) >= 0;
        }
    }

    addReservedToken(companyId, cityId) {
        if (!cityId) {
            const cities = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.values(this.cities);
            if (cities.length === 1) {
                cityId = cities[0].id;
            }
        }
        if (!this.hasReservedTokenForCompany(companyId, cityId)) {
            this.reservedTokens.push(cityId + '|' + companyId);
        }
    }

    removeReservedToken(companyId, cityId) {
        const token = cityId ? cityId + '|' + companyId : this.getReservedTokenForCompany(companyId);
        const removed = this.reservedTokens.remove(token);
        return removed.length > 0 ? removed[0] : null;
    }

    addToken(companyId, cityId) {
        if (!cityId) {
            const cities = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.values(this.cities);
            if (cities.length === 1) {
                cityId = cities[0].id;
            }
        }
        if (!this.hasTokenForCompany(companyId, cityId)) {
            this.tokens.push(cityId + '|' + companyId);
        }
    }

    removeToken(companyId, cityId) {
        const token = cityId ? cityId + '|' + companyId : this.getTokenForCompany(companyId);
        const removed = this.tokens.remove(token);
        return removed.length > 0 ? removed[0] : null;
    }

    hasCity() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keys(this.cities).length > 0;
    }

    getOpenCities(companyId) {
        const cities = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.values(this.cities);
        if (cities.length === 0) {
            return [];
        }

        if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.tokens(), token => __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.endsWith(token, companyId))) {
            return [];
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.cities).map((city, cityId) => {
            const otherReserved = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reject(this.getReservedTokensForCity(cityId), reservedToken => reservedToken === companyId);
            return city.maxTokens > this.getTokensForCity(cityId).length + otherReserved.length ? city.id : null;
        }).compact().value();
    }

    hasTokenForCompany(companyId, cityId) {
        if (cityId) {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(this.getTokensForCity(cityId), companyId) >= 0;
        } else {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.tokensPerCity()).values().flatten().indexOf(companyId) >= 0;
        }
    }

    getTokenForCompany(companyId) {
        const cityId = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.findKey(this.tokensPerCity(), tokens => __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(tokens, companyId) >= 0);
        return cityId ? cityId + '|' + companyId : null;
    }

    isBlockedForCompany(companyId, cityId) {
        return !this.hasTokenForCompany(companyId, cityId) && this.getTokensForCity(cityId).length === this.cities[cityId].maxTokens;
    }

    hasConnection(start, end) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.connections, connection => connection[0] === start && connection[1] === end);
    }

    getConnectionsToPoint(point) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(this.connections, connection => connection[0] === point || connection[1] === point);
    }

    static getConnectionId(connection) {
        return Math.min(connection[0], connection[1]) + '-' + Math.max(connection[0], connection[1]);
    }

    getUpgradedConnections(newTile) {
        const oldConnectionsIds = Tile.getConnectionIdsForPosition(this.id, this.position());
        const newConnectionsIds = Tile.getConnectionIdsForPosition(newTile.id, newTile.position());
        const newConnectionsById = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.fromPairs(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.zip(newConnectionsIds, newTile.connections));
        const originalConnectionIds = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(this.connections, connection => Tile.getConnectionId(connection));
        const upgradedConnections = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(oldConnectionsIds).map(connectionId => newConnectionsById[connectionId]).value();
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.zipObject(originalConnectionIds, upgradedConnections);
    }

    static getConnectionsForPosition(tileId, position) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(__WEBPACK_IMPORTED_MODULE_6_1846_config_tileManifest__["a" /* default */].getTileDefinition(tileId).connections, connection => {
            const newStart = Tile.getOffsetIndexForPosition(connection[0], position);
            const newEnd = Tile.getOffsetIndexForPosition(connection[1], position);
            return [newStart, newEnd];
        });
    }

    static getConnectionIdsForPosition(tileId, position) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(Tile.getConnectionsForPosition(tileId, position), connection => {
            return Tile.getConnectionId(connection);
        });
    }

    static getOffsetIndexForPosition(index, position) {
        return index < 7 ? (index + position) % 6 : index;
    }

    getRoutedCityColors(cityId) {
        cityId = cityId || 7;
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.getRoutedConnections()).filter(connection => Math.max(connection[0], connection[1]) === cityId).map(connection => {
            const connectionId = Tile.getConnectionId(connection);
            return __WEBPACK_IMPORTED_MODULE_5_1846_config_routeColors__["a" /* default */][this.routedConnectionsById()[connectionId].color];
        }).uniq().value();
    }

    getRoutedConnection(connection) {
        const connectionId = Tile.getConnectionId(connection);
        return this.routedConnectionsById()[connectionId];
    }

    getRoutedConnections() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.connections).filter(connection => {
            return this.getRoutedConnection(connection);
        }).value();
    }

    getOtherRoutedConnections(routeId) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.connections).filter(connection => {
            return this.hasOtherRoutedConnection(connection, routeId);
        }).value();
    }

    getUnroutedConnections() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.connections).reject(connection => {
            const connectionId = Tile.getConnectionId(connection);
            return this.routedConnectionsById()[connectionId];
        }).value();
    }

    hasRoutedConnection(connection, routeId) {
        const connectionId = Tile.getConnectionId(connection);
        const routedConnection = this.routedConnectionsById()[connectionId];
        return routedConnection && (!routeId || routedConnection.routeId === routeId);
    }

    hasOtherRoutedConnection(connection, routeId) {
        const connectionId = Tile.getConnectionId(connection);
        const routedConnection = this.routedConnectionsById()[connectionId];
        return routedConnection && routedConnection.routeId !== routeId;
    }

    addRoutedConnection(connection, color, routeId) {
        const connectionId = Tile.getConnectionId(connection);
        this.routedConnectionsById.valueWillMutate();
        this.routedConnectionsById()[connectionId] = { color, routeId };
        this.routedConnectionsById.valueHasMutated();
    }

    removeRoutedConnection(connection) {
        const connectionId = Tile.getConnectionId(connection);
        this.routedConnectionsById.valueWillMutate();
        delete this.routedConnectionsById()[connectionId];
        this.routedConnectionsById.valueHasMutated();
    }

    clearRoutedConnections(routeId) {
        this.routedConnectionsById.valueWillMutate();
        if (!routeId) {
            this.routedConnectionsById({});
        } else {
            this.routedConnectionsById(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.pickBy(this.routedConnectionsById(), connectionData => connectionData.routeId !== routeId));
        }
        this.routedConnectionsById.valueHasMutated();
    }

    updateRoutedConnectionsColor(routeId, color) {
        this.routedConnectionsById.valueWillMutate();
        __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.routedConnectionsById()).values().filter(connectionData => connectionData.routeId === routeId).each(connectionData => {
            connectionData.color = color;
        });
        this.routedConnectionsById.valueHasMutated();
    }

    getDrawingInstructions(connection) {
        if (connection[1] > 6 || connection[1] - connection[0] === 3) {
            return 'M ' + EdgeCoordinates[connection[0]] + ' L ' + EdgeCoordinates[connection[1]];
        } else {
            return 'M ' + EdgeCoordinates[connection[0]] + ' C ' + (CurveControls[connection[0] + '-' + connection[1]] || '0,0 0,0') + ' ' + EdgeCoordinates[connection[1]];
        }
    }

    getOuterStrokeColor(connection) {
        const connectionId = Tile.getConnectionId(connection);
        const connectionData = this.routedConnectionsById()[connectionId];
        return connectionData ? __WEBPACK_IMPORTED_MODULE_5_1846_config_routeColors__["a" /* default */][connectionData.color] : 'white';
    }

    getOuterStrokeWidth(connection) {
        const connectionId = Tile.getConnectionId(connection);
        return this.routedConnectionsById()[connectionId] ? 21 : 13;
    }

    getCityDashArray(cityId) {
        const num = this.getRoutedCityColors(cityId).length;
        if (num === 2) {
            return '40 40 40 40';
        } else if (num === 3) {
            return '33 66 33 66';
        } else if (num === 4) {
            return '20 60 20 60';
        }

        return '';
    }

    getCityDashOffset(cityId) {
        const num = this.getRoutedCityColors(cityId).length;
        if (num === 2) {
            return '40';
        } else if (num === 3) {
            return '33';
        } else if (num === 4) {
            return '20';
        }

        return '';
    }

    getCityOuterStrokeColor(cityId) {
        const routedConnectionId = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.connections).filter(connection => connection[1] === cityId || connection[0] === cityId).map(connection => Tile.getConnectionId(connection)).find(connectionId => this.routedConnectionsById()[connectionId]);
        return routedConnectionId ? __WEBPACK_IMPORTED_MODULE_5_1846_config_routeColors__["a" /* default */][this.routedConnectionsById()[routedConnectionId].color] : 'white';
    }

    getCityOuterStrokeWidth(cityId) {
        const routed = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.connections).filter(connection => connection[1] === cityId || connection[0] === cityId).map(connection => Tile.getConnectionId(connection)).find(connectionId => this.routedConnectionsById()[connectionId]);
        return routed ? 8 : 1;
    }

    getCityName(cityId) {
        if (this.id !== __WEBPACK_IMPORTED_MODULE_8_1846_config_mapTileIds__["a" /* default */].CHICAGO) {
            return '';
        }

        if (cityId === 7) {
            return 'North';
        }
        if (cityId === 8) {
            return 'East';
        }
        if (cityId === 9) {
            return 'SE';
        }
        if (cityId === 10) {
            return 'SW';
        }
    }

}

Tile.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Tile);

/***/ }),
/* 20 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const TileColorIDs = {
    INVISIBLE: 'i',
    YELLOW: 'y',
    GREEN: 'g',
    BROWN: 'b',
    GRAY: 'gr'
};

/* harmony default export */ __webpack_exports__["a"] = (TileColorIDs);

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return LZString; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else if( typeof module !== 'undefined' && module != null ) {
  module.exports = LZString
}


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_game_validationError__ = __webpack_require__(14);





class StartCompany extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.companyId = args.companyId;
        this.startIndex = args.startIndex;
        this.firstPassIndex = args.firstPassIndex;
    }

    doExecute(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        const price = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex);
        const cash = price * 2;
        this.firstPassIndex = state.firstPassIndex();

        // validate things
        if (company.opened()) {
            throw new __WEBPACK_IMPORTED_MODULE_3_common_game_validationError__["a" /* default */]('Cannot open a company that was already opened');
        }

        if (player.cash() < cash) {
            throw new __WEBPACK_IMPORTED_MODULE_3_common_game_validationError__["a" /* default */](player.name() + ' does not have enough cash to open ' + company.name + ' at ' + cash / 2);
        }

        // cert limit

        company.priceIndex(this.startIndex);
        company.president(this.playerId);
        company.opened(true);
        state.stockBoard.addCompany(company);
        player.removeCash(cash);
        company.addCash(cash + (this.companyId === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL ? price : 0));

        const tile = state.tilesByCellId[company.homeCellId];
        company.useToken();
        tile.addToken(company.id);
        tile.removeReservedToken(company.id);

        // First cert in company treasury always pres cert for convenience
        const cert = company.certificates.shift();
        player.addCert(cert);
        state.firstPassIndex(null);
    }

    doUndo(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        const price = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex);
        const cash = price * 2;

        const tile = state.tilesByCellId[company.homeCellId];
        tile.removeToken(company.id);
        tile.addReservedToken(company.id);
        company.returnToken();

        company.removeCash(cash + (this.companyId === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL ? price : 0));
        player.addCash(cash);

        state.stockBoard.removeCompany(company.id);
        company.priceIndex(0);
        company.president(null);
        company.opened(false);

        const cert = player.removePresidentCertForCompany(this.companyId);
        company.certificates.unshift(cert);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return 'Opened ' + company.nickname + ' @ ' + __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex);
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        return 'Confirm Open ' + company.nickname + ' @ ' + __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex);
    }
}

StartCompany.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (StartCompany);

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const Allocations = {
    NONE: 'none',
    HALF: 'half',
    FULL: 'full'
};

/* harmony default export */ __webpack_exports__["a"] = (Allocations);

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const TerrainTypes = {
    BRIDGE: 'bridge',
    TUNNEL: 'tunnel'
};

/* harmony default export */ __webpack_exports__["a"] = (TerrainTypes);

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_baseGame__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_map_grid__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_companies__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_state_state__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_game_player__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_game_bank__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_1846_config_tileManifest__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_1846_game_stockBoard__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_1846_game_sequence__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_1846_game_operatingRound__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_1846_game_history__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_1846_config_roundTypes__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_lz_string__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_lz_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_lz_string__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_common_game_currentGame__ = __webpack_require__(4);




















const ActivePanelIDs = {
    MAP: 'map',
    OWNERSHIP: 'ownership',
    TILE_MANIFEST: 'manifest',
    HISTORY: 'history',
    REPORT_BUG: 'report_bug'
};

class Game extends __WEBPACK_IMPORTED_MODULE_0_common_game_baseGame__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);

        this.record = definition.record;
        this.state = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable(definition.state);
        this.grid = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable(new __WEBPACK_IMPORTED_MODULE_1_1846_map_grid__["a" /* default */](definition.state));
        this.privateDraft = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable();
        this.stockRound = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable();
        this.operatingRound = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable(new __WEBPACK_IMPORTED_MODULE_14_1846_game_operatingRound__["a" /* default */]());
        this.history = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable(new __WEBPACK_IMPORTED_MODULE_15_1846_game_history__["a" /* default */]());
        this.zoom = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable(.8);
        this.selectedCompany = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable();

        this.activePanel = __WEBPACK_IMPORTED_MODULE_8_knockout___default.a.observable(ActivePanelIDs.MAP);
        this.ActivePanelIDs = ActivePanelIDs;
        this.sequence = __WEBPACK_IMPORTED_MODULE_13_1846_game_sequence__["a" /* default */];
    }

    selectCompany(companyId) {
        if (this.selectedCompany() === companyId) {
            this.selectedCompany(null);
        } else {
            this.selectedCompany(companyId);
        }
    }

    zoomIn() {
        if (this.zoom() < 1.5) {
            this.zoom(this.zoom() + .05);
        }
    }

    zoomOut() {
        if (this.zoom() > .1) {
            this.zoom(this.zoom() - .05);
        }
    }

    showMap() {
        this.activePanel(ActivePanelIDs.MAP);
    }

    showOwnership() {
        this.activePanel(ActivePanelIDs.OWNERSHIP);
    }

    setActivePanel(newPanel) {
        if (newPanel === ActivePanelIDs.HISTORY) {
            const currentRound = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_18_common_game_currentGame__["a" /* default */])().state().roundHistory.currentRound();
            if (currentRound) {
                this.history().selectRound(currentRound.id);
            }
        }
        this.activePanel(newPanel);
    }

    static createInitialState(users) {
        const publicCompanies = __WEBPACK_IMPORTED_MODULE_2_1846_config_companies__["a" /* default */].generatePublicCompanies();
        const privateCompanies = __WEBPACK_IMPORTED_MODULE_2_1846_config_companies__["a" /* default */].generatePrivateCompanies();

        const greenGroup = [__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].CHESAPEAKE_OHIO, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].ERIE, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].PENNSYLVANIA];
        const blueGroup = [__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].TUNNEL_BLASTING_COMPANY, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MEAT_PACKING_COMPANY];
        const orangeGroup = [__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].OHIO_INDIANA, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].LAKE_SHORE_LINE];

        const players = __WEBPACK_IMPORTED_MODULE_9_lodash___default()(users).shuffle().map((user, index) => {
            return new __WEBPACK_IMPORTED_MODULE_5_1846_game_player__["a" /* default */]({ user, cash: 400, order: index });
        }).value();

        if (players.length === 3 || players.length === 4) {
            const numToRemove = players.length === 3 ? 2 : 1;
            const greenRemovals = __WEBPACK_IMPORTED_MODULE_9_lodash___default()(greenGroup).shuffle().take(numToRemove).value();
            const blueRemovals = __WEBPACK_IMPORTED_MODULE_9_lodash___default()(blueGroup).shuffle().take(numToRemove).value();
            const orangeRemovals = __WEBPACK_IMPORTED_MODULE_9_lodash___default()(orangeGroup).shuffle().take(numToRemove).value();

            __WEBPACK_IMPORTED_MODULE_9_lodash___default.a.remove(publicCompanies, company => __WEBPACK_IMPORTED_MODULE_9_lodash___default.a.indexOf(greenRemovals, company.id) >= 0);
            __WEBPACK_IMPORTED_MODULE_9_lodash___default.a.remove(privateCompanies, company => __WEBPACK_IMPORTED_MODULE_9_lodash___default.a.indexOf(blueRemovals, company.id) >= 0);
            __WEBPACK_IMPORTED_MODULE_9_lodash___default.a.remove(privateCompanies, company => __WEBPACK_IMPORTED_MODULE_9_lodash___default.a.indexOf(orangeRemovals, company.id) >= 0);
        }

        let cash = 0;
        const trainsByPhase = {};
        if (players.length === 3) {
            cash = 5300;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_I] = 5;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_II] = 4;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_III] = 3;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_IV] = -1;
        } else if (players.length === 4) {
            cash = 5900;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_I] = 6;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_II] = 5;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_III] = 4;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_IV] = -1;
        } else if (players.length === 5) {
            cash = 7000;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_I] = 7;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_II] = 6;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_III] = 5;
            trainsByPhase[__WEBPACK_IMPORTED_MODULE_6_1846_config_phaseIds__["a" /* default */].PHASE_IV] = -1;
        }

        const bank = new __WEBPACK_IMPORTED_MODULE_7_common_game_bank__["a" /* default */]({ cash, trainsByPhase });

        const manifest = new __WEBPACK_IMPORTED_MODULE_10_1846_config_tileManifest__["a" /* default */]();
        const stockBoard = new __WEBPACK_IMPORTED_MODULE_11_1846_game_stockBoard__["a" /* default */]();

        const state = new __WEBPACK_IMPORTED_MODULE_4_1846_state_state__["a" /* default */]({
            players,
            publicCompanies,
            privateCompanies,
            bank,
            manifest,
            stockBoard
        });

        state.roundHistory.startRound(__WEBPACK_IMPORTED_MODULE_16_1846_config_roundTypes__["a" /* default */].PRIVATE_DRAFT, 1);
        state.currentPlayerIndex(state.players().length - 1);
        state.turnHistory.startTurn({ state });

        return state;
    }

    updateState(newState) {
        this.state(newState);
        __WEBPACK_IMPORTED_MODULE_13_1846_game_sequence__["a" /* default */].restore();
        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].emit('stateUpdated', {});
    }

    saveLocalState() {
        this.record.round = this.state().winner() ? 'Game End' : this.state().roundHistory.currentRound().getRoundName();
        this.record.turn = this.state().currentPlayer().name();
        this.record.save(this.state());
    }

    isDraftRevealed() {
        return this.privateDraft() && this.privateDraft().revealed();
    }

}

/* harmony default export */ __webpack_exports__["a"] = (Game);

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__ = __webpack_require__(4);



class ActionGroup extends __WEBPACK_IMPORTED_MODULE_0_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);

        this.type = definition.type;
        this.id = definition.id;
        this.actionStartIndex = definition.actionStartIndex;
        this.actionEndIndex = definition.actionEndIndex;
    }

    commit() {
        this.actionEndIndex = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.currentIndex();
    }

    undo() {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.undoRange(this.actionStartIndex, this.actionEndIndex);
    }

    getActions() {
        if (this.actionEndIndex <= this.actionStartIndex) {
            return [];
        }
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.getActionRange(this.actionStartIndex, this.actionEndIndex);
    }

    getSummaries() {
        if (this.actionEndIndex <= this.actionStartIndex) {
            return [];
        }

        return _(this.getActions()).invokeMap('summary', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state()).map((summary, index) => {
            return {
                index: this.actionStartIndex + index,
                type: 'action',
                summary
            };
        }).value();
    }

    getInstructions() {
        if (this.actionEndIndex <= this.actionStartIndex) {
            return [];
        }

        return _(this.getActions()).invokeMap('instructions', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state()).map((instructions, index) => {
            return _.map(instructions, instruction => {
                return {
                    index: this.actionStartIndex + index,
                    type: 'action',
                    instruction
                };
            });
        }).flatten().value();
    }

    getDetails() {
        if (this.actionEndIndex <= this.actionStartIndex) {
            return [];
        }

        return _(this.getActions()).invokeMap('details', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state()).map((details, index) => {
            return {
                index: this.actionStartIndex + index,
                type: 'action',
                details
            };
        }).value();
    }

    isWithinRange(startIndex, endIndex) {
        return this.actionStartIndex >= startIndex && (endIndex && this.actionEndIndex <= endIndex || !endIndex);
    }
}

ActionGroup.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (ActionGroup);

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_short_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);





class GameRecord extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        super(definition);

        this.id = definition.id || __WEBPACK_IMPORTED_MODULE_0_short_uuid___default()().new();
        this.type = definition.type;
        this.name = definition.name;
        this.location = definition.location;
        this.players = definition.players;
        this.startDate = definition.startDate;
        this.endDate = definition.endDate;
        this.winner = definition.winner;
        this.round = definition.round;
        this.turn = definition.turn;
    }

    create(currentState, initialState) {
        __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].store(this.id, this.serialize(), 'games');
        __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].storeCompressed(this.id, initialState.serialize(), 'initialstate');
        __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].storeCompressed(this.id, currentState.serialize(), 'currentstate');
    }

    loadCurrentState() {
        return __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */].deserialize(__WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].loadCompressed(this.id, 'currentstate'));
    }

    loadRawCurrentState() {
        return __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].load(this.id, 'currentstate');
    }

    save(state) {
        __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].store(this.id, this.serialize(), 'games');
        if (state) {
            __WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].storeCompressed(this.id, state.serialize(), 'currentstate');
        }
    }

    static load(id) {
        return __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */].deserialize(__WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].load(id, 'games'));
    }

    static list() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(__WEBPACK_IMPORTED_MODULE_2_common_util_localStore__["a" /* default */].list('games'), game => {
            return GameRecord.deserialize(game);
        });
    }
}

GameRecord.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (GameRecord);

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_map_tile__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_tileManifest__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_1846_actions_layTrack__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_1846_actions_addToken__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_1846_actions_placeMeat__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_1846_actions_placeSteamboat__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_1846_config_terrainTypes__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_1846_config_offBoardIds__ = __webpack_require__(16);
















const CellCosts = {
    C15: 40,
    F18: 40,
    G17: 40,
    H16: 40,
    H14: 60
};

const FreeICCells = {
    E5: true,
    F6: true,
    G5: true,
    H6: true,
    J4: true
};

const FreeTunnelBlasterCells = {
    F18: true,
    G17: true,
    H16: true,
    H14: true
};

const ReservedTokens = {
    I5: __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL,
    E11: __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].PENNSYLVANIA,
    D20: __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].ERIE,
    H12: __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO
};

// Could optimize by storing known connections to stations on tiles, but would always need to refresh those if a
// token is placed, as it can break a connection by blocking

class Cell {
    constructor(data) {
        data = data || {};

        this.id = data.id;
        this.top = data.top || 0;
        this.left = data.left || 0;
        this.row = data.row || 0;
        this.col = data.col || 0;
        this.width = data.width || 126;
        this.height = data.height || 144;
        this.outline = data.outline || '0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796';
        this.tile = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(data.tile);
        this.preview = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(data.preview);
        this.allowedPreviewPositionData = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable({});
        this.allowedPreviewPositions = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(this.allowedPreviewPositionData(), 'position');
        });
        this.neighbors = data.neighbors || [null, null, null, null, null, null];
        this.connectionCosts = data.connectionCosts || {};
        this.visibleTile = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return this.preview() || this.tile();
        });
        this.upgradeTiles = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return [];
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().isOperatingRound()) {
                return [];
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
                return [];
            }

            return this.getUpgradeTiles();
        });

        this.tokenCheckTrigger = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable().extend({ notify: 'always' });

        this.tokenableCities = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return [];
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().isOperatingRound()) {
                return [];
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
                return [];
            }

            if (!this.tile()) {
                return [];
            }

            this.tokenCheckTrigger();

            const companyId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId();
            const openCities = this.tile().getOpenCities(companyId);

            if (openCities.length > 0 && this.id === 'H12' && companyId === __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO) {
                return openCities;
            }

            if (openCities.length > 0 && this.id === 'E11' && companyId === __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].PENNSYLVANIA) {
                return openCities;
            }

            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(openCities, cityId => this.depthFirstSearchForStation(companyId, cityId, {}, []));
        });

        this.canToken = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return false;
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().isOperatingRound()) {
                return false;
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
                return false;
            }

            if (this.tile().getOpenCities(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId()).length === 0) {
                return false;
            }

            const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
            if (!turn) {
                return false;
            }

            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany();
            if (!company.tokens()) {
                return false;
            }

            const hasTokened = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
                return action.getTypeName() === 'AddToken';
            });

            if (hasTokened) {
                return false;
            }

            if (this.tokenableCities().length === 0) {
                return false;
            }

            const cost = this.getTokenCost();
            if (company.cash() < cost) {
                return false;
            }

            return true;
        });

        this.canEdit = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return false;
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().isOperatingRound()) {
                return false;
            }

            const steamboat = this.canPlaceSteamboat();

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany() && !steamboat) {
                return false;
            }

            const layingTrack = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().selectedAction() === __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().Actions.LAY_TRACK;
            const oandi = this.isOhioIndianaLay();
            const mc = this.isMichiganCentralLay();
            const lsl = this.isLSLLay();
            const meat = this.canPlaceMeat();

            if (!layingTrack && !oandi && !mc && !lsl && !meat && !steamboat) {
                return false;
            }

            if (this.isMichiganCentralLay() && !this.michiganCentralBlocked() || this.isOhioIndianaLay() && !this.ohioIndianaBlocked()) {
                return false;
            }

            if (!this.isMichiganCentralLay() && this.michiganCentralBlocked()) {
                return false;
            }

            if (!this.isOhioIndianaLay() && this.ohioIndianaBlocked()) {
                return false;
            }

            return this.upgradeTiles().length > 0 || this.canToken() || meat || steamboat;
        });

        this.canRoute = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return false;
            }

            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().isOperatingRound()) {
                return false;
            }

            const train = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().selectedTrain();
            if (!train) {
                return false;
            }

            return true;
        });

        this.popoverParams = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return {
                enabledObservable: this.canEdit,
                placement: 'right',
                trigger: this.preview() ? 'manual' : 'click',
                closestDiv: true,
                content: '<div data-bind="template: { name: \'views/cellPopover\' }"></div>'
            };
        });

        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].on('trackLaid', () => {
            this.trackLaidHandler();
        });
        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].on('gridRestored', () => {
            this.gridRestoredHandler();
        });
    }

    trackLaidHandler() {
        this.tokenCheckTrigger(1);
    }

    gridRestoredHandler() {
        this.tokenCheckTrigger(1);
    }

    isOhioIndianaTiles() {
        return this.id === 'F14' || this.id === 'F16';
    }

    isMichiganCentralTiles() {
        return this.id === 'B10' || this.id === 'B12';
    }

    isOhioIndianaLay() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().isOhioIndianaAbility() && this.isOhioIndianaTiles();
    }

    isMichiganCentralLay() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().isMichiganCentralAbility() && this.isMichiganCentralTiles();
    }

    isLSLLay() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().isLSLAbility() && (this.id === 'D14' || this.id === 'E17');
    }

    canUpgrade() {
        return this.isLSLLay() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().hasUpgradedTrackThisTurn();
    }

    canPlaceMeat() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().isMeatPackingAbility() && (this.id === 'D6' || this.id === __WEBPACK_IMPORTED_MODULE_14_1846_config_offBoardIds__["a" /* default */].ST_LOUIS);
    }

    canPlaceSteamboat() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().isSteamboatAbility() && (this.id === 'D14' || this.id === 'G19' || this.id === __WEBPACK_IMPORTED_MODULE_14_1846_config_offBoardIds__["a" /* default */].HOLLAND || this.id === __WEBPACK_IMPORTED_MODULE_14_1846_config_offBoardIds__["a" /* default */].CHICAGO_CONNECTIONS || this.id === __WEBPACK_IMPORTED_MODULE_14_1846_config_offBoardIds__["a" /* default */].ST_LOUIS);
    }

    michiganCentralBlocked() {
        const michiganCentral = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(__WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL);
        return michiganCentral && this.isMichiganCentralTiles() && !michiganCentral.closed() && !michiganCentral.used();
    }

    ohioIndianaBlocked() {
        const ohioIndiana = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(__WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].OHIO_INDIANA);
        return ohioIndiana && this.isOhioIndianaTiles() && !ohioIndiana.closed() && !ohioIndiana.used();
    }

    getUpgradeTiles() {
        if (this.isOhioIndianaLay() || this.isMichiganCentralLay()) {
            return this.getOhioIndianaOrMichiganCentralTiles();
        }

        if (!this.isLSLLay() && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().hasLaidTwoTrackThisTurn()) {
            return [];
        }

        const phase = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentPhaseId();
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().manifest.getUpgradesForTile(this.tile().id) || [], upgrade => {

            if (upgrade.tile.colorId !== __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].YELLOW && (phase === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_I || !this.canUpgrade())) {
                return false;
            }

            if (phase === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_II && __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf([__WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].GREEN, __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].YELLOW], upgrade.tile.colorId) < 0) {
                return false;
            }

            if (phase === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_III && __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf([__WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].BROWN, __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].GREEN, __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].YELLOW], upgrade.tile.colorId) < 0) {
                return false;
            }

            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keys(this.getAllowedTilePositionData(this.tile(), upgrade.tile.id)).length > 0;
        });
    }

    getOhioIndianaOrMichiganCentralTiles() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().manifest.getUpgradesForTile(this.tile().id) || [], upgrade => {
            if (upgrade.tile.colorId !== __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].YELLOW) {
                return false;
            }

            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keys(this.getAllowedTilePositionData(this.tile(), upgrade.tile.id)).length > 0;
        });
    }

    getTokenCost() {
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany();
        let cost = 80;
        if (ReservedTokens[this.id] === company.id) {
            cost = 40;
            if (company.id === __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO || company.id === __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].PENNSYLVANIA) {
                const connected = this.isConnectedToStation(company.id);
                if (!connected) {
                    cost = company.id === __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO ? 100 : 60;
                }
            }
        }
        return cost;
    }

    getBaseCost(oldTile) {
        if (this.isLSLLay()) {
            return 0;
        }

        if (!oldTile.map) {
            return 20;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany();
        let cost = CellCosts[this.id] || 20;

        if (company.id === __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL && FreeICCells[this.id]) {
            cost = 0;
        }

        if (company.hasPrivate(__WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].TUNNEL_BLASTING_COMPANY) && FreeTunnelBlasterCells[this.id]) {
            cost = 0;
        }

        return cost;
    }

    getPrivatePairPositionData(oldTile, newTileId, neighborEdge) {

        const neighbor = this.neighbors[neighborEdge];
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.range(0, 6)).map(pos => {
            const connections = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionsForPosition(newTileId, pos);
            if (neighbor.tile().colorId === __WEBPACK_IMPORTED_MODULE_6_1846_config_tileColorIds__["a" /* default */].YELLOW) {
                const neighborConnectionIndex = Cell.getNeighboringConnectionIndex(neighborEdge);
                const neighborConnectionPoint = neighbor.getConnectionPointAtIndex(this, neighborConnectionIndex);
                if (neighborConnectionPoint < 0) {
                    return false;
                }

                const connectsToNeighbor = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(connections, connection => {
                    return connection[0] === neighborEdge || connection[1] === neighborEdge;
                });
                if (!connectsToNeighbor) {
                    return false;
                }
            }
            const connectionOffMap = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(connections, connection => {
                if (connection[0] < 7 && !this.neighbors[connection[0]]) {
                    return true;
                }

                if (connection[1] < 7 && !this.neighbors[connection[1]]) {
                    return true;
                }
            });

            if (connectionOffMap) {
                return null;
            }
            return {
                position: pos,
                cost: 0
            };
        }).compact().keyBy('position').value();
    }

    getAllowedTilePositionData(oldTile, newTileId) {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state();
        if (!state.isOperatingRound()) {
            return [];
        }

        const oandi = this.isOhioIndianaLay();
        const mc = this.isMichiganCentralLay();
        if (oandi || mc) {
            return this.getPrivatePairPositionData(oldTile, newTileId, this.id === 'F14' || this.id === 'B10' ? 1 : 4);
        }

        const visited = {};

        const validEdges = {};
        const invalidEdges = {};

        const company = state.currentCompany();
        const baseCost = this.getBaseCost(oldTile);
        if (company.cash() < baseCost) {
            return [];
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.range(0, 6)).map(pos => {
            // Check against existing tile connections
            const oldConnectionsIds = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionIdsForPosition(oldTile.id, oldTile.position());
            const newConnectionsIds = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionIdsForPosition(newTileId, pos);

            if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.difference(oldConnectionsIds, newConnectionsIds).length > 0) {
                return null;
            }

            const addedConnectionIds = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.difference(newConnectionsIds, oldConnectionsIds);
            const addedConnections = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionsForPosition(newTileId, pos)).filter(connection => {
                return this.tile().hasCity() || __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(addedConnectionIds, this.getConnectionId(connection)) >= 0;
            }).value();

            // Check off map
            const connectionOffMap = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(addedConnections, connection => {
                if (connection[0] < 7 && !this.neighbors[connection[0]]) {
                    invalidEdges[connection[0]] = true;
                    return true;
                }

                if (connection[1] < 7 && !this.neighbors[connection[1]]) {
                    invalidEdges[connection[1]] = true;
                    return true;
                }
            });

            if (connectionOffMap) {
                return null;
            }

            // Check for connection costs
            const existingConnectionPoints = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionsForPosition(oldTile.id, oldTile.position())).flatten().uniq().value();
            const connectionCosts = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(addedConnections).flatten().uniq().difference(existingConnectionPoints).sumBy(edgeIndex => {
                return this.getConnectionCost(edgeIndex);
            });

            // Check new track for a path back to station
            const connectionToStation = this.isLSLLay() || __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(addedConnections, connection => {
                const connectionStart = connection[0];
                const connectionEnd = connection[1];

                if (validEdges[connectionStart] || validEdges[connectionEnd]) {
                    return true;
                }

                const connectionId = this.getCellConnectionId(connection);

                if (connectionStart < 7 && !invalidEdges[connectionStart]) {
                    const isEdgeValid = this.checkNeighborConnection(company.id, connectionStart, visited, [connectionId]);
                    if (isEdgeValid) {
                        validEdges[connectionStart] = true;
                        return true;
                    } else {
                        invalidEdges[connectionStart] = true;
                    }
                }

                if (connectionEnd < 7 && !invalidEdges[connectionEnd]) {
                    const isEdgeValid = this.checkNeighborConnection(company.id, connectionEnd, visited, [connectionId]);
                    if (isEdgeValid) {
                        validEdges[connectionEnd] = true;
                        return true;
                    } else {
                        invalidEdges[connectionEnd] = true;
                    }
                }
            });

            if (!connectionToStation) {
                return null;
            }

            const totalCost = baseCost + connectionCosts;
            if (company.cash() < totalCost) {
                return null;
            }

            return {
                position: pos,
                cost: totalCost
            };
        }).compact().keyBy('position').value();
    }

    getConnectionCost(edgeIndex) {
        if (edgeIndex > 6) {
            return 0;
        }

        const costData = this.connectionCosts[edgeIndex];
        if (!costData) {
            return 0;
        }

        if (costData.type === __WEBPACK_IMPORTED_MODULE_13_1846_config_terrainTypes__["a" /* default */].TUNNEL) {
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompany();
            if (company.hasPrivate(__WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].TUNNEL_BLASTING_COMPANY)) {
                return 0;
            }
        }

        const neighbor = this.neighbors[edgeIndex];
        const neighborConnectionIndex = Cell.getNeighboringConnectionIndex(edgeIndex);
        const neighborConnectionPoint = neighbor.getConnectionPointAtIndex(this, neighborConnectionIndex);
        return neighborConnectionPoint >= 0 ? costData.cost : 0;
    }

    isConnectedToStation(companyId) {
        const connections = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionsForPosition(this.tile().id, this.tile().position());
        const visited = {};
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(connections, connection => {
            let connected = false;

            if (connection[0] < 7) {
                connected = this.checkNeighborConnection(companyId, connection[0], visited, []);
            }

            if (!connected && connection[1] < 7) {
                connected = this.checkNeighborConnection(companyId, connection[1], visited, []);
            }
            return connected;
        });
    }

    checkNeighborConnection(companyId, edgeIndex, visited, currentSearchPath) {

        const hasLocalStation = this.tile().hasTokenForCompany(companyId);
        if (hasLocalStation) {
            return true;
        }

        const neighbor = this.neighbors[edgeIndex];
        if (!neighbor) {
            return false;
        }
        // console.log('Checking neighbor ' + neighbor.id + ' for connection to station');
        const neighborConnectionIndex = Cell.getNeighboringConnectionIndex(edgeIndex);
        const neighborConnectionPoint = neighbor.getConnectionPointAtIndex(this, neighborConnectionIndex);
        if (neighborConnectionPoint < 0) {
            return false;
        }

        return neighbor.depthFirstSearchForStation(companyId, neighborConnectionPoint, visited, currentSearchPath);
    }

    depthFirstSearchForStation(companyId, connectionStart, visited, currentSearchPath) {
        const connections = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(this.tile().getConnectionsToPoint(connectionStart), connection => {
            return connection[0] === connectionStart ? connection : [connection[1], connection[0]];
        });

        let found = false;

        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(connections, connection => {
            const directionalConnectionId = this.id + '-' + this.getConnectionId(connection, true);
            const connectionId = this.id + '-' + this.getConnectionId(connection);
            if (visited[directionalConnectionId] || __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(currentSearchPath, connectionId) >= 0) {
                return;
            }

            visited[directionalConnectionId] = true;
            if (currentSearchPath) {
                currentSearchPath.push(connectionId);
            }

            if (connection[1] > 6) {

                // check for city / token
                if (companyId && this.tile().hasTokenForCompany(companyId, connection[1])) {
                    found = true;
                    return false;
                }

                // Check blocked
                if (this.tile().isBlockedForCompany(companyId, connection[1])) {
                    return false;
                }

                // console.log('Starting new search on this tile from local city ' + connection[1]);
                found = this.depthFirstSearchForStation(companyId, connection[1], visited, currentSearchPath);
            } else {
                const connectionEnd = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[1], this.tile().position());
                const neighbor = this.neighbors[connectionEnd];
                if (!neighbor) {
                    return;
                }
                const neighborConnectionIndex = Cell.getNeighboringConnectionIndex(connectionEnd);
                const neighborConnectionPoint = neighbor.getConnectionPointAtIndex(this, neighborConnectionIndex);
                if (neighborConnectionPoint >= 0) {
                    found = neighbor.depthFirstSearchForStation(companyId, neighborConnectionPoint, visited, currentSearchPath);
                }
            }

            if (found) {
                return false;
            }
        });
        if (currentSearchPath) {
            currentSearchPath.pop();
        }

        return found;
    }

    getCellConnectionId(connection, directional) {
        return this.id + '-' + this.getConnectionId(connection, directional);
    }

    getConnectionId(connection, directional) {
        if (directional) {
            return connection[0] + '-' + connection[1];
        } else {
            return Math.min(connection[0], connection[1]) + '-' + Math.max(connection[0], connection[1]);
        }
    }

    hasConnectionAtIndex(index) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(__WEBPACK_IMPORTED_MODULE_3_1846_config_tileManifest__["a" /* default */].getTileDefinition(this.tile().id).connections, connection => {
            if (__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[0], this.tile().position()) === index) {
                return true;
            }

            if (__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[1], this.tile().position()) === index) {
                return true;
            }
        });
    }

    getConnectionsToCell(cell) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.neighbors).map((neighbor, index) => {
            if (!neighbor || neighbor.id !== cell.id) {
                return;
            }
            return this.getConnectionsToIndex(cell, index);
        }).compact().flatten().value();
    }

    getConnectionEdgeToCell(cell) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.findIndex(this.neighbors, neighbor => neighbor && neighbor.id === cell.id);
    }

    getAllConnectionEdgesToCell(cell) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.neighbors).map((neighbor, index) => neighbor && neighbor.id === cell.id ? index : null).reject(index => __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isNull(index)).value();
    }

    getConnectionsFromNeighborToNeighbor(neighborOne, neighborTwo, invalidConnectionIds) {
        const edgeOne = this.getConnectionEdgeToCell(neighborOne);
        const edgeTwo = this.getConnectionEdgeToCell(neighborTwo);

        if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keys(this.tile().cities).length > 0) {
            let edgePairs = [[edgeOne, edgeTwo]];
            if (neighborTwo.offboard) {
                const edges = this.getAllConnectionEdgesToCell(neighborTwo);
                if (edges.length > 1) {
                    edgePairs = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(edges, edge => [edgeOne, edge]);
                }
            } else if (neighborOne.offboard) {
                const edges = this.getAllConnectionEdgesToCell(neighborOne);
                if (edges.length > 1) {
                    edgePairs = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(edges, edge => [edge, edgeTwo]);
                }
            }

            return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.tile().cities).map(city => {
                return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(edgePairs).map(edgePair => __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.compact([this.getConnectionToEdges(edgePair[0], city.id), this.getConnectionToEdges(edgePair[1], city.id)])).reject(result => {
                    const resultConnectionIds = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(result, connection => __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionId(connection));
                    return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.intersection(resultConnectionIds, invalidConnectionIds).length > 0;
                }).first();
            }).find(connections => connections.length === 2);
        } else {
            return [this.getConnectionToEdges(edgeOne, edgeTwo)];
        }
    }

    getConnectionToEdges(start, end) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(__WEBPACK_IMPORTED_MODULE_3_1846_config_tileManifest__["a" /* default */].getTileDefinition(this.tile().id).connections, connection => {
            const offsetStart = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[0], this.tile().position());
            const offsetEnd = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[1], this.tile().position());
            return (offsetStart === start || offsetStart === end) && (offsetEnd === start || offsetEnd === end);
        });
    }

    getConnectionPointAtIndex(neighbor, index) {
        const connection = this.hasConnectionAtIndex(index);
        if (connection) {
            return __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[0], this.tile().position()) === index ? connection[0] : connection[1];
        }
        return -1;
    }

    getConnectionsToIndex(neighbor, index) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(__WEBPACK_IMPORTED_MODULE_3_1846_config_tileManifest__["a" /* default */].getTileDefinition(this.tile().id).connections, connection => {
            if (__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[0], this.tile().position()) === index) {
                return true;
            }

            if (__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[1], this.tile().position()) === index) {
                return true;
            }
        });
    }

    getConnectionsToPoint(neighbor, index) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(__WEBPACK_IMPORTED_MODULE_3_1846_config_tileManifest__["a" /* default */].getTileDefinition(this.tile().id).connections, connection => {
            if (__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[0], 0) === index) {
                return true;
            }

            if (__WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getOffsetIndexForPosition(connection[1], 0) === index) {
                return true;
            }
        });
    }

    static getNeighboringConnectionIndex(index) {
        return (index + 3) % 6;
    }

    previewTile(tileId) {
        const tile = __WEBPACK_IMPORTED_MODULE_3_1846_config_tileManifest__["a" /* default */].createTile(tileId);
        this.allowedPreviewPositionData(this.getAllowedTilePositionData(this.tile(), tileId));
        tile.position(this.allowedPreviewPositions()[0]);
        this.preview(tile);
    }

    nextPreviewPosition() {
        const currentPosition = this.preview().position();
        const allowedPositions = this.allowedPreviewPositions();
        const currentIndex = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(allowedPositions, currentPosition);
        const nextIndex = (currentIndex + 1) % allowedPositions.length;
        this.preview().position(allowedPositions[nextIndex]);
    }

    cancelPreview() {
        this.preview(null);
        this.allowedPreviewPositionData({});
    }

    commitPreview() {
        const previewTile = this.preview();
        const privateId = this.isLSLLay() ? __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].LAKE_SHORE_LINE : this.isMichiganCentralLay() ? __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL : this.isOhioIndianaLay() ? __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].OHIO_INDIANA : null;
        const layTrack = new __WEBPACK_IMPORTED_MODULE_8_1846_actions_layTrack__["a" /* default */]({
            companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
            cellId: this.id,
            tileId: previewTile.id,
            position: previewTile.position(),
            cost: this.allowedPreviewPositionData()[previewTile.position()].cost,
            privateId,
            privateDone: privateId && (this.isLSLLay() || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().numPrivateTrackLays(privateId) === 1)
        });
        layTrack.execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().saveLocalState();
        this.cancelPreview();
    }

    tokenCity(cityId) {
        const addToken = new __WEBPACK_IMPORTED_MODULE_9_1846_actions_addToken__["a" /* default */]({
            companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
            cityId: cityId,
            cellId: this.id,
            cost: this.getTokenCost()
        });
        addToken.execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().saveLocalState();
        this.cancelPreview();
    }

    placeMeat() {
        const placeMeat = new __WEBPACK_IMPORTED_MODULE_10_1846_actions_placeMeat__["a" /* default */]({
            companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
            privateId: __WEBPACK_IMPORTED_MODULE_7_1846_config_companyIds__["a" /* default */].MEAT_PACKING_COMPANY,
            cellId: this.id
        });
        placeMeat.execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().saveLocalState();
        this.cancelPreview();
    }

    placeSteamboat() {
        const placeSteamboat = new __WEBPACK_IMPORTED_MODULE_11_1846_actions_placeSteamboat__["a" /* default */]({
            playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId() ? null : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
            companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().currentCompanyId() || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().operatingRound().selectedSteamboatCompany(),
            cellId: this.id
        });
        placeSteamboat.execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().saveLocalState();
        this.cancelPreview();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Cell);

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_actions_startCompany__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_common_model_serializable__ = __webpack_require__(3);








class Company extends __WEBPACK_IMPORTED_MODULE_6_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        super();
        definition = definition || {};
        this.id = definition.id;
        this.name = definition.name || 'Anonymous';
        this.nickname = definition.nickname || 'Anon';
        this.type = definition.type;
        this.homeCellId = definition.homeCellId;

        this.certificates = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.certificates);
        this.shares = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(this.certificates(), 'shares');
        });
        this.cash = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.cash || 0);
        this.tokens = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.tokens || 0);
        this.startTokens = definition.startTokens;
        this.privates = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.privates || []);
        this.trains = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.trains || []);
        this.president = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.president);
        this.parPriceIndex = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.parPriceIndex || 0);
        this.priceIndex = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.priceIndex || 0);
        this.price = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].price(this.priceIndex() || 0);
        });
        this.lastRun = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.lastRun || 0);
        this.opened = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.opened || false);
        this.closed = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.closed || false);
        this.operated = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.operated || false);
        this.routes = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.routes || []);
    }

    addCash(amount) {
        this.cash(this.cash() + amount);
    }

    removeCash(amount) {
        this.cash(this.cash() - amount);
    }

    start(state, playerId) {
        new __WEBPACK_IMPORTED_MODULE_4_1846_actions_startCompany__["a" /* default */]({ playerId, companyId: this.id, startIndex: 7 }).execute(state);
    }

    addCerts(certs) {
        this.certificates.push.apply(this.certificates, certs);
    }

    removeCerts(count) {
        return this.certificates.splice(0, count);
    }

    numCanIssue() {
        const numBankShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.numSharesOwnedOfCompany(this.id);
        const playerShares = 10 - this.shares() - numBankShares;
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.max([0, __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.min([this.shares(), playerShares - numBankShares])]);
    }

    cashFromForcedIssues(numIssued) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.range(1, numIssued + 1), (sum, value) => {
            return sum + __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].leftPrice(this.priceIndex(), value);
        }, 0);
    }

    getPrivates() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.privates()).map(cert => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(cert.companyId)).reject(company => company.closed()).sortBy('name').value();
    }

    hasPrivate(id) {
        const privateCert = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.privates(), cert => cert.companyId === id);
        if (!privateCert) {
            return false;
        }

        const privateCo = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(privateCert.companyId);
        return !privateCo.closed() || privateCo.id === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MAIL_CONTRACT;
    }

    addPrivate(cert) {
        this.privates.push(cert);
    }

    removePrivate(id) {
        const privates = this.privates.remove(cert => cert.companyId === id);
        return privates.length > 0 ? privates[0] : null;
    }

    addTrain(train) {
        this.trains.push(train);
    }

    addTrains(trains) {
        this.trains.push.apply(this.trains, trains);
    }

    getTrainById(trainId) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.trains(), train => train.id === trainId);
    }

    removeTrainById(trainId) {
        const removed = this.trains.remove(train => train.id === trainId);
        return removed.length > 0 ? removed[0] : null;
    }

    removeTrainsById(trainIds) {
        return this.trains.remove(train => __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(trainIds, train.id) >= 0);
    }

    updateTrains(trains) {
        this.trains.valueWillMutate();
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(trains, train => {
            const index = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.findIndex(this.trains(), oldTrain => oldTrain.id === train.id);
            if (index >= 0) {
                this.trains()[index] = train;
            }
        });
        this.trains.valueHasMutated();
    }

    numTrainsForLimit() {
        return this.getNonPhasedOutTrains().length;
    }

    hasTooManyTrains() {
        return this.numTrainsForLimit() > __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().trainLimit();
    }

    getRunnableTrains() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(this.trains(), train => !train.purchased && !train.rusted());
    }

    getNonPhasedOutTrains() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.trains()).filter(train => !train.phasedOut() && !train.rusted()).sortBy(train => train.type).value();
    }

    getPhasedOutTrains() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(this.trains(), train => train.phasedOut() && !train.rusted());
    }

    getNonRustedTrains() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(this.trains(), train => !train.rusted());
    }

    getAvailableRouteColor() {
        const currentColors = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(this.getNonRustedTrains(), train => train.route.color);
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.range(1, 5)).difference(currentColors).first();
    }

    calculateRevenue() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(this.trains(), train => train.route.revenue());
    }

    useToken() {
        this.tokens(this.tokens() - 1);
    }

    returnToken() {
        this.tokens(this.tokens() + 1);
    }

    close() {
        // remove from operating order
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        const playerCerts = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().players()).map(player => {
            return [player.id, player.removeAllCertsForCompany(this.id)];
        }).fromPairs().value();

        const bankCerts = state.bank.removeAllCertsForCompany(this.id);

        const tokens = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().tilesByCellId).map(tile => {
            if (tile.hasTokenForCompany(this.id)) {
                return [tile.id, tile.removeToken(this.id)];
            }
            return null;
        }).compact().fromPairs().value();
        const reservedTokens = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().tilesByCellId).map(tile => {
            if (tile.hasReservedTokenForCompany(this.id)) {
                return [tile.id, tile.removeReservedToken(this.id)];
            }
            return null;
        }).compact().fromPairs().value();

        const cash = this.cash();
        state.bank.addCash(cash);
        this.cash(0);

        let meatTileId = null;
        if (this.hasPrivate(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MEAT_PACKING_COMPANY)) {
            const tile = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().tilesByCellId, tile => {
                return tile.hasMeat();
            });
            tile.hasMeat(false);
            meatTileId = tile.id;
        }

        let steamboatTileId = null;
        if (this.hasPrivate(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY)) {
            const tile = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().tilesByCellId, tile => {
                return tile.hasSteamboat();
            });
            tile.hasSteamboat(false);
            steamboatTileId = tile.id;
        }

        this.closed(true);

        return {
            id: this.id,
            playerCerts,
            bankCerts,
            tokens,
            reservedTokens,
            meatTileId,
            steamboatTileId,
            cash
        };
    }

    unclose(closeData) {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(closeData.playerCerts, (certs, playerId) => {
            const player = state.playersById()[playerId];
            player.addCerts(certs);
        });

        state.bank.addCerts(closeData.bankCerts);
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().tilesByCellId, tile => {
            const token = closeData.tokens[tile.id];
            if (token) {
                const splitToken = token.split('|');
                tile.addToken(splitToken[1], splitToken[0]);
            }
            const reservedToken = closeData.reservedTokens[tile.id];
            if (reservedToken) {
                const splitToken = reservedToken.split('|');
                tile.addReservedToken(splitToken[1], splitToken[0]);
            }

            if (closeData.meatTileId === tile.id) {
                tile.hasMeat(true);
            }
            if (closeData.steamboatTileId === tile.id) {
                tile.hasSteamboat(true);
            }
        });
        state.bank.removeCash(closeData.cash);
        this.cash(closeData.cash);
        this.closed(false);
    }

    phaseOut(phase) {
        const phasedOutTrains = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getTrainsForPhase(phase);
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(this.trains(), train => {
            if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(phasedOutTrains, train.type) >= 0) {
                train.phasedOut(true);
            }
        });
    }

    unphaseOut(phase) {
        const phasedOutTrains = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getTrainsForPhase(phase);
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(this.trains(), train => {
            if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(phasedOutTrains, train.type) >= 0) {
                train.phasedOut(false);
            }
        });
    }

    rust(phase) {
        const rustedTrains = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getTrainsForPhase(phase);
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(this.trains(), train => {
            if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(rustedTrains, train.type) >= 0) {
                train.rusted(true);
            }
        });
    }

    unrust(phase) {
        const rustedTrains = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getTrainsForPhase(phase);
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(this.trains(), train => {
            if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(rustedTrains, train.type) >= 0 && train.phasedOut(true)) {
                train.rusted(false);
            }
        });
    }

}

Company.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Company);

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_short_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_model_route__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_trainDefinitions__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_knockout__);






class Train extends __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__["a" /* default */] {
    constructor(data) {
        super();
        data = data || {};
        this.id = data.id || __WEBPACK_IMPORTED_MODULE_0_short_uuid___default()().new();
        this.type = data.type;
        this.lastRoute = data.lastRoute;
        this.route = data.route || new __WEBPACK_IMPORTED_MODULE_2_common_model_route__["a" /* default */]({ trainType: this.type, color: 1, companyId: data.companyId });
        this.purchased = data.purchased;
        this.phasedOut = __WEBPACK_IMPORTED_MODULE_4_knockout___default.a.observable(data.phasedOut);
        this.rusted = __WEBPACK_IMPORTED_MODULE_4_knockout___default.a.observable(data.rusted);
    }
    getName() {
        return __WEBPACK_IMPORTED_MODULE_3_1846_config_trainDefinitions__["a" /* default */][this.type].name;
    }
}

Train.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Train);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.2.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( ">tbody", elem )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with computed style
	var valueIsBorderBox,
		styles = getStyles( elem ),
		val = curCSS( elem, name, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test( val ) ) {
		return val;
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = isBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ name ] );

	// Fall back to offsetWidth/Height when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	if ( val === "auto" ) {
		val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var doc, docElem, rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		doc = elem.ownerDocument;
		docElem = doc.documentElement;
		win = doc.defaultView;

		return {
			top: rect.top + win.pageYOffset - docElem.clientTop,
			left: rect.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( jQuery.isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_bootstrap__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_bootstrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bootstrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_bootstrap_dist_css_bootstrap_min_css__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_bootstrap_dist_css_bootstrap_min_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_bootstrap_dist_css_bootstrap_min_css__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_ui_dashboard__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_knockout__);




__webpack_require__(91);

const dashboard = new __WEBPACK_IMPORTED_MODULE_2_common_ui_dashboard__["a" /* default */]();
__WEBPACK_IMPORTED_MODULE_3_knockout___default.a.applyBindings(dashboard);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var Converter = __webpack_require__(35);

/**
 * Function get source and destination alphabet and return convert function
 *
 * @param {string|Array} srcAlphabet
 * @param {string|Array} dstAlphabet
 *
 * @returns {function(number|Array)}
 */
function anyBase(srcAlphabet, dstAlphabet) {
    var converter = new Converter(srcAlphabet, dstAlphabet);
    /**
     * Convert function
     *
     * @param {string|Array} number
     *
     * @return {string|Array} number
     */
    return function (number) {
        return converter.convert(number);
    }
};

anyBase.BIN = '01';
anyBase.OCT = '01234567';
anyBase.DEC = '0123456789';
anyBase.HEX = '0123456789abcdef';

module.exports = anyBase;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Converter
 *
 * @param {string|Array} srcAlphabet
 * @param {string|Array} dstAlphabet
 * @constructor
 */
function Converter(srcAlphabet, dstAlphabet) {
    if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {
        throw new Error('Bad alphabet');
    }
    this.srcAlphabet = srcAlphabet;
    this.dstAlphabet = dstAlphabet;
}

/**
 * Convert number from source alphabet to destination alphabet
 *
 * @param {string|Array} number - number represented as a string or array of points
 *
 * @returns {string|Array}
 */
Converter.prototype.convert = function(number) {
    var i, divide, newlen,
    numberMap = {},
    fromBase = this.srcAlphabet.length,
    toBase = this.dstAlphabet.length,
    length = number.length,
    result = typeof number === 'string' ? '' : [];

    if (!this.isValid(number)) {
        throw new Error('Number "' + number + '" contains of non-alphabetic digits (' + this.srcAlphabet + ')');
    }

    if (this.srcAlphabet === this.dstAlphabet) {
        return number;
    }

    for (i = 0; i < length; i++) {
        numberMap[i] = this.srcAlphabet.indexOf(number[i]);
    }
    do {
        divide = 0;
        newlen = 0;
        for (i = 0; i < length; i++) {
            divide = divide * fromBase + numberMap[i];
            if (divide >= toBase) {
                numberMap[newlen++] = parseInt(divide / toBase, 10);
                divide = divide % toBase;
            } else if (newlen > 0) {
                numberMap[newlen++] = 0;
            }
        }
        length = newlen;
        result = this.dstAlphabet.slice(divide, divide + 1).concat(result);
    } while (newlen !== 0);

    return result;
};

/**
 * Valid number with source alphabet
 *
 * @param {number} number
 *
 * @returns {boolean}
 */
Converter.prototype.isValid = function(number) {
    var i = 0;
    for (; i < number.length; ++i) {
        if (this.srcAlphabet.indexOf(number[i]) === -1) {
            return false;
        }
    }
    return true;
};

module.exports = Converter;

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



class AddToken extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.cellId = args.cellId;
        this.cityId = args.cityId;
        this.companyId = args.companyId;
        this.cost = args.cost;
        this.reserved = args.reserved;
        this.oldRoutes = args.oldRoutes || {};
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        const tile = state.tilesByCellId[this.cellId];
        tile.addToken(this.companyId, this.cityId);
        if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(tile.getReservedTokensForCity(this.cityId), reservedToken => this.companyId === reservedToken)) {
            this.reserved = true;
            tile.removeReservedToken(this.companyId);
        }
        company.useToken();
        company.removeCash(this.cost);
        state.bank.addCash(this.cost);

        this.updateRoutes(state);
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        company.returnToken();
        const tile = state.tilesByCellId[this.cellId];
        tile.removeToken(this.companyId, this.cityId);
        if (this.reserved) {
            tile.addReservedToken(this.companyId);
        }
        company.addCash(this.cost);
        state.bank.removeCash(this.cost);
        this.undoRoutes(state);
    }

    updateRoutes(state) {
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(state.allCompaniesById(), company => {
            if (company.closed()) {
                return;
            }
            __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(company.getNonRustedTrains(), train => {
                if (!train.route.isValid()) {
                    this.oldRoutes[train.route.id] = train.route.clone();
                    train.route.clear();
                }
            });
        });
    }

    undoRoutes(state) {
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(state.allCompaniesById(), company => {
            if (company.closed()) {
                return;
            }
            __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(company.getNonRustedTrains(), train => {
                const oldRoute = this.oldRoutes[train.route.id];
                if (oldRoute) {
                    train.route = oldRoute.clone();
                }
            });
        });
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return company.nickname + ' tokened ' + this.cellId + ' for $' + this.cost;
    }
}

AddToken.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (AddToken);

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);





class AdjustStockPrices extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.oldStockboardCompanies = args.oldStockboardCompanies;
    }

    doExecute(state) {
        this.oldStockboardCompanies = state.stockBoard.getPopulatedStockboardCompanies;
        const operatingOrder = state.stockBoard.getOperatingOrder();
        // Handle company closing
        __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(operatingOrder, companyId => {
            const company = state.getCompany(companyId);
            if (!company.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].PUBLIC) {
                return;
            }

            if (!company.opened()) {
                return;
            }

            if (state.bank.numSharesOwnedOfCompany(company.id) > 0) {
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_2_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex()));
            } else if (company.shares() === 0) {
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_2_1846_config_prices__["a" /* default */].rightIndex(company.priceIndex()));
            }
        });
    }

    doUndo(state) {
        __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(state.publicCompanies, company => {
            if (!company.opened()) {
                return;
            }

            if (state.bank.numSharesOwnedOfCompany(company.id) > 0) {
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_2_1846_config_prices__["a" /* default */].rightIndex(company.priceIndex()));
            } else if (company.shares() === 0) {
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_2_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex()));
            }
        });
        state.stockboard.restoreStockboardCompanies(this.oldStockboardCompanies);
    }

    summary(state) {
        return 'adjusted prices';
    }
}

AdjustStockPrices.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (AdjustStockPrices);

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);





class BuyPrivate extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.privateId = args.privateId;
        this.companyId = args.companyId;
        this.price = args.price;
        this.addedToken = args.addedToken;
        this.ignoreToken = args.ignoreToken;
        this.oldBoatCo = args.oldBoatCo;
    }

    doExecute(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        const privateCompany = state.getCompany(this.privateId);

        if (privateCompany.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].INDEPENDANT) {
            company.addCash(privateCompany.cash());
            privateCompany.closed(true);
            const train = privateCompany.trains()[0].clone();
            train.route.color = company.getAvailableRouteColor();
            train.route.companyId = company.id;
            train.purchased = true;
            train.route.clear();
            company.addTrain(train);
            const cellId = privateCompany.id === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN ? 'C15' : 'G9';
            const tile = state.tilesByCellId[cellId];
            tile.removeToken(privateCompany.id);
            if (!tile.hasTokenForCompany(this.companyId)) {
                tile.addToken(this.companyId);
                this.addedToken = true;
            }
        }

        if (this.privateId === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].CHICAGO_WESTERN_INDIANA) {
            const tile = state.tilesByCellId['D6'];
            tile.removeReservedToken(this.privateId, 9);
            if (!tile.hasTokenForCompany(this.companyId) && !this.ignoreToken) {
                tile.addToken(this.companyId, 9);
                this.addedToken = true;
            }
        }

        if (this.privateId === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY) {
            __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(state.tilesByCellId, tile => {
                if (tile.hasSteamboat()) {
                    this.oldBoatCo = tile.hasSteamboat();
                    tile.hasSteamboat(this.companyId);
                    return false;
                }
            });
        }

        const cert = player.removePrivate(this.privateId);
        company.addPrivate(cert);
        company.removeCash(this.price);
        player.addCash(this.price);
    }

    doUndo(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        const privateCompany = state.getCompany(this.privateId);

        if (privateCompany.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].INDEPENDANT) {
            company.removeCash(privateCompany.cash());
            privateCompany.closed(false);
            company.removeTrainById(privateCompany.trains()[0].id);
            const cellId = privateCompany.id === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN ? 'C15' : 'G9';
            const tile = state.tilesByCellId[cellId];
            if (this.addedToken) {
                tile.removeToken(this.companyId);
            }
            tile.addToken(privateCompany.id);
        }

        if (this.privateId === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].CHICAGO_WESTERN_INDIANA) {
            const tile = state.tilesByCellId['D6'];
            if (this.addedToken) {
                tile.removeToken(this.companyId, 9);
            }
            tile.addReservedToken(this.privateId);
        }

        if (this.privateId === __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY && this.oldBoatCo) {
            __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(state.tilesByCellId, tile => {
                if (tile.hasSteamboat()) {
                    tile.hasSteamboat(this.oldBoatCo);
                    return false;
                }
            });
        }

        const cert = company.removePrivate(this.privateId);
        player.addCert(cert);
        player.removeCash(this.price);
        company.addCash(this.price);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const privateCompany = state.getCompany(this.privateId);
        return company.nickname + ' purchased ' + privateCompany.name + ' for $' + this.price;
    }

    confirmation(state) {
        const privateCompany = state.getCompany(this.privateId);
        return 'Confirm purchase of ' + privateCompany.name + ' for $' + this.price;
    }
}

BuyPrivate.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (BuyPrivate);

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);



class BuyShare extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.companyId = args.companyId;
        this.treasury = args.treasury;
        this.startIndex = args.startIndex;
        this.firstPassIndex = args.firstPassIndex;
        this.oldPresidentId = args.oldPresidentId;
    }

    doExecute(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        this.startIndex = company.priceIndex();
        this.firstPassIndex = state.firstPassIndex();

        // validate things
        // cash
        // max ownership
        // cert limit
        // source

        const cash = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(company.priceIndex());
        player.removeCash(cash);

        let cert = null;
        if (this.treasury) {
            company.cash(company.cash() + cash);
            cert = company.certificates.pop();
        } else {
            state.bank.cash(state.bank.cash() - cash);
            // Only pres share in bank, buying from bank
            if (!company.president() && player.sharesPerCompany()[this.companyId] === 1 && state.bank.numSharesOwnedOfCompany(this.companyId) === 2) {
                const nonPresidentCerts = player.removeNonPresidentCertsForCompany(1, this.companyId);
                cert = state.bank.removePresidentCertForCompany(this.companyId);
                state.bank.addCerts(nonPresidentCerts);
                this.oldPresidentId = 'bank';
                company.president(player.id);
            } else {
                cert = state.bank.removeNonPresidentCertsForCompany(1, this.companyId)[0];
            }
        }
        player.certificates.push(cert);

        const currentPresident = !company.president() ? state.bank : state.playersById()[company.president()];
        if (!company.president() && player.sharesPerCompany()[this.companyId] === 2 || company.president() && currentPresident.sharesPerCompany()[this.companyId] < player.sharesPerCompany()[this.companyId]) {
            const nonPresidentCerts = player.removeNonPresidentCertsForCompany(2, this.companyId);
            const presidentCert = currentPresident.removePresidentCertForCompany(this.companyId);

            player.addCert(presidentCert);
            currentPresident.addCerts(nonPresidentCerts);

            this.oldPresidentId = !company.president() ? 'bank' : currentPresident.id;
            company.president(player.id);
        }

        state.firstPassIndex(null);
    }

    doUndo(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        const cash = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(company.priceIndex());

        state.firstPassIndex(this.firstPassIndex);

        // Was only pres share in bank, buying from bank
        if (this.oldPresidentId === 'bank' && !this.treasury && state.bank.numSharesOwnedOfCompany(this.companyId) === 1) {
            state.bank.removeCash(cash);
            player.addCash(cash);
            const presidentCert = player.removePresidentCertForCompany(this.companyId);
            const nonPresidentCerts = state.bank.removeNonPresidentCertsForCompany(1, this.companyId);
            state.bank.addCert(presidentCert);
            player.addCerts(nonPresidentCerts);
            company.president(null);
            return;
        }

        if (this.oldPresidentId) {
            const oldPresident = this.oldPresidentId === 'bank' ? state.bank : state.playersById()[this.oldPresidentId];
            const nonPresidentCerts = oldPresident.removeNonPresidentCertsForCompany(2, this.companyId);
            const presidentCert = player.removePresidentCertForCompany(this.companyId);

            oldPresident.addCert(presidentCert);
            player.addCerts(nonPresidentCerts);

            company.president(this.oldPresidentId === 'bank' ? null : oldPresident.id);
        }

        const cert = player.removeNonPresidentCertsForCompany(1, this.companyId)[0];
        if (this.treasury) {
            company.removeCash(cash);
            company.certificates.push(cert);
        } else {
            state.bank.removeCash(cash);
            state.bank.certificates.push(cert);
        }
        player.addCash(cash);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return 'Bought 1 ' + company.nickname + ' for $' + __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex) + ' from ' + (this.treasury ? 'the treasury' : 'the market');
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        const startIndex = company.priceIndex();
        return 'Confirm Buy 1 ' + company.nickname + ' for $' + __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(startIndex) + ' from ' + (this.treasury ? 'the treasury' : 'the market');
    }
}

BuyShare.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (BuyShare);

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_train__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash__);








const NumberWords = ['zero', 'one', 'two', 'three', 'four'];

class BuyTrains extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.companyId = args.companyId;
        this.playerId = args.playerId;
        this.trains = args.trains;
        this.source = args.source;
        this.trainIds = args.trainIds || [];
        this.oldPhase = args.oldPhase;
        this.closedPrivatesData = args.closedPrivatesData;
        this.meatTileId = args.meatTileId;
        this.steamboatTileId = args.steamboatTileId;
        this.cost = args.cost;
        this.forced = args.forced;
        this.numIssued = args.numIssued;
        this.stockSales = args.stockSales;
        this.closedCompanies = args.closedCompanies || {};
        this.presidentChanges = args.presidentChanges || {};
        this.oldCompanyCash = args.oldCompanyCash;
        this.oldCompanyPriceIndices = args.oldCompanyPriceIndices || {};
        this.oldPlayerCerts = args.oldPlayerCerts || [];
        this.oldPlayerCash = args.oldPlayerCash;
        this.oldBankCash = args.oldBankCash;
        this.oldReservedTokens = args.oldReservedTokens || {};
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        if (this.forced) {
            const player = state.playersById()[this.playerId];
            const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][this.trains[0]];
            const trainType = this.trains[0];
            const cost = trainDefinition.cost;
            this.oldCompanyCash = company.cash();
            this.oldCompanyPriceIndices[this.companyId] = company.priceIndex();
            this.oldPlayerCash = player.cash();
            this.oldBankCash = state.bank.cash();

            if (this.numIssued) {
                const certs = company.removeCerts(this.numIssued);
                state.bank.addCerts(certs);
                company.addCash(company.cashFromForcedIssues(this.numIssued));
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex(), this.numIssued));
            }

            if (this.stockSales) {
                __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.stockSales, (amount, companyId) => {
                    const ownedCompany = state.getCompany(companyId);
                    const isPresident = player.isPresidentOfCompany(companyId);
                    const closing = isPresident && __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex()) === 0;

                    if (closing) {
                        this.closedCompanies[companyId] = ownedCompany.close();
                    } else {
                        const cashForShares = ownedCompany.price() * amount;
                        player.addCash(cashForShares);
                        state.bank.removeCash(cashForShares);

                        if (isPresident) {
                            if (player.sharesPerCompany()[this.companyId] - amount < 2) {
                                const target = __WEBPACK_IMPORTED_MODULE_6_lodash___default()(state.players()).filter(otherPlayer => player.id !== otherPlayer.id && otherPlayer.sharesPerCompany()[companyId] >= 2).sortBy(otherPlayer => {
                                    return otherPlayer.order() > player.order() ? otherPlayer.order() : otherPlayer.order() + 10;
                                }).first();

                                if (target) {
                                    const nonPresidentCerts = target.removeNonPresidentCertsForCompany(2, companyId);
                                    const presidentCert = player.removePresidentCertForCompany(companyId);

                                    target.addCert(presidentCert);
                                    player.addCerts(nonPresidentCerts);
                                    ownedCompany.president(target.id);
                                    this.presidentChanges[companyId] = target.id;
                                }
                            }

                            if (companyId !== this.companyId) {
                                this.oldCompanyPriceIndices[companyId] = ownedCompany.priceIndex();
                            }

                            ownedCompany.priceIndex(__WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].leftIndex(ownedCompany.priceIndex()));
                        }

                        const certs = player.removeNonPresidentCertsForCompany(amount, companyId);
                        this.oldPlayerCerts.push.apply(this.oldPlayerCerts, __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(certs, 'id'));
                        state.bank.addCerts(certs);
                    }
                });
            }

            const playerCashNeeded = cost - company.cash();
            if (playerCashNeeded) {
                player.removeCash(playerCashNeeded);
                company.addCash(playerCashNeeded);
            }

            company.removeCash(cost);
            state.bank.addCash(cost);
            state.bank.removeTrains(trainType, 1);

            const newTrain = new __WEBPACK_IMPORTED_MODULE_1_common_model_train__["a" /* default */]({ type: trainType });
            newTrain.route.color = company.getAvailableRouteColor();
            newTrain.route.companyId = company.id;
            newTrain.purchased = true;
            company.addTrain(newTrain);
            this.trainIds.push(newTrain.id);

            const newPhase = this.getNewPhase(state, trainType);
            if (newPhase) {
                this.oldPhase = state.currentPhaseId();
                state.currentPhaseId(newPhase);
                this.doPhaseChange(state, newPhase);
            }
        } else if (this.source === 'bank') {
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.trains, (amount, type) => {
                const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][type];
                const cost = amount * trainDefinition.cost;
                company.removeCash(cost);
                state.bank.addCash(cost);
                state.bank.removeTrains(type, amount);
                const newTrains = __WEBPACK_IMPORTED_MODULE_6_lodash___default()(__WEBPACK_IMPORTED_MODULE_6_lodash___default.a.range(0, amount)).map(value => new __WEBPACK_IMPORTED_MODULE_1_common_model_train__["a" /* default */]({ type })).value();
                __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(newTrains, newTrain => {
                    newTrain.route.color = company.getAvailableRouteColor();
                    newTrain.route.companyId = company.id;
                    newTrain.purchased = true;
                    company.addTrain(newTrain);
                    this.trainIds.push(newTrain.id);
                });

                const newPhase = this.getNewPhase(state, type);
                if (newPhase) {
                    this.oldPhase = state.currentPhaseId();
                    state.currentPhaseId(newPhase);
                    this.doPhaseChange(state, newPhase);
                }
            });
        } else {
            const sellingCompany = state.getCompany(this.source);
            this.trains = __WEBPACK_IMPORTED_MODULE_6_lodash___default()(sellingCompany.removeTrainsById(this.trainIds)).map(train => train.clone()).sortBy(train => train.type).value();
            const trainsToAdd = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(this.trains, train => {
                const newTrain = train.clone();
                newTrain.route.color = company.getAvailableRouteColor();
                newTrain.route.companyId = company.id;
                newTrain.route.clear();
                newTrain.purchased = true;
                return newTrain;
            });
            company.addTrains(trainsToAdd);
            sellingCompany.addCash(this.cost);
            company.removeCash(this.cost);
        }
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        if (this.forced) {
            const player = state.playersById()[this.playerId];
            const trainType = this.trains[0];

            state.bank.addTrains(trainType, 1);
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.trainIds, id => {
                company.removeTrainById(id);
            });

            if (this.oldPhase) {
                const currentPhase = state.currentPhaseId();
                state.currentPhaseId(this.oldPhase);
                this.undoPhaseChange(state, currentPhase);
            }

            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.stockSales, (amount, companyId) => {
                const certs = state.bank.removeNonPresidentCertsForCompany(amount, companyId);
                player.addCerts(certs);
            });

            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.presidentChanges, (otherPlayerId, companyId) => {
                if (otherPlayerId) {
                    const otherPresident = state.playersById()[otherPlayerId];
                    const nonPresidentCerts = player.removeNonPresidentCertsForCompany(2, companyId);
                    const presidentCert = otherPresident.removePresidentCertForCompany(companyId);

                    player.addCert(presidentCert);
                    otherPresident.addCerts(nonPresidentCerts);
                }
                company.president(player.id);
            });

            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.closedCompanies, (closeData, companyId) => {
                const closedCompany = state.getCompany(companyId);
                closedCompany.unclose(closeData);
            });

            if (this.numIssued) {
                const certs = state.bank.removeNonPresidentCertsForCompany(this.numIssued, this.companyId);
                company.addCerts(certs);
            }

            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.oldCompanyPriceIndices, (index, companyId) => {
                const otherCompany = state.getCompany(companyId);
                otherCompany.priceIndex(index);
            });

            player.cash(this.oldPlayerCash);
            company.cash(this.oldCompanyCash);
            state.bank.cash(this.oldBankCash);
        } else if (this.source === 'bank') {
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.trains, (amount, type) => {
                const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][type];
                const cost = amount * trainDefinition.cost;
                company.addCash(cost);
                state.bank.removeCash(cost);
                state.bank.addTrains(type, amount);
                __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.trainIds, id => {
                    company.removeTrainById(id);
                });
            });

            if (this.oldPhase) {
                const currentPhase = state.currentPhaseId();
                state.currentPhaseId(this.oldPhase);
                this.undoPhaseChange(state, currentPhase);
            }
        } else {
            const sellingCompany = state.getCompany(this.source);
            company.removeTrainsById(this.trainIds);
            sellingCompany.addTrains(__WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(this.trains, train => train.clone()));
            sellingCompany.removeCash(this.cost);
            company.addCash(this.cost);
        }
    }

    doPhaseChange(state, newPhase) {

        if (newPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III) {
            const closedPrivatesData = [];
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.publicCompanies, company => {
                company.phaseOut(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I);
            });
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.privateCompanies, company => {
                if (!company.closed()) {
                    closedPrivatesData.push(company.close());
                }
            });
            this.closedPrivatesData = closedPrivatesData;
            console.log('setting train limit to 3');
            state.trainLimit(3);
            this.recalculateRouteRevenue(state);
        } else if (newPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV) {
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.publicCompanies, company => {
                company.phaseOut(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II);
                company.rust(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I);
            });
            const meatTile = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.find(state.tilesByCellId, tile => {
                return tile.hasMeat();
            });

            if (meatTile) {
                meatTile.hasMeat(false);
                this.meatTileId = meatTile.id;
            }
            const steamBoatTile = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.find(state.tilesByCellId, tile => {
                return tile.hasSteamboat();
            });

            if (steamBoatTile) {
                steamBoatTile.hasSteamboat(false);
                this.steamboatTileId = steamBoatTile.id;
            }
            state.trainLimit(2);

            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.tilesByCellId, tile => {
                if (tile.reservedTokens().length > 0) {
                    this.oldReservedTokens[tile.id] = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.clone(tile.reservedTokens());
                    tile.reservedTokens([]);
                }
            });
        }
    }

    undoPhaseChange(state, newPhase) {
        if (newPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III) {
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.publicCompanies, company => {
                company.unphaseOut(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I);
            });
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.closedPrivatesData || [], closeData => {
                const company = state.getCompany(closeData.id);
                company.unclose(closeData);
            });
            console.log('setting train limit to 4');
            state.trainLimit(4);
            this.recalculateRouteRevenue(state);
        } else if (newPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV) {
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.publicCompanies, company => {
                company.unphaseOut(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II);
                company.unrust(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I);
            });

            if (this.meatTileId) {
                const tile = state.tilesByCellId[this.meatTileId];
                tile.hasMeat(true);
            }

            if (this.steamboatTileId) {
                const tile = state.tilesByCellId[this.steamboatTileId];
                tile.hasSteamboat(true);
            }
            state.trainLimit(3);

            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.oldReservedTokens, (tokens, tileId) => {
                const tile = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.find(state.tilesByCellId, tile => tile.id === tileId);
                tile.reservedTokens(__WEBPACK_IMPORTED_MODULE_6_lodash___default.a.clone(tokens));
            });
        }
    }

    recalculateRouteRevenue(state) {
        __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.allCompaniesById(), company => {
            if (company.closed()) {
                return;
            }
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(company.getNonRustedTrains(), train => {
                train.route.calculateRevenue();
            });
        });
    }

    getNewPhase(state, type) {
        const currentPhase = state.currentPhaseId();
        if (currentPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I && (type === __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__["a" /* default */].TRAIN_3_5 || type === __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__["a" /* default */].TRAIN_4)) {
            return __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II;
        } else if (currentPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II && (type === __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__["a" /* default */].TRAIN_4_6 || type === __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__["a" /* default */].TRAIN_5)) {
            return __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III;
        } else if (currentPhase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III && (type === __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__["a" /* default */].TRAIN_6 || type === __WEBPACK_IMPORTED_MODULE_3_1846_config_trainIds__["a" /* default */].TRAIN_7_8)) {
            return __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV;
        }
        return null;
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const descData = this.getTrainDescriptionsAndCost(state, true);
        const source = this.source === 'bank' ? 'the bank' : state.getCompany(this.source).nickname;
        const suffix = this.getSuffix(company, true);
        return company.nickname + ' bought ' + __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.join(descData.desc, ', ') + ' from ' + source + ' for $' + descData.cost + suffix;
    }

    confirmation(state) {
        const prefix = 'Confirm buy ';
        const company = state.getCompany(this.companyId);
        const descData = this.getTrainDescriptionsAndCost(state);
        const source = this.source === 'bank' ? 'the bank' : state.getCompany(this.source).nickname;
        const suffix = this.getSuffix(company, true);
        return prefix + __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.join(descData.desc, ', ') + ' from ' + source + ' for $' + descData.cost + suffix;
    }

    getSuffix(company, summary) {
        let text = '';
        if (!this.forced) {
            return text;
        }
        if (this.numIssued > 0) {
            text += (summary ? ' issuing ' : ' issued ') + this.numIssued + ' share' + (this.numIssued === 1 ? '' : 's') + ' - stock drops to $' + __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].leftPrice(company.priceIndex(), this.numIssued);
        }
        return text;
    }

    getTrainDescriptionsAndCost(state, summary) {
        const result = {
            desc: [],
            cost: 0
        };
        if (this.forced) {
            const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][this.trains[0]];
            result.desc = ['a ' + trainDefinition.name + 'T'];
            result.cost = trainDefinition.cost;
        } else if (this.source === 'bank') {
            const data = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.reduce(this.trains, (accumulator, amount, type) => {
                const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][type];
                const cost = amount * trainDefinition.cost;
                accumulator.desc.push(NumberWords[amount] + ' ' + trainDefinition.name + 'T');
                accumulator.cost += cost;
                return accumulator;
            }, { desc: [], cost: 0 });
            result.desc = data.desc;
            result.cost = data.cost;
        } else {
            if (!summary) {
                const sellingCompany = state.getCompany(this.source);
                result.desc = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(this.trainIds, trainId => {
                    const train = sellingCompany.getTrainById(trainId);
                    if (!train) {
                        return '';
                    }
                    const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][train.type];
                    return trainDefinition.name + 'T';
                });
            } else {
                result.desc = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(this.trains, train => {
                    const trainDefinition = __WEBPACK_IMPORTED_MODULE_2_1846_config_trainDefinitions__["a" /* default */][train.type];
                    return trainDefinition.name + 'T';
                });
            }
            result.cost = this.cost;
        }
        return result;
    }
}

BuyTrains.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (BuyTrains);

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_game_sequence__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);





class DeclareBankruptcy extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.companyId = args.companyId;
        this.playerId = args.playerId;
        this.numIssued = args.numIssued;
        this.oldCompanyPriceIndices = args.oldCompanyPriceIndices || {};
        this.oldCompanyCash = args.oldCompanyCash;
        this.oldPlayerCash = args.oldPlayerCash;
        this.oldPlayerCerts = args.oldPlayerCerts || [];
        this.oldBankCash = args.oldBankCash;
        this.closedCompanies = args.closedCompanies || {};
        this.presidentChanges = args.presidentChanges || {};
        this.oldPriorityDealIndex = args.oldPriorityDealIndex;

        // president changes
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        const player = state.playersById()[this.playerId];
        this.oldCompanyCash = company.cash();
        this.oldCompanyPriceIndices[this.companyId] = company.priceIndex();
        this.oldPlayerCash = player.cash();
        this.oldBankCash = state.bank.cash();

        // Force issue shares... This can't close the company because we wouldn't allow bankruptcy if it was possible
        this.numIssued = company.numCanIssue();
        const certs = company.removeCerts(this.numIssued);
        state.bank.addCerts(certs);
        company.addCash(company.cashFromForcedIssues(this.numIssued));
        company.priceIndex(__WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex(), this.numIssued));

        // Sell off all player shares
        __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(player.ownedCompanyIds(), companyId => {

            const ownedCompany = state.getCompany(companyId);
            const isPresident = player.isPresidentOfCompany(companyId);
            const closing = isPresident && __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex()) === 0;

            if (closing) {
                this.closedCompanies[companyId] = ownedCompany.close();
            } else {
                const numShares = player.numSharesOwnedOfCompany();
                const cashForShares = ownedCompany.price() * numShares;
                player.addCash(cashForShares);
                state.bank.removeCash(cashForShares);

                if (isPresident) {
                    const target = __WEBPACK_IMPORTED_MODULE_3_lodash___default()(state.players()).filter(otherPlayer => player.id !== otherPlayer.id && otherPlayer.sharesPerCompany()[companyId] >= 2).sortBy(otherPlayer => {
                        return otherPlayer.order() > player.order() ? otherPlayer.order() : otherPlayer.order() + 10;
                    }).first();

                    if (target) {
                        const nonPresidentCerts = target.removeNonPresidentCertsForCompany(2, companyId);
                        const presidentCert = player.removePresidentCertForCompany(companyId);

                        target.addCert(presidentCert);
                        player.addCerts(nonPresidentCerts);
                        ownedCompany.president(target.id);
                        this.presidentChanges[companyId] = target.id;
                    } else {
                        ownedCompany.president(null);
                        this.presidentChanges[companyId] = null;
                    }
                    if (companyId !== this.companyId) {
                        this.oldCompanyPriceIndices[companyId] = ownedCompany.priceIndex();
                    }
                    ownedCompany.priceIndex(__WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftIndex(ownedCompany.priceIndex()));
                }

                const certs = player.removeAllCertsForCompany(companyId);
                this.oldPlayerCerts.push.apply(this.oldPlayerCerts, __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.map(certs, 'id'));
                state.bank.addCerts(certs);
            }
        });

        // Put money in company
        company.addCash(player.cash());
        player.cash(0);
        player.bankrupt(true);

        this.oldPriorityDealIndex = state.priorityDealIndex();

        if (state.priorityDealIndex() === state.currentPlayerIndex()) {
            state.priorityDealIndex(__WEBPACK_IMPORTED_MODULE_2_1846_game_sequence__["a" /* default */].nextPlayerIndex(this.oldPriorityDealIndex));
        }
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        const player = state.playersById()[this.playerId];

        state.priorityDealIndex(this.oldPriorityDealIndex);
        player.bankrupt(false);
        player.cash(this.oldPlayerCash);
        company.cash(this.oldCompanyCash);
        state.bank.cash(this.oldBankCash);

        const certs = state.bank.removeCertsById(this.oldPlayerCerts);
        player.addCerts(certs);

        __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(this.presidentChanges, (otherPlayerId, companyId) => {
            if (otherPlayerId) {
                const otherPresident = state.playersById()[otherPlayerId];
                const nonPresidentCerts = player.removeNonPresidentCertsForCompany(2, companyId);
                const presidentCert = otherPresident.removePresidentCertForCompany(companyId);

                player.addCert(presidentCert);
                otherPresident.addCerts(nonPresidentCerts);
            }
            company.president(player.id);
        });

        __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(this.closedCompanies, (closeData, companyId) => {
            const closedCompany = state.getCompany(companyId);
            closedCompany.unclose(closeData);
        });

        if (this.numIssued) {
            const certs = state.bank.removeNonPresidentCertsForCompany(this.numIssued, this.companyId);
            company.addCerts(certs);
        }

        __WEBPACK_IMPORTED_MODULE_3_lodash___default.a.each(this.oldCompanyPriceIndices, (index, companyId) => {
            const otherCompany = state.getCompany(companyId);
            otherCompany.priceIndex(index);
        });
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const player = state.playersById()[this.playerId];
        return player.name() + ' declared bankruptcy';
    }

    confirmation(state) {
        return 'Confirm bankruptcy';
    }
}

DeclareBankruptcy.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (DeclareBankruptcy);

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



class DraftPass extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.privateId = args.privateId;
    }

    doExecute(state) {
        const privateCompany = state.privateCompaniesById()[this.privateId];
        privateCompany.cost -= 10;
    }

    doUndo(state) {}

    summary(state) {
        const privateCompany = state.privateCompaniesById()[this.privateId];
        return 'Passed on ' + privateCompany.name;
    }
}

DraftPass.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (DraftPass);

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);




class DraftPrivate extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.privateId = args.privateId;
        this.offeredIds = args.offeredIds;
    }

    doExecute(state) {
        const player = state.playersById()[this.playerId];
        const privateCompany = state.privateCompaniesById()[this.privateId];
        if (!__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.startsWith(this.privateId, 'pass')) {
            player.cash(player.cash() - privateCompany.cost);
            state.bank.cash(state.bank.cash() + privateCompany.cost);
            player.certificates.push(privateCompany.certificates.pop());

            if (this.privateId === __WEBPACK_IMPORTED_MODULE_1_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN || this.privateId === __WEBPACK_IMPORTED_MODULE_1_1846_config_companyIds__["a" /* default */].BIG_4) {
                privateCompany.president(this.playerId);
            }
        }
        state.undraftedPrivateIds.removeAll(this.offeredIds);
        state.undraftedPrivateIds.push.apply(state.undraftedPrivateIds, __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.shuffle(__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.without(this.offeredIds, this.privateId)));
    }

    doUndo(state) {}

    summary(state) {
        const privateCompany = state.privateCompaniesById()[this.privateId];
        const passed = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.startsWith(this.privateId, 'pass');
        return 'Drafted ' + (passed ? ' Pass card' : privateCompany.name);
    }

}

DraftPrivate.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (DraftPrivate);

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);


class ForceIssueCloesCompany extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.companyId = args.companyId;
        this.playerId = args.playerId;
        this.count = args.count;
        this.closeData = args.closeData;
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        this.closeData = company.close();
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        company.unclose(this.closeData);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return company.nickname + '\'s stock moved to $0 due to force issuing ' + this.count + ' shares for a train buy, closing the company';
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        return 'Confirm company close due to force issuing ' + this.count + ' shares for train buy';
    }
}

ForceIssueCloesCompany.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (ForceIssueCloesCompany);

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);



class IssueShares extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.companyId = args.companyId;
        this.count = args.count;
        this.price = args.price;
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        const index = company.priceIndex();
        this.price = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftPrice(index);

        const cash = this.price * this.count;
        company.addCash(cash);
        state.bank.removeCash(cash);

        const certs = company.removeCerts(this.count);
        state.bank.addCerts(certs);
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);

        const cash = this.price * this.count;
        company.removeCash(cash);
        state.bank.addCash(cash);

        const certs = state.bank.removeNonPresidentCertsForCompany(this.count, this.companyId);
        company.addCerts(certs);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return company.nickname + ' issued ' + this.count + ' shares at $' + this.price;
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        const index = company.priceIndex();
        const price = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftPrice(index);
        return 'Confirm issue ' + this.count + ' shares at $' + price;
    }
}

IssueShares.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (IssueShares);

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_tileColorIds__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);






class LayTrack extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.cellId = args.cellId;
        this.tileId = args.tileId;
        this.position = args.position;
        this.oldTileId = args.oldTileId;
        this.oldTilePosition = args.oldTilePosition;
        this.companyId = args.companyId;
        this.upgrade = args.upgrade;
        this.cost = args.cost;
        this.privateId = args.privateId;
        this.privateDone = args.privateDone;
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        const oldTile = state.tilesByCellId[this.cellId];
        this.oldTileId = oldTile.id;
        this.oldTilePosition = oldTile.position();
        this.upgrade = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.indexOf([__WEBPACK_IMPORTED_MODULE_2_1846_config_tileColorIds__["a" /* default */].YELLOW, __WEBPACK_IMPORTED_MODULE_2_1846_config_tileColorIds__["a" /* default */].GREEN, __WEBPACK_IMPORTED_MODULE_2_1846_config_tileColorIds__["a" /* default */].BROWN], oldTile.colorId) >= 0;
        const newTile = state.manifest.getTile(this.tileId, this.oldTileId);
        newTile.position(this.position);
        oldTile.copyToTile(newTile);
        state.tilesByCellId[this.cellId] = newTile;

        company.removeCash(this.cost);
        state.bank.addCash(this.cost);

        if (this.privateId && this.privateDone) {
            const privateCompany = state.getCompany(this.privateId);
            privateCompany.used(true);
        }

        __WEBPACK_IMPORTED_MODULE_3_common_util_events__["a" /* default */].emit('tileUpdated', this.cellId);
        __WEBPACK_IMPORTED_MODULE_3_common_util_events__["a" /* default */].emit('trackLaid');
        if (this.upgrade) {
            this.upgradeRoutes(state, this.cellId, oldTile, newTile);
        }
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        const newTile = state.tilesByCellId[this.cellId];
        const oldTile = state.manifest.getTile(this.oldTileId, this.tileId);
        oldTile.position(this.oldTilePosition);
        newTile.copyToTile(oldTile);
        state.tilesByCellId[this.cellId] = oldTile;

        if (this.privateId && this.privateDone) {
            const privateCompany = state.getCompany(this.privateId);
            privateCompany.used(false);
        }

        company.addCash(this.cost);
        state.bank.removeCash(this.cost);
        __WEBPACK_IMPORTED_MODULE_3_common_util_events__["a" /* default */].emit('tileUpdated', this.cellId);
        __WEBPACK_IMPORTED_MODULE_3_common_util_events__["a" /* default */].emit('trackLaid', this);
        if (this.upgrade) {
            this.upgradeRoutes(state, this.cellId, newTile, oldTile);
        }
    }

    upgradeRoutes(state, cellId, oldTile, newTile) {
        __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.each(state.allCompaniesById(), company => {
            if (company.closed()) {
                return;
            }
            __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.each(company.getNonRustedTrains(), train => {
                train.route.upgradeConnections(this.cellId, oldTile, newTile);
            });
        });
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const privateCompany = state.getCompany(this.privateId);
        return company.nickname + (privateCompany ? ' used ' + privateCompany.name + ' to lay' : ' laid') + ' a #' + this.tileId + ' tile at ' + this.cellId + ' for $' + this.cost;
    }
}

LayTrack.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (LayTrack);

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);


class PlaceMeat extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.companyId = args.companyId;
        this.privateId = args.privateId;
        this.cellId = args.cellId;
    }

    doExecute(state) {
        const privateCompany = state.getCompany(this.privateId);
        privateCompany.used(true);
        const tile = state.tilesByCellId[this.cellId];
        tile.hasMeat(this.companyId);
        this.recalculateRouteRevenue(state);
    }

    doUndo(state) {
        const privateCompany = state.getCompany(this.privateId);
        privateCompany.used(false);
        const tile = state.tilesByCellId[this.cellId];
        tile.hasMeat(null);
        this.recalculateRouteRevenue(state);
    }

    recalculateRouteRevenue(state) {
        _.each(state.allCompaniesById(), company => {
            if (company.closed()) {
                return;
            }
            _.each(company.getNonRustedTrains(), train => {
                train.route.calculateRevenue();
            });
        });
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const location = this.cellId === 'D6' ? 'Chicago' : 'St Louis';
        return company.nickname + ' placed meat packing token in ' + location;
    }
}

PlaceMeat.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (PlaceMeat);

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_offBoardIds__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);




const LocationNames = {
    [__WEBPACK_IMPORTED_MODULE_1_1846_config_offBoardIds__["a" /* default */].CHICAGO_CONNECTIONS]: 'Chicago Connections',
    [__WEBPACK_IMPORTED_MODULE_1_1846_config_offBoardIds__["a" /* default */].HOLLAND]: 'Holland',
    [__WEBPACK_IMPORTED_MODULE_1_1846_config_offBoardIds__["a" /* default */].ST_LOUIS]: 'St Louis',
    D14: 'Toledo',
    G19: 'Wheeling'
};

class PlaceSteamboat extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.playerId = args.playerId;
        this.companyId = args.companyId;
        this.cellId = args.cellId;
        this.oldCellId = args.oldCellId;
        this.oldCompanyId = args.oldCompanyId;
    }

    doExecute(state) {
        const tile = state.tilesByCellId[this.cellId];
        this.oldCellId = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.findKey(state.tilesByCellId, tile => tile.hasSteamboat());
        if (this.oldCellId) {
            const oldTile = state.tilesByCellId[this.oldCellId];
            this.oldCompanyId = oldTile.hasSteamboat();
            oldTile.hasSteamboat(null);
        }
        tile.hasSteamboat(this.companyId);
        this.recalculateRouteRevenue(state);
    }

    doUndo(state) {
        const tile = state.tilesByCellId[this.cellId];
        tile.hasSteamboat(null);
        if (this.oldCellId) {
            state.tilesByCellId[this.oldCellId].hasSteamboat(this.oldCompanyId);
        }
        this.recalculateRouteRevenue(state);
    }

    recalculateRouteRevenue(state) {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(state.allCompaniesById(), company => {
            if (company.closed()) {
                return;
            }
            __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(company.getNonRustedTrains(), train => {
                train.route.calculateRevenue();
            });
        });
    }

    summary(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        return (player ? player.name() : company.nickname) + ' placed steamboat token' + (player ? ' assigned to ' + company.nickname : '') + ' in ' + LocationNames[this.cellId];
    }
}

PlaceSteamboat.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (PlaceSteamboat);

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



class PrivateIncome extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
    }

    doExecute(state) {
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(state.players(), player => {
            const cash = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(player.getPrivates(), privateCo => privateCo.income);
            player.addCash(cash);
        });
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(state.publicCompanies, company => {
            const cash = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(company.getPrivates(), privateCo => privateCo.income);
            company.addCash(cash);
        });
    }

    doUndo(state) {
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(state.players(), player => {
            const cash = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(player.getPrivates(), privateCo => privateCo.income);
            player.removeCash(cash);
        });
        __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(state.publicCompanies, company => {
            const cash = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(company.getPrivates(), privateCo => privateCo.income);
            company.removeCash(cash);
        });
    }

    summary(state) {
        return 'Private income paid';
    }
}

PrivateIncome.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (PrivateIncome);

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);



class RedeemShares extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.companyId = args.companyId;
        this.count = args.count;
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        const index = company.priceIndex();
        this.price = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].rightPrice(index);

        const cash = this.price * this.count;
        company.removeCash(cash);
        state.bank.addCash(cash);

        const certs = state.bank.removeNonPresidentCertsForCompany(this.count, this.companyId);
        company.addCerts(certs);
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);

        const cash = this.price * this.count;
        company.addCash(cash);
        state.bank.removeCash(cash);

        const certs = company.removeCerts(this.count);
        state.bank.addCerts(certs);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return company.nickname + ' redeemed ' + this.count + ' shares at $' + this.price;
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        const index = company.priceIndex();
        const price = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].rightPrice(index);
        return 'Confirm redeem ' + this.count + ' shares at $' + price;
    }
}

RedeemShares.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (RedeemShares);

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_trainDefinitions__ = __webpack_require__(11);



class ReturnTrain extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.companyId = args.companyId;
        this.trainId = args.trainId;
        this.train = args.train;
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        this.train = company.removeTrainById(this.trainId).clone();
        state.bank.addTrains(this.train.type, 1);
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        state.bank.removeTrains(this.train.type, 1);
        company.addTrain(this.train.clone());
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const trainDefinition = __WEBPACK_IMPORTED_MODULE_1_1846_config_trainDefinitions__["a" /* default */][this.train.type];
        return company.nickname + ' returned a ' + trainDefinition.name + 'T to the bank';
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        const train = company.getTrainById(this.trainId);
        const trainDefinition = __WEBPACK_IMPORTED_MODULE_1_1846_config_trainDefinitions__["a" /* default */][train.type];
        return 'Confirm return ' + trainDefinition.name + 'T to the bank?';
    }
}

ReturnTrain.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (ReturnTrain);

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_trainNames__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash__);








class RunRoutes extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.companyId = args.companyId;
        this.trains = args.trains;
        this.revenue = args.revenue;
        this.allocation = args.allocation;
        this.oldLastRun = args.oldLastRun;
        this.oldPriceIndex = args.oldPriceIndex;
        this.newPriceIndex = args.newPriceIndex;
        this.oldCompaniesForPriceIndex = args.oldCompaniesForPriceIndex;
        this.oldTrains = args.oldTrains;
        this.closeData = args.closeData;
        this.oldOperated = args.oldOperated;
        this.playerPayouts = args.playerPayouts || {};
        this.companyPayout = args.companyPayout || 0;
    }

    doExecute(state) {
        const company = state.getCompany(this.companyId);
        const player = state.playersById()[this.playerId];
        this.oldTrains = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(company.trains(), train => train.clone());
        this.oldPriceIndex = company.priceIndex();
        this.oldCompaniesForPriceIndex = state.stockBoard.getCompaniesForPriceIndex(this.oldPriceIndex);
        this.oldLastRun = company.lastRun();
        this.oldOperated = company.operated();
        this.revenue = this.calculateRevenue(state);
        const companyIncome = this.calculateCompanyIncome(company, this.revenue, this.allocation);
        const payout = this.calculatePayout(this.revenue, this.allocation);

        // Update and pay company
        company.lastRun(this.revenue);

        if (companyIncome > 0) {
            state.bank.removeCash(companyIncome);
            company.addCash(companyIncome);
            this.companyPayout = companyIncome;
        }

        // Pay players
        if (company.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].INDEPENDANT) {
            if (this.revenue > 0) {
                const halfPayout = this.revenue / 2;
                state.bank.removeCash(halfPayout);
                player.addCash(halfPayout);
                this.playerPayouts[player.id] = halfPayout;
            }
        } else {
            if (this.allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].NONE || this.revenue === 0) {
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].leftIndex(this.oldPriceIndex, !company.president() && company.numTrainsForLimit() === 0 ? 2 : 1));
            } else {
                company.priceIndex(__WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].rightIndex(this.oldPriceIndex, this.calculateStockMovement(payout, company.price())));
            }

            const payoutPerShare = payout / 10;
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.players(), player => {
                const cash = player.numSharesOwnedOfCompany(this.companyId) * payoutPerShare;
                if (cash > 0) {
                    state.bank.removeCash(cash);
                    player.addCash(cash);
                    this.playerPayouts[player.id] = cash;
                }
            });
        }

        company.updateTrains(__WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(this.trains, train => train.clone()));
        __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(company.trains(), train => {
            if (train.phasedOut()) {
                train.phasedOut(false);
                train.rusted(true);
            }
        });

        if (company.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].PUBLIC && company.priceIndex() === 0) {
            this.closeData = company.close();
        }
        company.operated(true);
        this.newPriceIndex = company.priceIndex();
    }

    doUndo(state) {
        const company = state.getCompany(this.companyId);
        const player = state.playersById()[this.playerId];
        const companyIncome = this.calculateCompanyIncome(company, this.revenue, this.allocation);
        const payout = this.calculatePayout(this.revenue, this.allocation);

        if (this.closeData) {
            company.unclose(this.closeData);
        }

        // Unpay players
        if (company.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].INDEPENDANT) {
            state.bank.addCash(this.revenue / 2);
            player.removeCash(this.revenue / 2);
        } else {
            company.priceIndex(this.oldPriceIndex);
            const payoutPerShare = payout / 10;
            __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(state.players(), player => {
                const cash = player.numSharesOwnedOfCompany(this.companyId) * payoutPerShare;
                state.bank.addCash(cash);
                player.removeCash(cash);
            });
            state.stockBoard.setCompaniesForPriceIndex(this.oldPriceIndex, this.oldCompaniesForPriceIndex);
        }

        // Update and unpay company
        state.bank.addCash(companyIncome);
        company.removeCash(companyIncome);
        company.trains(__WEBPACK_IMPORTED_MODULE_6_lodash___default.a.map(this.oldTrains, train => train.clone()));
        company.lastRun(this.oldLastRun);
        company.operated(this.oldOperated);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const payout = this.calculatePayout(this.revenue, this.allocation);
        const movement = this.revenue === 0 || this.allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].NONE ? -1 : this.calculateStockMovement(payout, __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].price(this.oldPriceIndex));
        const newPrice = __WEBPACK_IMPORTED_MODULE_5_1846_config_prices__["a" /* default */].price(this.newPriceIndex);
        const allocationText = this.revenue > 0 ? ' and ' + this.getAllocationText(this.allocation, true) : '';
        const trainText = this.trains.length === 0 ? 'no trains' : 'its ' + __WEBPACK_IMPORTED_MODULE_6_lodash___default()(this.trains).map(train => __WEBPACK_IMPORTED_MODULE_3_1846_config_trainNames__["a" /* default */][train.type]).join(',') + ' train' + (this.trains.length > 1 ? 's' : '') + ' for $' + this.revenue + allocationText;
        const stockText = company.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].INDEPENDANT ? '' : ' - share price ' + this.getMovementText(movement) + ' $' + newPrice;
        return company.nickname + ' ran ' + trainText + stockText;
    }

    confirmation(state) {
        const revenue = this.calculateRevenue(state);
        const allocationText = this.revenue > 0 ? ' and ' + this.getAllocationText(this.allocation) : '';
        return 'Confirm run trains for $' + revenue + allocationText;
    }

    details(state) {
        const company = state.getCompany(this.companyId);
        const details = [];
        if (this.companyPayout) {
            details.push(company.nickname + ' receives $' + this.companyPayout);
        }
        __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.each(this.playerPayouts, (amount, id) => {
            const player = state.playersById()[id];
            details.push(player.name() + ' receives $' + amount);
        });
        return details;
    }

    calculateRevenue(state) {
        const company = state.getCompany(this.companyId);
        let revenue = __WEBPACK_IMPORTED_MODULE_6_lodash___default.a.sumBy(this.trains, train => train.route.revenue());
        if (company.hasPrivate(__WEBPACK_IMPORTED_MODULE_2_1846_config_companyIds__["a" /* default */].MAIL_CONTRACT)) {
            revenue += (__WEBPACK_IMPORTED_MODULE_6_lodash___default()(this.trains).map(train => train.route.numStops()).max() || 0) * 10;
        }
        return revenue;
    }

    calculateCompanyIncome(company, revenue, allocation) {
        let companyIncome = 0;
        if (company.type === __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__["a" /* default */].INDEPENDANT) {
            companyIncome = revenue / 2;
        } else if (allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].NONE) {
            companyIncome = revenue;
        } else if (allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].HALF) {
            const halfRevenue = revenue / 2;
            const remainder = halfRevenue % 10;
            const withheld = halfRevenue - remainder;
            const payout = halfRevenue + remainder;
            const payoutPerShare = payout / 10;
            companyIncome = withheld + payoutPerShare * company.shares();
        } else {
            companyIncome = revenue / 10 * company.shares();
        }
        return companyIncome;
    }

    calculatePayout(revenue, allocation) {
        let payout = 0;
        if (allocation !== __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].NONE) {
            if (allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].HALF) {
                const halfRevenue = revenue / 2;
                const remainder = halfRevenue % 10;
                payout = halfRevenue + remainder;
            } else {
                payout = revenue;
            }
        }
        return payout;
    }

    calculateStockMovement(revenue, currentPrice) {
        if (revenue < currentPrice) {
            return 0;
        } else if (revenue < currentPrice * 2) {
            return 1;
        } else if (revenue < currentPrice * 3 || currentPrice < 165) {
            return 2;
        } else {
            return 3;
        }
    }

    getAllocationText(allocation, past) {
        if (allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].NONE) {
            return past ? 'withheld' : 'withhold';
        } else if (allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].HALF) {
            return past ? 'paid half' : 'pay half';
        } else if (allocation === __WEBPACK_IMPORTED_MODULE_4_1846_config_allocations__["a" /* default */].FULL) {
            return past ? 'paid full' : 'pay full';
        }
    }

    getMovementText(movement) {
        if (movement < 0) {
            return 'moved back to';
        } else if (movement === 0) {
            return 'stayed at';
        } else if (movement === 1) {
            return 'moved to';
        } else if (movement === 2) {
            return 'double jumped to';
        } else if (movement === 3) {
            return 'triple jumped to';
        }
    }

}

RunRoutes.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (RunRoutes);

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_validationError__ = __webpack_require__(14);




class SellShares extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);

        this.playerId = args.playerId;
        this.companyId = args.companyId;
        this.count = args.count;
        this.startIndex = args.startIndex;
        this.endIndex = args.endIndex;
        this.forced = args.forced;
        this.newPresidentId = args.newPresidentId;
        this.firstPassIndex = args.firstPassIndex;
        this.oldCompaniesForPriceIndex = args.oldCompaniesForPriceIndex;
        this.closeData = args.closeData;
    }

    doExecute(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);
        const isPresident = company.president() === this.playerId;
        this.startIndex = company.priceIndex();
        this.oldCompaniesForPriceIndex = state.stockBoard.getCompaniesForPriceIndex(this.startIndex);

        // validate things
        // company has operated or is pres
        // owns shares
        // market space
        // presidency requirement

        state.firstPassIndex(null);
        this.endIndex = isPresident ? __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftIndex(this.startIndex) : this.startIndex;
        company.priceIndex(this.endIndex);
        const cash = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex) * this.count;
        state.bank.removeCash(cash);
        player.addCash(cash);

        if (this.endIndex === 0) {
            this.closeData = company.close();
        } else {
            if (isPresident && player.sharesPerCompany()[this.companyId] - this.count < 2) {
                // Swap director cert
                const target = _(state.players()).filter(otherPlayer => player.id !== otherPlayer.id && otherPlayer.sharesPerCompany()[this.companyId] >= 2).sortBy(otherPlayer => {
                    return otherPlayer.order() > player.order() ? otherPlayer.order() : otherPlayer.order() + 10;
                }).first();

                if (!target) {
                    throw new __WEBPACK_IMPORTED_MODULE_2_common_game_validationError__["a" /* default */]('Cannot find player to dump company on');
                }

                const nonPresidentCerts = target.removeNonPresidentCertsForCompany(2, this.companyId);
                const presidentCert = player.removePresidentCertForCompany(this.companyId);

                target.addCert(presidentCert);
                player.addCerts(nonPresidentCerts);

                this.newPresidentId = target.id;
                company.president(target.id);
            }

            const certs = player.removeNonPresidentCertsForCompany(this.count, this.companyId);
            state.bank.certificates.push.apply(state.bank.certificates, certs);
        }
    }

    doUndo(state) {
        const player = state.playersById()[this.playerId];
        const company = state.getCompany(this.companyId);

        const cash = __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex) * this.count;
        state.bank.addCash(cash);
        player.removeCash(cash);
        company.priceIndex(this.startIndex);
        state.stockBoard.setCompaniesForPriceIndex(this.startIndex, this.oldCompaniesForPriceIndex);
        state.firstPassIndex(this.firstPassIndex);

        if (this.closeData) {
            company.unclose(this.closeData);
        } else {
            const certs = state.bank.removeNonPresidentCertsForCompany(this.count, this.companyId);
            player.addCerts(certs);

            if (this.newPresidentId) {
                const newPresident = state.playersById()[this.newPresidentId];
                const nonPresidentCerts = player.removeNonPresidentCertsForCompany(2, this.companyId);
                const presidentCert = newPresident.removePresidentCertForCompany(this.companyId);

                player.addCert(presidentCert);
                newPresident.addCerts(nonPresidentCerts);
                company.president(player.id);
            }
        }
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        return 'Sold ' + this.count + ' ' + company.nickname + ' @ ' + __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(this.startIndex) + (this.closeData ? ' closing the company' : '');
    }

    confirmation(state) {
        const company = state.getCompany(this.companyId);
        const isPresident = company.president() === this.playerId;
        const endIndex = isPresident ? __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].leftIndex(this.startIndex) : this.startIndex;
        return 'Sell ' + this.count + ' ' + company.nickname + ' @ ' + __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(company.priceIndex()) + (endIndex ? ' closing the company' : '');
    }

}

SellShares.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (SellShares);

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);


class SetOperatingOrder extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.operatingOrder = args.operatingOrder;
        this.oldOperatingOrder = args.oldOperatingOrder;
    }

    doExecute(state) {
        this.oldOperatingOrder = state.operatingOrder();
        state.operatingOrder(this.operatingOrder);
    }

    doUndo(state) {
        state.operatingOrder(this.oldOperatingOrder);
    }

    summary(state) {
        return 'New operating order: ' + _.join(state.operatingOrder(), ',');
    }
}

SetOperatingOrder.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (SetOperatingOrder);

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);


class SetPriorityDeal extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.playerIndex = args.playerIndex;
        this.oldPlayerIndex = args.oldPlayerIndex;
    }

    doExecute(state) {
        this.oldPlayerIndex = state.priorityDealIndex();
        state.priorityDealIndex(this.playerIndex);
    }

    doUndo(state) {
        state.priorityDealIndex(this.oldPlayerIndex);
    }

    summary(state) {
        return this.playerIndex + ' has priority deal';
    }
}

SetPriorityDeal.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (SetPriorityDeal);

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);


class SkipSecondPrivateLay extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.companyId = args.companyId;
        this.privateId = args.privateId;
    }

    doExecute(state) {
        const privateCompany = state.getCompany(this.privateId);
        privateCompany.used(true);
    }

    doUndo(state) {
        const privateCompany = state.getCompany(this.privateId);
        privateCompany.used(false);
    }

    summary(state) {
        const company = state.getCompany(this.companyId);
        const privateCompany = state.getCompany(this.privateId);
        return company.nickname + ' skipped ' + privateCompany.name + '\'s second tile lay';
    }
}

SkipSecondPrivateLay.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (SkipSecondPrivateLay);

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_action__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



class StockRoundPass extends __WEBPACK_IMPORTED_MODULE_0_common_game_action__["a" /* default */] {

    constructor(args) {
        super(args);
        this.playerIndex = args.playerIndex;
    }

    doExecute(state) {
        if (__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isNull(state.firstPassIndex()) || __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isUndefined(state.firstPassIndex())) {
            state.firstPassIndex(this.playerIndex);
        }
    }

    doUndo(state) {
        state.firstPassIndex(null);
    }

    summary(state) {
        return 'Passed';
    }

    confirmation(state) {
        return 'Confirm Pass';
    }
}

StockRoundPass.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (StockRoundPass);

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_company__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_model_certificate__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_privateCompany__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_config_trainIds__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_model_train__ = __webpack_require__(31);









const PublicCompanyDefinitions = {
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].GRAND_TRUNK]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].GRAND_TRUNK,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        name: 'Grand Trunk',
        nickname: 'GT',
        tokens: 3,
        startTokens: 3,
        homeCellId: 'B16'
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].NEW_YORK_CENTRAL]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].NEW_YORK_CENTRAL,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        name: 'New York Central',
        nickname: 'NYC',
        tokens: 4,
        startTokens: 4,
        homeCellId: 'D20'
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].ERIE]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].ERIE,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        name: 'Erie',
        nickname: 'Erie',
        tokens: 4,
        startTokens: 4,
        homeCellId: 'E21'
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].PENNSYLVANIA]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].PENNSYLVANIA,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        name: 'Pennsylvania',
        nickname: 'PRR',
        tokens: 5,
        startTokens: 5,
        homeCellId: 'F20'
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        name: 'Baltimore & Ohio',
        nickname: 'B&O',
        tokens: 4,
        startTokens: 4,
        homeCellId: 'G19'
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        name: 'Illinois Central',
        nickname: 'IC',
        tokens: 4,
        startTokens: 4,
        homeCellId: 'K3'
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].CHESAPEAKE_OHIO]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].CHESAPEAKE_OHIO,
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PUBLIC,
        nickname: 'C&O',
        name: 'Chesapeake & Ohio',
        tokens: 4,
        startTokens: 4,
        homeCellId: 'I15'
    }
};

const PrivateCompanyDefinitions = {
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN,
        name: 'Michigan Southern',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].INDEPENDANT,
        nickname: 'MS',
        tokens: 0,
        startTokens: 1,
        cost: 140,
        baseCost: 140,
        maxBuyInPrice: 60,
        cash: 80,
        homeCellId: 'C15',
        trains: [new __WEBPACK_IMPORTED_MODULE_7_common_model_train__["a" /* default */]({ type: __WEBPACK_IMPORTED_MODULE_6_1846_config_trainIds__["a" /* default */].TRAIN_2, companyId: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN })]
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].BIG_4]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].BIG_4,
        name: 'Big 4',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].INDEPENDANT,
        nickname: 'Big 4',
        tokens: 0,
        startTokens: 1,
        cost: 100,
        baseCost: 100,
        maxBuyInPrice: 40,
        cash: 60,
        homeCellId: 'G9',
        trains: [new __WEBPACK_IMPORTED_MODULE_7_common_model_train__["a" /* default */]({ type: __WEBPACK_IMPORTED_MODULE_6_1846_config_trainIds__["a" /* default */].TRAIN_2, companyId: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].BIG_4 })]
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].CHICAGO_WESTERN_INDIANA]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].CHICAGO_WESTERN_INDIANA,
        name: 'Chicago & Western Indiana',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 60,
        baseCost: 60,
        maxBuyInPrice: 60,
        income: 10
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].OHIO_INDIANA]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].OHIO_INDIANA,
        name: 'Ohio & Indiana',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 40,
        maxBuyInPrice: 40,
        income: 15,
        hasAbility: true
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MEAT_PACKING_COMPANY]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MEAT_PACKING_COMPANY,
        name: 'Meat Packing Company',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 60,
        baseCost: 60,
        maxBuyInPrice: 60,
        income: 15,
        hasAbility: true
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY,
        name: 'Steamboat Company',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 40,
        baseCost: 40,
        maxBuyInPrice: 40,
        income: 10,
        hasAbility: true
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].LAKE_SHORE_LINE]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].LAKE_SHORE_LINE,
        name: 'Lake Shore Line',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 40,
        baseCost: 40,
        maxBuyInPrice: 40,
        income: 15,
        hasAbility: true
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL,
        name: 'Michigan Central',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 40,
        baseCost: 40,
        maxBuyInPrice: 40,
        income: 15,
        hasAbility: true
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MAIL_CONTRACT]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].MAIL_CONTRACT,
        name: 'Mail Contract',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 80,
        baseCost: 80,
        maxBuyInPrice: 80,
        income: 0
    },
    [__WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].TUNNEL_BLASTING_COMPANY]: {
        id: __WEBPACK_IMPORTED_MODULE_5_1846_config_companyIds__["a" /* default */].TUNNEL_BLASTING_COMPANY,
        name: 'Tunnel Blasting Company',
        type: __WEBPACK_IMPORTED_MODULE_4_common_model_companyTypes__["a" /* default */].PRIVATE,
        cost: 60,
        baseCost: 60,
        maxBuyInPrice: 60,
        income: 20
    }

};

class Companies {
    static generatePublicCompanies() {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.map(PublicCompanyDefinitions, definition => {
            definition.certificates = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.map(__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.range(9), value => {
                const certDefinition = {
                    companyId: definition.id,
                    shares: 1
                };
                if (value === 0) {
                    certDefinition.shares += 1;
                    certDefinition.president = true;
                }

                return new __WEBPACK_IMPORTED_MODULE_2_common_model_certificate__["a" /* default */](certDefinition);
            });

            return new __WEBPACK_IMPORTED_MODULE_1_common_model_company__["a" /* default */](definition);
        });
    }

    static generatePrivateCompanies() {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.map(PrivateCompanyDefinitions, definition => {
            definition.certificates = [new __WEBPACK_IMPORTED_MODULE_2_common_model_certificate__["a" /* default */]({
                companyId: definition.id,
                shares: 1
            })];
            return new __WEBPACK_IMPORTED_MODULE_3_common_model_privateCompany__["a" /* default */](definition);
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Companies);

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

const RouteColors = ['#888', // gray
'#fd7e14', // orange
'#007bff', // blue
'#6f42c1', // purple
'#e880cb' // pink
];

/* harmony default export */ __webpack_exports__["a"] = (RouteColors);

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__ = __webpack_require__(12);


const TrainNames = {
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_2]: '2',
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_3_5]: '3/5',
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_4]: '4',
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_4_6]: '4/6',
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_5]: '5',
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_6]: '6',
    [__WEBPACK_IMPORTED_MODULE_0_1846_config_trainIds__["a" /* default */].TRAIN_7_8]: '7/8'
};

/* harmony default export */ __webpack_exports__["a"] = (TrainNames);

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__ = __webpack_require__(4);



class History {
    constructor() {
        this.selectedRound = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
    }

    selectRound(id) {
        this.selectedRound(id);
    }

    getTurnsForRound(id) {
        const round = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().roundHistory.getRound(id);
        if (!round) {
            return [];
        }
        const turnHistory = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().turnHistory;
        return turnHistory.getTurnsForRange(round.actionStartIndex, round.actionEndIndex);
    }
}

/* harmony default export */ __webpack_exports__["a"] = (History);

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_actions_issueShares__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_actions_redeemShares__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_actions_buyPrivate__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_1846_config_allocations__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_1846_actions_runRoutes__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_1846_actions_buyTrains__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_1846_actions_skipSecondPrivateLay__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_1846_actions_declareBankruptcy__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_1846_actions_forceIssueCloseCompany__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_1846_actions_returnTrain__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_1846_config_phaseIds__ = __webpack_require__(8);




















const Actions = {
    ISSUE_SHARES: 'issue',
    REDEEM_SHARES: 'redeem',
    BUY_PRIVATES: 'buy_privates',
    LAY_TRACK: 'lay_track',
    RUN_ROUTES: 'run_routes',
    BUY_TRAINS: 'buy_trains',
    USE_PRIVATES: 'use_privates',
    EMERGENCY_BUY: 'emergency_buy',
    BANKRUPT: 'bankrupt',
    CLOSE_COMPANY: 'close_company',
    RETURN_TRAIN: 'return_train',
    PLAYER_STEAMBOAT: 'player_steamboat'
};

const PrivateActions = {
    OANDI: 'oandi',
    MC: 'mc',
    LSL: 'lsl',
    MEAT: 'meat',
    STEAMBOAT: 'boat',
    CWI: 'cwi'
};

class OperatingRound {
    constructor(definition) {
        definition = definition || {};

        this.Actions = Actions;
        this.PrivateActions = PrivateActions;
        this.Allocations = __WEBPACK_IMPORTED_MODULE_8_1846_config_allocations__["a" /* default */];

        this.selectedAction = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedAction);
        this.selectedPrivateId = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedPrivateId);
        this.companyTrains = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.companyTrains);
        this.selectedTrain = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedTrain);
        this.selectedAllocation = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedAllocation);
        this.selectedTrainSource = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedTrainSource);
        this.selectedCompanyTrainsForPurchase = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.selectedCompanyTrainsForPurchase);
        this.selectedBankTrainsForPurchase = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedBankTrainsForPurchase || {});
        this.selectedForcedTrainForPurchase = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedForcedTrainForPurchase);
        this.selectedStocksForSale = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedStocksForSale || {});
        this.selectedTrainToReturn = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedTrainToReturn);
        this.selectedSteamboatCompany = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedSteamboatCompany);
        this.useCWIToken = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.useCWIToken);

        this.maxPrivateCost = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!this.selectedPrivateId()) {
                return 1;
            }
            const privateCompany = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(this.selectedPrivateId());
            return Math.min(privateCompany.maxBuyInPrice, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().cash());
        });
        this.privatePrice = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable().extend({ numeric: this.maxPrivateCost });

        this.maxCompanyTrainPurchasePrice = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (this.selectedCompanyTrainsForPurchase().length <= 0) {
                return 1;
            }
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().cash();
        });
        this.companyTrainPurchasePrice = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable().extend({ numeric: this.maxCompanyTrainPurchasePrice });

        this.numberOfShares = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.numberOfShares || 0);
        this.useablePrivates = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
                return [];
            }
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().getPrivates()).filter(privateCompany => {
                if (!privateCompany.hasAbility || privateCompany.used() || privateCompany.closed()) {
                    return false;
                }

                if (privateCompany.id === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY && this.hasPlacedSteamboatThisTurn()) {
                    return false;
                }

                if (privateCompany.id === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].LAKE_SHORE_LINE && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPhaseId() === __WEBPACK_IMPORTED_MODULE_18_1846_config_phaseIds__["a" /* default */].PHASE_I) {
                    return false;
                }

                return true;
            }).value();
        });

        this.useablePrivates.subscribe(value => {
            if (this.selectedPrivateId()) {
                this.reset();
            }
        });

        this.runRevenue = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!this.selectedTrain()) {
                return 0;
            }

            let revenue = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sumBy(this.companyTrains(), train => train.route.revenue());
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
            if (company.hasPrivate(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MAIL_CONTRACT)) {
                revenue += (__WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.companyTrains()).map(train => train.route.numStops()).max() || 0) * 10;
            }

            return revenue;
        });

        this.halfPayResult = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
                return '';
            }

            const halfRevenue = this.runRevenue() / 2;
            const remainder = halfRevenue % 10;
            const payout = halfRevenue + remainder;
            return this.calculateStockMovementDisplay(this.calculateStockMovement(payout));
        });

        this.fullPayResult = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
                return '';
            }

            const revenue = this.runRevenue();
            return this.calculateStockMovementDisplay(this.calculateStockMovement(revenue));
        });

        this.availableBankTrains = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (this.selectedTrainSource() !== 'bank') {
                return [];
            }
            const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
            const company = state.currentCompany();
            const presidentless = !company.president();

            if (presidentless) {
                const cheapestTrain = this.getSingleCheapestTrain();
                if (company.cash() >= cheapestTrain.cost) {
                    return [cheapestTrain];
                } else {
                    return [];
                }
            }

            let numCanBuy = state.trainLimit() - (state.currentCompany().numTrainsForLimit() + this.numSelectedBankTrainsForPurchase());

            const cashAllocated = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(this.selectedBankTrainsForPurchase(), (sum, amount, type) => {
                const trainDefinition = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][type];
                return sum + amount * trainDefinition.cost;
            }, 0);
            const cashAvailable = state.currentCompany().cash() - cashAllocated;

            const priorPhase = state.getPriorPhase();
            const currentPhase = state.currentPhaseId();
            const nextPhase = state.getNextPhase();

            const availablePhases = [];
            const numPriorAvailable = state.bank.getAvailableTrainsForPhase(priorPhase);
            if (priorPhase !== currentPhase && numPriorAvailable > 0) {
                availablePhases.push({ phase: priorPhase, available: numPriorAvailable });
            }

            const numCurrentAvailable = state.bank.getAvailableTrainsForPhase(currentPhase);
            if (numCurrentAvailable > 0 || numCurrentAvailable === -1) {
                availablePhases.push({ phase: currentPhase, available: numCurrentAvailable });
            }

            if (nextPhase !== currentPhase) {
                const numNextAvailable = state.bank.getAvailableTrainsForPhase(nextPhase);
                availablePhases.push({ phase: nextPhase, available: numNextAvailable });
            }

            return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(availablePhases).map(phaseData => {
                return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(state.bank.getTrainsForPhase(phaseData.phase), trainType => {
                    return { phase: phaseData.phase, trainType, available: phaseData.available };
                });
            }).flatten().map(trainTypeData => {
                const trainDefinition = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][trainTypeData.trainType];
                const numOfTypeSelected = this.selectedBankTrainsForPurchase()[trainTypeData.trainType] || 0;
                const numOfPhaseSelected = this.numSelectedBankTrainsForPhaseForPurchase(trainTypeData.phase);
                const numAffordable = Math.floor((cashAvailable + numOfTypeSelected * trainDefinition.cost) / trainDefinition.cost);
                const numAllowed = numCanBuy + numOfTypeSelected;
                const currentPhaseFullySelected = numCurrentAvailable - this.numSelectedBankTrainsForPhaseForPurchase(currentPhase) <= 0;
                const phaseAllowed = availablePhases.length === 1 || trainTypeData.phase !== nextPhase || numCurrentAvailable === 0 || currentPhaseFullySelected;
                const numAvailable = phaseAllowed ? trainTypeData.available - numOfPhaseSelected + numOfTypeSelected : 0;
                return {
                    type: trainDefinition.id,
                    cost: trainDefinition.cost,
                    num: __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.min([numAvailable, numAllowed, numAffordable]),
                    available: trainTypeData.available - numOfPhaseSelected
                };
            }).value();
        });

        this.sharesForSale = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!this.selectedForcedTrainForPurchase()) {
                return [];
            }
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
            const player = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer();
            const cashRaised = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(this.selectedStocksForSale(), (sum, amount, companyId) => {
                const companyForSale = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
                return sum + amount * companyForSale.price();
            }, 0);
            const moneyNeeded = this.getMoneyNeededFromStockSales() - cashRaised;

            return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(player.ownedCompanyIds()).map(companyId => {
                const companyToSell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
                const numOfTypeSelected = this.selectedStocksForSale()[companyId] || 0;
                const isCurrentCompany = companyId === company.id;
                const maxAvailable = Math.max(player.getMaximumAllowedSalesOfCompany(companyId, isCurrentCompany) - (isCurrentCompany ? company.numCanIssue() : 0));
                const numNeeded = Math.ceil(moneyNeeded / companyToSell.price());
                const numAllowed = moneyNeeded <= 0 ? numOfTypeSelected : Math.min(numOfTypeSelected + numNeeded, maxAvailable);
                return {
                    company: companyToSell,
                    available: maxAvailable,
                    num: numAllowed
                };
            }).reject({ available: 0 }).sortBy(company => company.nickname).value();
        });

        this.availableCompanyTrains = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!this.selectedTrainSource() || this.selectedTrainSource() === 'bank') {
                return [];
            }
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(this.selectedTrainSource());
            return company.getNonPhasedOutTrains();
        });

        this.currentCompanyTrains = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (this.selectedAction() !== Actions.RETURN_TRAIN) {
                return [];
            }
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
            return company.getNonPhasedOutTrains();
        });

        this.action = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (this.selectedAction() === Actions.ISSUE_SHARES && this.numberOfShares()) {
                return new __WEBPACK_IMPORTED_MODULE_4_1846_actions_issueShares__["a" /* default */]({
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    count: this.numberOfShares()
                });
            } else if (this.selectedAction() === Actions.REDEEM_SHARES && this.numberOfShares()) {
                return new __WEBPACK_IMPORTED_MODULE_5_1846_actions_redeemShares__["a" /* default */]({
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    count: this.numberOfShares()
                });
            } else if (this.selectedAction() === Actions.BUY_PRIVATES && this.selectedPrivateId() && this.privatePrice()) {
                return new __WEBPACK_IMPORTED_MODULE_6_1846_actions_buyPrivate__["a" /* default */]({
                    playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    privateId: this.selectedPrivateId(),
                    price: this.privatePrice(),
                    ignoreToken: !this.useCWIToken()
                });
            } else if (this.selectedAction() === Actions.RUN_ROUTES && this.selectedAllocation()) {
                return new __WEBPACK_IMPORTED_MODULE_9_1846_actions_runRoutes__["a" /* default */]({
                    playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    revenue: this.runRevenue(),
                    allocation: this.selectedAllocation(),
                    trains: this.companyTrains()
                });
            } else if (this.selectedAction() === Actions.BUY_TRAINS && this.selectedTrainSource() && this.selectedTrainSource() !== 'bank' && this.selectedCompanyTrainsForPurchase().length > 0 && this.companyTrainPurchasePrice()) {
                return new __WEBPACK_IMPORTED_MODULE_10_1846_actions_buyTrains__["a" /* default */]({
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    trainIds: this.selectedCompanyTrainsForPurchase(),
                    source: this.selectedTrainSource(),
                    cost: this.companyTrainPurchasePrice()
                });
            } else if (this.selectedAction() === Actions.BUY_TRAINS && this.selectedTrainSource() === 'bank' && __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keys(this.selectedBankTrainsForPurchase()).length > 0) {
                return new __WEBPACK_IMPORTED_MODULE_10_1846_actions_buyTrains__["a" /* default */]({
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    trains: this.selectedBankTrainsForPurchase(),
                    source: this.selectedTrainSource()
                });
            } else if (this.selectedAction() === Actions.BUY_TRAINS && this.selectedTrainSource() === 'bank' && this.selectedForcedTrainForPurchase()) {
                if (!this.needsStockSales() || this.hasEnoughStockSales()) {
                    return new __WEBPACK_IMPORTED_MODULE_10_1846_actions_buyTrains__["a" /* default */]({
                        playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                        companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                        trains: [this.selectedForcedTrainForPurchase()],
                        source: this.selectedTrainSource(),
                        numIssued: this.numIssuedForForceBuy(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany(), this.selectedForcedTrainForPurchase()),
                        stockSales: this.selectedStocksForSale(),
                        forced: true
                    });
                }
            } else if (this.selectedAction() === Actions.CLOSE_COMPANY) {
                return new __WEBPACK_IMPORTED_MODULE_16_1846_actions_forceIssueCloseCompany__["a" /* default */]({
                    playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    count: this.maximumForcedIssues()
                });
            } else if (this.selectedAction() === Actions.BANKRUPT) {
                return new __WEBPACK_IMPORTED_MODULE_15_1846_actions_declareBankruptcy__["a" /* default */]({
                    playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId()
                });
            } else if (this.selectedAction() === Actions.RETURN_TRAIN && this.selectedTrainToReturn()) {
                return new __WEBPACK_IMPORTED_MODULE_17_1846_actions_returnTrain__["a" /* default */]({
                    companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
                    trainId: this.selectedTrainToReturn()
                });
            }
        });

        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].on('undo', () => {
            this.undoHandler();
        });
        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].on('turnEnd', () => {
            this.turnEndHandler();
        });
        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].on('stateUpdated', () => {
            this.stateUpdatedHandler();
        });
    }

    undoHandler() {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().isOperatingRound()) {
            this.reset();
            this.checkInMiddlePrivateLay();
        }
    }

    turnEndHandler() {
        this.reset();
    }

    stateUpdatedHandler() {
        this.checkInMiddlePrivateLay();
    }

    canDoPlayerSteamboat() {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer()) {
            return false;
        }

        if (this.hasPlacedSteamboatThisTurn()) {
            return false;
        }

        return true;
    }

    canBuyPrivates() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer() || this.midInterruption()) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (company.type !== __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__["a" /* default */].PUBLIC) {
            return false;
        }

        if (!company.president()) {
            return false;
        }

        if (this.isMiddleOfPrivateLays()) {
            return false;
        }

        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer().getPrivates().length > 0 && company.cash() > 0;
    }

    canUsePrivates() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || this.midInterruption()) {
            return false;
        }

        return this.useablePrivates().length > 0;
    }

    canIssue() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || this.midInterruption()) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (company.type !== __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__["a" /* default */].PUBLIC) {
            return false;
        }

        if (!company.president()) {
            return false;
        }

        if (this.isMiddleOfPrivateLays()) {
            return false;
        }

        return !this.hasRunRoutesThisTurn() && !this.hasIssuedThisTurn() && !this.hasRedeemedThisTurn() && this.getNumCanIssue() > 0;
    }

    canRedeem() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || this.midInterruption()) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (company.type !== __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__["a" /* default */].PUBLIC) {
            return false;
        }

        if (!company.president()) {
            return false;
        }

        if (this.isMiddleOfPrivateLays()) {
            return false;
        }

        return !this.hasRunRoutesThisTurn() && !this.hasRedeemedThisTurn() && !this.hasIssuedThisTurn() && this.getNumCanRedeem() > 0;
    }

    canLayTrackOrToken() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || this.midInterruption()) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (!company.president()) {
            return false;
        }

        if (this.hasRunRoutesThisTurn()) {
            return false;
        }

        if (this.isMiddleOfPrivateLays()) {
            return false;
        }

        return true;
    }

    canRunRoutes() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || this.midInterruption()) {
            return false;
        }

        if (this.hasRunRoutesThisTurn()) {
            return false;
        }

        if (this.isMiddleOfPrivateLays()) {
            return false;
        }

        return true;
    }

    canBuyTrains() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany() || this.midInterruption()) {
            return false;
        }
        const currentCompany = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();

        if (currentCompany.type !== __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__["a" /* default */].PUBLIC) {
            return false;
        }

        if (!this.hasRunRoutesThisTurn()) {
            return false;
        }

        if (currentCompany.numTrainsForLimit() >= __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().trainLimit()) {
            return false;
        }

        return this.canBuyTrainFromCompany() || this.canBuyTrainFromBank() || this.canEmergencyBuy();
    }

    canDoAnything() {
        return this.canDoPlayerSteamboat() || this.canBuyPrivates() || this.canUsePrivates() || this.canIssue() || this.canRedeem() || this.canLayTrackOrToken() || this.canRunRoutes() || this.canBuyTrains() || this.canCloseCompany() || this.canEmergencyBuy() || this.canGoBankrupt() || this.mustReturnTrain() || this.interruptionNeeded();
    }

    checkInMiddlePrivateLay() {
        const privateId = this.isMiddleOfPrivateLays();
        if (privateId) {
            this.selectAction(Actions.USE_PRIVATES);
            this.selectPrivate(privateId);
        }
    }

    calculateStockMovement(revenue) {
        const currentPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().price();
        if (revenue === 0) {
            return -1;
        } else if (revenue < currentPrice) {
            return 0;
        } else if (revenue < currentPrice * 2) {
            return 1;
        } else if (revenue < currentPrice * 3 || currentPrice < 165) {
            return 2;
        } else {
            return 3;
        }
    }

    calculateStockMovementDisplay(movement) {
        if (movement === -1) {
            return '\u21E0 price';
        } else if (movement === 0) {
            return 'no change';
        } else if (movement === 1) {
            return 'price \u21E2';
        } else if (movement === 2) {
            return 'price \u21E2 2x';
        } else {
            return 'price \u21E2 3x';
        }
    }

    isOhioIndianaAbility() {
        return this.selectedAction() === Actions.USE_PRIVATES && this.selectedPrivateId() === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].OHIO_INDIANA;
    }

    isMichiganCentralAbility() {
        return this.selectedAction() === Actions.USE_PRIVATES && this.selectedPrivateId() === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL;
    }

    isLSLAbility() {
        return this.selectedAction() === Actions.USE_PRIVATES && this.selectedPrivateId() === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].LAKE_SHORE_LINE;
    }

    isMeatPackingAbility() {
        return this.selectedAction() === Actions.USE_PRIVATES && this.selectedPrivateId() === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MEAT_PACKING_COMPANY;
    }

    isSteamboatAbility() {
        return this.selectedAction() === Actions.PLAYER_STEAMBOAT && this.selectedSteamboatCompany() || this.selectedAction() === Actions.USE_PRIVATES && this.selectedPrivateId() === __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].STEAMBOAT_COMPANY;
    }

    isMiddleOfPrivateLays() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()([__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].OHIO_INDIANA, __WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MICHIGAN_CENTRAL]).find(privateId => {
            return this.numPrivateTrackLays(privateId) === 1 && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(privateId).used();
        });
    }

    skipSecondPrivateLay() {
        const skipAction = new __WEBPACK_IMPORTED_MODULE_11_1846_actions_skipSecondPrivateLay__["a" /* default */]({
            companyId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompanyId(),
            privateId: this.selectedPrivateId()
        });
        skipAction.execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().saveLocalState();
    }

    getCompaniesWithTrains() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().president()) {
            return [];
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer().presidentCompanyIds()).reject(companyId => companyId === __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().id).map(companyId => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(companyId)).filter(company => company.trains().length > 0).value();
    }

    canAllocateRevenue() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().type !== __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__["a" /* default */].INDEPENDANT && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().president();
    }

    getSteamboatCompanies() {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        const player = state.currentPlayer();
        const companies = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(state.publicCompanies, company => company.president() === player.id);
        if (player.hasPrivate(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN)) {
            companies.push(state.getCompany(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN));
        }
        if (player.hasPrivate(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].BIG_4)) {
            companies.push(state.getCompany(__WEBPACK_IMPORTED_MODULE_3_1846_config_companyIds__["a" /* default */].BIG_4));
        }
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.sortBy(companies, 'nickname');
    }

    getNumCanRedeem() {
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        const sharesAvailable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.numSharesOwnedOfCompany(company.id);
        const cost = __WEBPACK_IMPORTED_MODULE_7_1846_config_prices__["a" /* default */].rightPrice(company.priceIndex());
        return Math.min(sharesAvailable, Math.floor(company.cash() / cost));
    }

    hasRedeemedThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'RedeemShares';
        });
    }

    getNumCanIssue() {
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        return company.numCanIssue();
    }

    hasIssuedThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'IssueShares';
        });
    }

    hasLaidTrackOrTokenedThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'LayTrack' || action.getTypeName() === 'AddToken';
        });
    }

    hasRunRoutesThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'RunRoutes';
        });
    }

    numPrivateTrackLays(privateId) {
        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(turn.getActions(), action => {
            return action.getTypeName() === 'LayTrack' && action.privateId === privateId;
        }).length;
    }

    hasUpgradedTrackThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'LayTrack' && action.upgrade && !action.privateId;
        });
    }

    hasLaidTwoTrackThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(turn.getActions(), action => {
            return action.getTypeName() === 'LayTrack' && !action.privateId;
        }).length === 2;
    }

    hasPlacedSteamboatThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'PlaceSteamboat';
        });
    }

    hasGoneBankrupt() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'DeclareBankruptcy';
        });
    }

    canBuyTrainFromBank() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getCheapestTrainCost() <= company.cash();
    }

    canBuyTrainFromCompany() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        return this.getCompaniesWithTrains().length > 0 && company.cash() > 0;
    }

    canEmergencyBuy() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (!company.president()) {
            return false;
        }

        return company.numTrainsForLimit() === 0 && !this.canBuyTrainFromBank() && !this.willGoBankrupt();
    }

    numIssuedForForceBuy(company, trainType) {
        const trainDefinition = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][trainType];
        const neededCash = trainDefinition.cost - company.cash();
        const numCanIssue = this.getNumCanIssue();
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.range(1, numCanIssue + 1), (accumulator, value) => {
            if (accumulator.remaining > 0) {
                accumulator.remaining -= __WEBPACK_IMPORTED_MODULE_7_1846_config_prices__["a" /* default */].leftPrice(company.priceIndex(), value);
                accumulator.issued = value;
            }
            return accumulator;
        }, { remaining: neededCash, issued: 0 }).issued;
    }

    cashFromStockSales(company, player, numIssued) {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(player.ownedCompanyIds(), (sum, companyId) => {
            const companyToSell = state.getCompany(companyId);
            const isCurrentCompany = companyId === company.id;
            const numToSell = Math.max(0, player.getMaximumAllowedSalesOfCompany(companyId, isCurrentCompany) - (isCurrentCompany ? numIssued : 0));
            return sum + companyToSell.price() * numToSell;
        }, 0);
    }

    getSingleCheapestTrain() {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(state.bank.getFirstAvailablePhaseTrains()).map(trainType => {
            const trainDefinition = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][trainType];
            return {
                type: trainDefinition.id,
                cost: trainDefinition.cost,
                num: 1,
                available: 1
            };
        }).minBy(train => 'cost');
    }

    maximumForcedIssues() {
        const numCanIssue = this.getNumCanIssue();

        if (this.willGoBankrupt()) {
            return numCanIssue;
        }

        if (this.canEmergencyBuy()) {
            const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
            const availableTrains = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(state.bank.getFirstAvailablePhaseTrains()).map(trainType => {
                const trainDefinition = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][trainType];
                return {
                    type: trainDefinition.id,
                    cost: trainDefinition.cost,
                    num: 1,
                    available: 1
                };
            }).value();
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
            const cashAfterFullForcedIssue = company.cash() + company.cashFromForcedIssues(numCanIssue);
            const affordableTrainsTreasuryOnly = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(availableTrains, trainData => cashAfterFullForcedIssue >= trainData.cost);
            if (affordableTrainsTreasuryOnly.length > 0) {
                const maxCost = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(affordableTrainsTreasuryOnly).map(train => train.cost).max();
                let maxIssue = 0;
                __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.each(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.rangeRight(1, numCanIssue + 1), value => {
                    if (company.cash() + company.cashFromForcedIssues(value) > maxCost) {
                        maxIssue = value;
                    } else {
                        return false;
                    }
                });
                return maxIssue;
            } else {
                return numCanIssue;
            }
        }

        return 0;
    }

    canCloseCompany() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (company.closed()) {
            return false;
        }

        if (company.numTrainsForLimit() > 0 || this.canBuyTrainFromBank()) {
            return false;
        }

        const numIssuable = this.maximumForcedIssues();
        return __WEBPACK_IMPORTED_MODULE_7_1846_config_prices__["a" /* default */].leftIndex(company.priceIndex(), numIssuable) === 0;
    }

    canGoBankrupt() {
        return this.willGoBankrupt() && !this.hasGoneBankrupt() && !this.canCloseCompany();
    }

    getMoneyNeededFromStockSales() {
        const trainType = this.selectedForcedTrainForPurchase();
        const cost = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][trainType].cost;
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        const player = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer();
        return cost - (company.cash() + company.cashFromForcedIssues(company.numCanIssue()) + player.cash());
    }

    needsStockSales() {
        if (!this.canEmergencyBuy()) {
            return false;
        }
        return this.getMoneyNeededFromStockSales() > 0;
    }

    moneyNeededAfterCurrentStockSales() {
        const cashRaised = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(this.selectedStocksForSale(), (sum, amount, companyId) => {
            const companyForSale = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
            return sum + amount * companyForSale.price();
        }, 0);
        return this.getMoneyNeededFromStockSales() - cashRaised;
    }

    hasEnoughStockSales() {
        return this.moneyNeededAfterCurrentStockSales() <= 0;
    }

    willGoBankrupt() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (company.closed()) {
            return false;
        }

        const player = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer();

        if (company.numTrainsForLimit() > 0) {
            return false;
        }

        if (!this.hasRunRoutesThisTurn()) {
            return false;
        }

        const cheapestBankTrain = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getCheapestTrainCost();
        if (company.cash() >= cheapestBankTrain) {
            return false;
        }

        let moneyNeeded = cheapestBankTrain - company.cash();

        // Check share issues:
        moneyNeeded -= company.cashFromForcedIssues(company.numCanIssue());
        if (moneyNeeded <= 0) {
            return false;
        }

        // Check player cash:
        moneyNeeded -= player.cash();
        if (moneyNeeded <= 0) {
            return false;
        }

        // Check stock sales:
        moneyNeeded -= this.cashFromStockSales(company, player, company.numCanIssue());

        return moneyNeeded > 0;
    }

    noPresidentAndCannotBuyTrain() {
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        const cheapestBankTrain = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.getCheapestTrainCost();
        return !company.president() && company.cash() < cheapestBankTrain;
    }

    canEndTurn() {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        if (!state.isOperatingRound()) {
            return true;
        }
        const company = state.currentCompany();
        return !company && this.hasPlacedSteamboatThisTurn() || this.hasRunRoutesThisTurn() && (company.numTrainsForLimit() > 0 || this.hasGoneBankrupt() || this.noPresidentAndCannotBuyTrain());
    }

    getTrainsAvailableToForceBuy() {
        if (!this.canEmergencyBuy()) {
            return [];
        }
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        const company = state.currentCompany();
        const player = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer();
        const availableTrains = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(state.bank.getFirstAvailablePhaseTrains()).map(trainType => {
            const trainDefinition = __WEBPACK_IMPORTED_MODULE_13_1846_config_trainDefinitions__["a" /* default */][trainType];
            return {
                type: trainDefinition.id,
                cost: trainDefinition.cost,
                num: 1,
                available: 1
            };
        }).value();

        // If we can force issue to buy one, give the options
        const cashAfterForcedIssue = company.cash() + company.cashFromForcedIssues(company.numCanIssue());
        const affordableTrainsTreasuryOnly = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(availableTrains, trainData => cashAfterForcedIssue >= trainData.cost);
        if (affordableTrainsTreasuryOnly.length > 0) {
            return affordableTrainsTreasuryOnly;
        }

        // Otherwise everything can go to pay
        const cashAfterEverything = cashAfterForcedIssue + player.cash() + this.cashFromStockSales(company, player, company.numCanIssue());
        const affordableTrains = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.filter(availableTrains, trainData => cashAfterEverything >= trainData.cost);
        if (affordableTrains.length > 0) {
            return affordableTrains;
        }
    }

    mustReturnTrain() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        const company = state.currentCompany();
        return company.hasTooManyTrains();
    }

    selectAction(actionId) {
        this.reset();
        this.selectedAction(actionId);
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany();
        if (this.selectedAction() === Actions.BUY_PRIVATES) {
            this.useCWIToken(true);
        } else if (this.selectedAction() === Actions.USE_PRIVATES) {
            if (this.useablePrivates().length === 1) {
                this.selectPrivate(this.useablePrivates()[0].id);
            }
        } else if (this.selectedAction() === Actions.RUN_ROUTES) {

            const trains = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(company.getRunnableTrains()).map(train => train.clone()).value();
            this.companyTrains(trains);
            __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].emit('drawRoutes', __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(this.companyTrains(), train => train.route));

            if (this.companyTrains().length === 0) {
                this.selectedAllocation(__WEBPACK_IMPORTED_MODULE_8_1846_config_allocations__["a" /* default */].NONE);
            } else {
                this.selectTrain(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.first(this.companyTrains()));
                if (!company.president()) {
                    this.selectedAllocation(__WEBPACK_IMPORTED_MODULE_8_1846_config_allocations__["a" /* default */].NONE);
                }
            }

            if (company.type === __WEBPACK_IMPORTED_MODULE_14_common_model_companyTypes__["a" /* default */].INDEPENDANT) {
                this.selectedAllocation(__WEBPACK_IMPORTED_MODULE_8_1846_config_allocations__["a" /* default */].HALF);
            }
        } else if (this.selectedAction() === Actions.BUY_TRAINS) {
            if (this.getCompaniesWithTrains().length === 0) {
                this.selectedTrainSource('bank');
            }
        } else if (this.selectedAction() === Actions.BANKRUPT) {
            this.commit();
        }
    }

    selectPrivate(companyId) {
        this.selectedPrivateId(companyId);
        this.privatePrice(null);
    }

    selectTrain(train) {
        this.selectedTrain(train.id);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().grid().route = train.route;
    }

    selectAllocation(allocation) {
        this.selectedAllocation(allocation);
    }

    selectCompanyTrainForPurchase(selectedTrain) {
        const selectingTrain = !__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.selectedCompanyTrainsForPurchase(), trainId => trainId === selectedTrain.id);
        if (selectingTrain) {
            const numTrains = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany().numTrainsForLimit();
            const trainLimit = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().trainLimit();
            const numSelected = this.selectedCompanyTrainsForPurchase().length;
            const numLeft = trainLimit - (numSelected + numTrains);
            if (numLeft > 0) {
                this.selectedCompanyTrainsForPurchase.push(selectedTrain.id);
            }
        } else {
            this.selectedCompanyTrainsForPurchase.remove(trainId => trainId === selectedTrain.id);
        }
    }

    isCompanyTrainSelectedForPurchase(id) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.selectedCompanyTrainsForPurchase(), trainId => trainId === id);
    }

    selectBankTrainForPurchase(trainType, amount) {
        this.selectedBankTrainsForPurchase.valueWillMutate();
        if (this.selectedBankTrainsForPurchase()[trainType] === amount) {
            delete this.selectedBankTrainsForPurchase()[trainType];
        } else {
            this.selectedBankTrainsForPurchase()[trainType] = amount;
        }
        this.selectedBankTrainsForPurchase.valueHasMutated();
    }

    isBankTrainSelectedForPurchase(trainType, amount) {
        return this.selectedBankTrainsForPurchase()[trainType] === amount;
    }

    numSelectedBankTrainsForPhaseForPurchase(phaseId) {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        const trainsForPhase = state.bank.getTrainsForPhase(phaseId);
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.reduce(trainsForPhase, (sum, trainType) => {
            return sum + (this.selectedBankTrainsForPurchase()[trainType] || 0);
        }, 0);
    }

    numSelectedBankTrainsForPurchase() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.selectedBankTrainsForPurchase()).values().sum();
    }

    selectForcedTrainForPurchase(selectedTrain) {
        this.selectedForcedTrainForPurchase(selectedTrain.type);
    }

    selectStockForSale(companyId, amount) {
        this.selectedStocksForSale.valueWillMutate();
        if (this.selectedStocksForSale()[companyId] === amount) {
            delete this.selectedStocksForSale()[companyId];
        } else {
            this.selectedStocksForSale()[companyId] = amount;
        }
        this.selectedStocksForSale.valueHasMutated();
    }

    isStockSelectedForSale(companyId, amount) {
        return this.selectedStocksForSale()[companyId] === amount;
    }

    selectTrainToReturn(selectedTrain) {
        this.selectedTrainToReturn(selectedTrain.id);
    }

    interruptionNeeded() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])() || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentCompany()) {
            return false;
        }

        if (this.midInterruption()) {
            return false;
        }

        if (this.mustReturnTrain()) {
            return false;
        }

        const trainLimitIssue = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().publicCompanies, company => {
            return company.hasTooManyTrains();
        });

        return trainLimitIssue ? 'trainLimit' : null;
    }

    midInterruption() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().interruptionType();
    }

    reset() {
        this.selectedAction(null);
        this.numberOfShares(0);
        this.selectedPrivateId(null);
        this.privatePrice(null);
        this.selectedAllocation(null);
        this.selectedTrain(null);
        this.selectedTrainSource(null);
        this.selectedBankTrainsForPurchase({});
        this.selectedCompanyTrainsForPurchase([]);
        this.selectedForcedTrainForPurchase(null);
        this.selectedStocksForSale({});
        this.selectedTrainToReturn(null);
        this.useCWIToken(false);
        this.selectedSteamboatCompany(null);
        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].emit('clearRoutes');
        __WEBPACK_IMPORTED_MODULE_12_common_util_events__["a" /* default */].emit('cancelTilePreview');
    }

    commit() {
        this.action().execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().saveLocalState();
        this.reset();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (OperatingRound);

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class PassCard {
    constructor(definition) {
        definition = definition || {};

        this.id = definition.id;
        this.name = definition.name;
        this.cost = 0;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (PassCard);

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_basePlayer__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_config_companyIds__ = __webpack_require__(5);








class Player extends __WEBPACK_IMPORTED_MODULE_0_common_game_basePlayer__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);

        this.bankrupt = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.observable(this.bankrupt || false);

        this.sharesCanSell = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return {};
            }

            if (this.hasBoughtThisTurn()) {
                return {};
            }

            return __WEBPACK_IMPORTED_MODULE_2_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().publicCompaniesById()).map((company, id) => {
                return {
                    id,
                    company,
                    shares: this.getMaximumAllowedSalesOfCompany(id)
                };
            }).filter(data => data.shares > 0).keyBy('id').value();
        });

        this.hasSharesToSell = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.keys(this.sharesCanSell()).length > 0;
        });

        this.companiesCanBuy = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
                return [];
            }

            if (this.hasBoughtThisTurn()) {
                return [];
            }

            if (this.certificates().length >= __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().certLimit()) {
                return [];
            }

            return __WEBPACK_IMPORTED_MODULE_2_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().publicCompaniesById()).filter((company, id) => this.canBuyCompany(id)).values().value();
        });

        this.canBuy = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.computed(() => {
            return !this.isOverCertLimit() && !this.hasPassedThisTurn() && this.companiesCanBuy().length > 0;
        });

        this.canPass = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.computed(() => {
            return !this.isOverCertLimit() && !this.hasPassedThisTurn() && !this.hasBoughtThisTurn() && !this.hasSoldThisTurn();
        });

        this.canSell = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.computed(() => {
            return !this.hasPassedThisTurn() && !this.hasBoughtThisTurn() && this.hasSharesToSell();
        });
    }

    getNetWorth() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
            return 0;
        }

        return this.cash() + __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.reduce(this.sharesPerCompany(), (sum, num, companyId) => {
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
            if (company.closed()) {
                return sum;
            }
            if (company.type === __WEBPACK_IMPORTED_MODULE_5_common_model_companyTypes__["a" /* default */].PUBLIC) {
                return sum + num * company.price();
            }

            return sum + company.maxBuyInPrice;
        }, 0);
    }

    isOverCertLimit() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        return this.certificates().length > __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().certLimit();
    }

    hasBoughtThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
            return false;
        }

        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'BuyShare' || action.getTypeName() === 'StartCompany';
        });
    }

    hasSoldThisTurn(companyId) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
            return false;
        }
        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        if (!companyId) {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(turn.getActions(), action => {
                return action.getTypeName() === 'SellShares';
            });
        } else {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(turn.getActions(), action => {
                return action.getTypeName() === 'SellShares' && action.companyId === companyId;
            });
        }
    }

    hasSoldThisRound(companyId) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
            return false;
        }
        const round = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().roundHistory.currentRound();
        if (!round) {
            return false;
        }
        return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(round.getActions(), action => {
            return action.getTypeName() === 'SellShares' && action.companyId === companyId && action.playerId === this.id;
        });
    }

    hasPassedThisTurn() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])()) {
            return false;
        }
        const turn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().turnHistory.currentTurn();
        if (!turn) {
            return false;
        }

        return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(turn.getActions(), action => {
            return action.getTypeName() === 'StockRoundPass';
        });
    }

    canStartCompany(companyId) {
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
        return company.opened() === false && this.cash() >= 80;
    }

    getMaximumAllowedSalesOfCompany(companyId, disallowPresidentChange) {
        if (this.hasSoldThisTurn(companyId)) {
            return 0;
        }
        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
        if (!company) {
            return 0;
        }

        if (!company.president()) {
            return 0;
        }

        const ownedShares = this.numSharesOwnedOfCompany(companyId);
        let maxAllowedSales = Math.min(ownedShares, 5 - __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().bank.numSharesOwnedOfCompany(companyId));
        if (maxAllowedSales > 0) {
            const maxOwnedByOtherPlayers = __WEBPACK_IMPORTED_MODULE_2_lodash___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().players()).reject(player => player.id === this.id).map(player => player.numSharesOwnedOfCompany(companyId)).max();
            const canSellPresidentShare = !disallowPresidentChange && maxOwnedByOtherPlayers >= 2;

            if (this.isPresidentOfCompany(companyId) && !canSellPresidentShare) {
                maxAllowedSales = Math.max(ownedShares - 2, 0);
            }

            if (!this.isPresidentOfCompany(companyId) && !company.operated()) {
                maxAllowedSales = 0;
            }
        }
        return maxAllowedSales;
    }

    canBuyCompany(companyId) {
        if (this.hasSoldThisTurn(companyId) || this.hasSoldThisRound(companyId)) {
            return false;
        }

        const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
        if (company.closed()) {
            return false;
        } else if (!company.opened() && !this.canStartCompany(companyId)) {
            return false;
        } else if (this.cash() < __WEBPACK_IMPORTED_MODULE_1_1846_config_prices__["a" /* default */].price(company.priceIndex())) {
            return false;
        } else if (company.shares() === 0 && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().bank.numSharesOwnedOfCompany(companyId) === 0) {
            return false;
        } else if (this.numSharesOwnedOfCompany(companyId) === 6) {
            return false;
        }

        return true;
    }

    getPrivates() {
        return __WEBPACK_IMPORTED_MODULE_2_lodash___default()(this.certificatesById()).keys().map(companyId => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(companyId)).reject({ type: __WEBPACK_IMPORTED_MODULE_5_common_model_companyTypes__["a" /* default */].PUBLIC }).reject(company => company.closed()).sortBy('name').value();
    }

    hasPrivate(id) {
        const privateCert = this.certificatesById()[id] || [];
        if (privateCert.length === 0) {
            return false;
        }

        const privateCo = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_common_game_currentGame__["a" /* default */])().state().getCompany(privateCert[0].companyId);
        return !privateCo.closed() || privateCo.id === __WEBPACK_IMPORTED_MODULE_6_1846_config_companyIds__["a" /* default */].MAIL_CONTRACT;
    }

    getPrivateNames() {
        return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.map(this.getPrivates(), 'name');
    }
}

Player.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Player);

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_actions_draftPrivate__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_actions_draftPass__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_game_sequence__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__ = __webpack_require__(4);







class PrivateDraft {
    constructor(definition) {
        definition = definition || {};

        this.privatesOffered = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.privatesOffered);
        this.revealed = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(false);

        if (!definition.privatesOffered) {
            const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state();
            this.privatesOffered(__WEBPACK_IMPORTED_MODULE_1_lodash___default()(state.undraftedPrivateIds()).take(state.players().length + 2).map(id => {
                return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.startsWith(id, 'pass') ? state.passCardsById[id] : state.privateCompaniesById()[id];
            }).value());
        }

        this.selectedPrivateId = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedPrivateId || (this.privatesOffered().length === 1 ? this.privatesOffered()[0].id : null));
    }

    selectPrivate(id) {
        if (this.privatesOffered().length === 1) {
            return;
        }
        this.selectedPrivateId(this.selectedPrivateId() === id ? null : id);
    }

    commit() {
        new __WEBPACK_IMPORTED_MODULE_2_1846_actions_draftPrivate__["a" /* default */]({
            playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
            privateId: this.selectedPrivateId(),
            offeredIds: __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.map(this.privatesOffered(), 'id')
        }).execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state());
        __WEBPACK_IMPORTED_MODULE_4_1846_game_sequence__["a" /* default */].finishTurn();
    }

    pass() {
        new __WEBPACK_IMPORTED_MODULE_3_1846_actions_draftPass__["a" /* default */]({
            playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
            privateId: this.selectedPrivateId()
        }).execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state());
        __WEBPACK_IMPORTED_MODULE_4_1846_game_sequence__["a" /* default */].finishTurn();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (PrivateDraft);

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_1846_config_prices__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_game_stockBoardEntry__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash__);









class StockBoard extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || { stockBoard: {} };
        super();

        this.stockBoard = __WEBPACK_IMPORTED_MODULE_4_knockout___default.a.observable({});
        // Will have to manage setting this back up on deserialization
        this.subscriptions = {};

        __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.each(__WEBPACK_IMPORTED_MODULE_7_lodash___default.a.range(0, __WEBPACK_IMPORTED_MODULE_0_1846_config_prices__["a" /* default */].getPriceList().length), index => {
            this.stockBoard()[index] = definition.stockBoard[index] || new __WEBPACK_IMPORTED_MODULE_2_1846_game_stockBoardEntry__["a" /* default */]({
                value: __WEBPACK_IMPORTED_MODULE_0_1846_config_prices__["a" /* default */].price(index)
            });
        });

        __WEBPACK_IMPORTED_MODULE_6_common_util_events__["a" /* default */].on('stateUpdated', () => {
            this.stateUpdatedHandler();
        });
    }

    stateUpdatedHandler() {
        __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.each(this.stockBoard(), entry => {
            __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.each(entry.companies(), companyId => {
                const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state().getCompany(companyId);
                this.subscribeToCompany(company);
            });
        });
    }

    toJSON() {
        const plainObject = super.toJSON();
        delete plainObject.subscriptions;
        plainObject.stockBoard = __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.pickBy(plainObject.stockBoard, (entry, index) => entry.companies().length > 0);
        return plainObject;
    }

    restoreEntries(stockBoard) {}

    addCompany(company) {
        this.addToEntry(company);
        this.subscribeToCompany(company);
    }

    removeCompany(companyId) {
        this.removeFromEntry(companyId);
        this.subscriptions[companyId].dispose();
    }

    subscribeToCompany(company) {
        this.subscriptions[company.id] = company.priceIndex.subscribe(() => {
            this.removeFromEntry(company.id);
            this.addToEntry(company);
        });
    }

    removeFromEntry(companyId) {
        __WEBPACK_IMPORTED_MODULE_7_lodash___default()(this.stockBoard()).values().each(entry => {
            entry.companies.remove(item => item === companyId);
        });
    }

    addToEntry(company) {
        this.stockBoard()[company.priceIndex()].companies.push(company.id);
    }

    getCompaniesForPriceIndex(priceIndex) {
        return __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.clone(this.stockBoard()[priceIndex].companies());
    }

    setCompaniesForPriceIndex(priceIndex, companies) {
        this.stockBoard()[priceIndex].companies(__WEBPACK_IMPORTED_MODULE_7_lodash___default.a.clone(companies));
    }

    getPopulatedStockboardCompanies() {
        return __WEBPACK_IMPORTED_MODULE_7_lodash___default()(this.stockBoard()).pickBy(entry => entry.companies().length > 0).mapValues(entry => __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.clone(entry.companies())).value();
    }

    restoreStockboardCompanies(stockboardData) {
        __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.each(stockboardData, (companies, index) => {
            this.stockBoard()[index] = __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.clone(companies);
        });
    }

    getOperatingOrder(reverse) {
        let entries = __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.values(this.stockBoard());
        if (!reverse) {
            entries = __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.reverse(entries);
        }

        const minors = [__WEBPACK_IMPORTED_MODULE_1_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN, __WEBPACK_IMPORTED_MODULE_1_1846_config_companyIds__["a" /* default */].BIG_4];
        const majors = __WEBPACK_IMPORTED_MODULE_7_lodash___default()(entries).map(entry => entry.companies()).flatten().compact().value();
        return __WEBPACK_IMPORTED_MODULE_7_lodash___default.a.reject(__WEBPACK_IMPORTED_MODULE_7_lodash___default.a.concat(minors, majors), companyId => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_common_game_currentGame__["a" /* default */])().state().getCompany(companyId).closed());
    }

}

StockBoard.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (StockBoard);

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_model_serializable__ = __webpack_require__(3);



class StockBoardEntry extends __WEBPACK_IMPORTED_MODULE_2_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super();

        this.value = definition.value;
        this.companies = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.companies || []);
    }
}

StockBoardEntry.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (StockBoardEntry);

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_actions_buyShare__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_actions_sellShares__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_actions_startCompany__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_actions_stockRoundPass__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_1846_game_sequence__ = __webpack_require__(13);









const Actions = {
    SELL: 'sell',
    BUY: 'buy',
    PASS: 'pass'
};

const ShareSources = {
    MARKET: 'market',
    TREASURY: 'treasury'
};

class StockRound {
    constructor(definition) {
        definition = definition || {};

        this.Actions = Actions;
        this.ShareSources = ShareSources;

        this.selectedAction = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedAction);
        this.openingPriceIndex = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.openingPriceIndex);
        this.selectedCompanyId = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.selectedCompanyId);
        this.selectedCompany = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
                return null;
            }
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().publicCompaniesById()[this.selectedCompanyId()];
        });
        this.numberOfShares = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.numberOfShares);
        this.chosenShareSource = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.chosenShareSource);

        this.bankShares = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
                return false;
            }
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer() || !this.selectedCompanyId()) {
                return false;
            }
            const player = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer();
            const company = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().getCompany(this.selectedCompanyId());
            const bankruptcyPrevention = !company.president() && player.numSharesOwnedOfCompany(this.selectedCompanyId()) === 0 && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.numSharesOwnedOfCompany(this.selectedCompanyId()) === 2;
            return bankruptcyPrevention ? 0 : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().bank.numSharesOwnedOfCompany(this.selectedCompanyId());
        });

        this.treasuryShares = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!this.selectedCompany()) {
                return 0;
            }
            return this.selectedCompany().shares();
        });

        this.shareSource = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (this.chosenShareSource()) {
                return this.chosenShareSource();
            }

            if (this.bankShares() && !this.treasuryShares()) {
                return this.ShareSources.MARKET;
            }

            if (this.treasuryShares() && !this.bankShares()) {
                return this.ShareSources.TREASURY;
            }

            return null;
        });

        this.action = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])()) {
                return false;
            }

            if (this.selectedAction() === Actions.BUY && this.selectedCompanyId()) {
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().publicCompaniesById()[this.selectedCompanyId()].opened() && this.shareSource()) {
                    return new __WEBPACK_IMPORTED_MODULE_3_1846_actions_buyShare__["a" /* default */]({
                        playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                        companyId: this.selectedCompanyId(),
                        treasury: this.shareSource() === ShareSources.TREASURY
                    });
                } else if (this.openingPriceIndex()) {
                    return new __WEBPACK_IMPORTED_MODULE_5_1846_actions_startCompany__["a" /* default */]({
                        playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                        companyId: this.selectedCompanyId(),
                        startIndex: this.openingPriceIndex()
                    });
                }
            } else if (this.selectedAction() === Actions.SELL && this.selectedCompanyId() && this.numberOfShares()) {
                return new __WEBPACK_IMPORTED_MODULE_4_1846_actions_sellShares__["a" /* default */]({
                    playerId: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerId(),
                    companyId: this.selectedCompanyId(),
                    count: this.numberOfShares()
                });
            } else if (this.selectedAction() === Actions.PASS) {
                return new __WEBPACK_IMPORTED_MODULE_6_1846_actions_stockRoundPass__["a" /* default */]({
                    playerIndex: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayerIndex()
                });
            }
        });
    }

    getParRange() {
        const cash = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer().cash();
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()([40, 50, 60, 70, 80, 90, 100, 112, 124, 137, 150]).filter(par => par * 2 <= cash).value();
    }

    selectAction(actionId) {
        this.reset();
        this.selectedAction(actionId);
        if (this.selectedAction() === Actions.PASS) {
            this.commit();
        } else if (this.selectedAction() === Actions.SELL && __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.values(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer().sharesCanSell()).length === 1) {
            this.selectCompany(__WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keys(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer().sharesCanSell())[0]);
        }
    }

    selectCompany(companyId) {
        this.selectedCompanyId(companyId);
        if (this.selectedAction() === Actions.SELL && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state().currentPlayer().sharesCanSell()[companyId].shares === 1) {
            this.numberOfShares(1);
        }
    }

    reset() {
        this.chosenShareSource(null);
        this.numberOfShares(null);
        this.openingPriceIndex(null);
        this.selectedCompanyId(null);
        this.selectedAction(null);
    }

    commit() {
        this.action().execute(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state());
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().saveLocalState();
        this.reset();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (StockRound);

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_map_baseGrid__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_map_cell__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_map_offBoardCell__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_common_map_tile__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_config_tileManifest__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_knockout__);














const RowLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'];

const SpecialTiles = {
    A15: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].A15,
    B16: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].PORT_HURON,
    C7: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].C7,
    C9: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CITY,
    C15: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].DETROIT,
    D6: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CHICAGO,
    D14: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CITY,
    D20: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].ERIE,
    E11: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].FORT_WAYNE,
    E17: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CLEVELAND,
    E21: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].SALAMANCA,
    F20: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].HOMEWOOD,
    G3: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CITY,
    G7: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CITY,
    G9: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].INDIANAPOLIS,
    G13: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CITY,
    G15: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CITY,
    G19: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].WHEELING,
    H12: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CINCINNATI,
    I5: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CENTRALIA,
    I15: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].HUNTINGTON,
    K3: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CAIRO,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHICAGO_CONNECTIONS]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CHICAGO_CONNECTIONS,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].ST_LOUIS]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].ST_LOUIS,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].HOLLAND]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].HOLLAND,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].SARNIA]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].SARNIA,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].WINDSOR]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].WINDSOR,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].LOUISVILLE]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].LOUISVILLE,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHARLESTON]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CHARLESTON,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BUFFALO]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].BUFFALO,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BINGHAMTON]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].BINGHAMTON,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].PITTSBURGH]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].PITTSBURGH,
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CUMBERLAND]: __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].CUMBERLAND
};

const ConnectionCosts = {
    B16: { 1: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    SARNIA: { 'B16|4': { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    C15: { 1: { cost: 60, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    WINDSOR: { 'C15|4': { cost: 60, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    E19: { 2: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    F20: { 5: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    F18: { 2: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE } },
    G17: { 1: { cost: 20, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE } },
    G19: {
        5: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE },
        4: { cost: 20, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE },
        1: { cost: 20, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL }
    },
    PITTSBURGH: { 'G19|4': { cost: 20, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].TUNNEL } },
    H12: { 3: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE } },
    I11: { 0: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE } },
    J4: { 1: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE } },
    J6: { 4: { cost: 40, type: __WEBPACK_IMPORTED_MODULE_9_1846_config_terrainTypes__["a" /* default */].BRIDGE } }
};

const OffBoardDefinitions = {
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHICAGO_CONNECTIONS]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHICAGO_CONNECTIONS,
        top: 171,
        left: 9,
        row: 0,
        col: 0,
        width: 304,
        height: 110,
        outline: '-152, -55 152, -55 152, 18 88,55 -152, 55',
        connectionsToNeighborIndex: { 'D6|2': 0 }
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].ST_LOUIS]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].ST_LOUIS,
        top: 778,
        left: 0,
        row: 0,
        col: 0,
        width: 126,
        height: 254,
        direction: 'w',
        ewbonus: 20,
        outline: '-63,-127 3,-91, 1, -19 63,17 63,89 1,127 -63, 127',
        connectionsToNeighborIndex: { 'H2|0': 0, 'I3|1': 1 }
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].HOLLAND]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].HOLLAND,
        top: 30,
        left: 374,
        row: 0,
        col: 0,
        width: 128,
        height: 144,
        connectionsToNeighborIndex: { 'B10|1': 0 }
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].SARNIA]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].SARNIA,
        top: 10,
        left: 994,
        row: 0,
        col: 0,
        width: 128,
        height: 128,
        direction: 'e',
        ewbonus: 20,
        outline: '-64,-8 0,-64 64,-64 64,64 -64,64',
        connectionsToNeighborIndex: { 'B16|4': 0 },
        connectionCosts: ConnectionCosts[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].SARNIA]
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].WINDSOR]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].WINDSOR,
        top: 137,
        left: 932,
        row: 0,
        col: 0,
        width: 188,
        height: 144,
        direction: 'e',
        ewbonus: 30,
        outline: '-94,-36 -31,-72 94,-72 -75,50 -94,41 ',
        connectionsToNeighborIndex: { 'C15|4': 0 },
        connectionCosts: ConnectionCosts[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].WINDSOR]
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].LOUISVILLE]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].LOUISVILLE,
        top: 886,
        left: 498,
        row: 0,
        col: 0,
        width: 126,
        height: 144,
        connectionsToNeighborIndex: { 'I9|5': 0, 'I11|0': 1 }
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHARLESTON]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHARLESTON,
        top: 738,
        left: 932,
        row: 0,
        col: 0,
        width: 126,
        height: 130,
        direction: 'e',
        ewbonus: 20,
        outline: '-63,10 0,-23 0, -65 63,-65, 63,65 -63, 65',
        connections: ['I15|4', 0]
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BUFFALO]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BUFFALO,
        top: 207,
        left: 1195,
        row: 0,
        col: 0,
        width: 174,
        height: 144,
        direction: 'e',
        ewbonus: 30,
        outline: '-87,-26 -43,-72 87,-72 87,72 -40,72 -40,1 ',
        connectionsToNeighborIndex: { 'D20|3': 0, 'D20|4': 1 }
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BINGHAMTON]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BINGHAMTON,
        top: 351,
        left: 1242,
        row: 0,
        col: 0,
        width: 126,
        height: 144,
        direction: 'e',
        ewbonus: 30,
        outline: '-63,-72 63,-72 63,72 -63,72 0,35 0,-35',
        connectionsToNeighborIndex: { 'E21|4': 0 }
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].PITTSBURGH]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].PITTSBURGH,
        top: 495,
        left: 1180,
        row: 0,
        col: 0,
        width: 188,
        height: 178,
        direction: 'e',
        ewbonus: 20,
        outline: '-94,17 -32,-19 -32,-89 94, -89 94,89 -94, 89',
        connectionsToNeighborIndex: { 'F20|4': 0, 'F20|5': 1, 'G19|4': 2 },
        connectionCosts: ConnectionCosts[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].PITTSBURGH]
    },
    [__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CUMBERLAND]: {
        id: __WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CUMBERLAND,
        top: 672,
        left: 1118,
        row: 0,
        col: 0,
        width: 250,
        height: 122,
        direction: 'e',
        ewbonus: 30,
        outline: '-125,-24 -62,-61 125, -61 125,61 -125, 61',
        connectionsToNeighborIndex: { 'G19|5': 0 }
    }
};

class Grid extends __WEBPACK_IMPORTED_MODULE_0_common_map_baseGrid__["a" /* default */] {
    constructor(state) {

        super({ cellSize: 124, cells: [] });
        const needToInitializeState = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.keys(state.tilesByCellId).length === 0;
        this.cells(this.createCells(state));

        this.routing = false;
        this.route = null;
        this.lastTouchedCell = null;
        this.connectNeighbors();
        if (needToInitializeState) {
            this.addTokens(state);
        }

        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('stateUpdated', () => {
            this.stateUpdatedHandler();
        });
        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('drawRoutes', routes => {
            this.drawRoutesHandler(routes);
        });
        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('clearRoutes', () => {
            this.clearRoutesHandler();
        });
        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('global:mouseup', () => {
            this.globalMouseUpHandler();
        });
        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('global:mouseout', () => {
            this.globalMouseOutHandler();
        });
        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('tileUpdated', cellId => {
            this.tileUpdatedHandler(cellId);
        });
        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].on('cancelTilePreview', () => {
            this.tilePreviewCancelHandler();
        });
    }

    stateUpdatedHandler() {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__["a" /* default */])().state().tilesByCellId, (tile, cellId) => {
            this.cellsById()[cellId].tile(tile);
        });

        __WEBPACK_IMPORTED_MODULE_7_common_util_events__["a" /* default */].emit('gridRestored');
    }

    drawRoutesHandler(routes) {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(routes, route => {
            __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(route.cells(), cellData => {
                const tile = this.cellsById()[cellData.id].tile();
                __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(cellData.connections, connection => tile.addRoutedConnection(connection, route.color, route.id));
            });
        });
    }

    clearRoutesHandler() {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(this.cells(), cell => cell.tile().clearRoutedConnections());
        this.route = null;
    }

    globalMouseUpHandler() {
        this.finishRoute();
    }

    globalMouseOutHandler() {
        this.finishRoute();
    }

    tileUpdatedHandler(cellId) {
        this.cellsById()[cellId].tile(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cellId]);
    }

    tilePreviewCancelHandler() {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(this.cellsById(), cell => {
            if (cell.preview()) {
                cell.cancelPreview();
                return false;
            }
        });
    }

    createCells(state) {
        const cells = __WEBPACK_IMPORTED_MODULE_2_lodash___default()(__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.range(0, 11 * 12)).map(value => {

            const row = Math.floor(value / 12);
            const col = value % 12;

            if (row === 0 && col !== 6) {
                return;
            }

            if (row === 1 && (col < 4 || col > 7)) {
                return;
            }

            if (row === 2 && (col < 2 || col > 6)) {
                return;
            }

            if (row === 3 && (col < 2 || col === 7 || col > 9)) {
                return;
            }

            if ((row === 4 || row === 5) && (col < 1 || col > 9)) {
                return;
            }

            if (row === 6 && col > 8) {
                return;
            }

            if (row === 7 && col > 7) {
                return;
            }

            if (row === 8 && (col === 5 || col > 6)) {
                return;
            }

            if (row === 9 && (col < 1 || col > 3)) {
                return;
            }

            if (row === 10 && col !== 0) {
                return;
            }

            const id = Grid.getIDForRowAndColumn(row, col);
            return new __WEBPACK_IMPORTED_MODULE_3_common_map_cell__["a" /* default */]({
                id: id,
                row,
                col,
                top: 30 + (row - 1) * 107,
                left: 2 + ((row - 1) % 2 ? 62 : 0) + col * 124,
                connectionCosts: ConnectionCosts[id]
            });
        }).compact().value();

        const offBoardCells = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.map(__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */], offBoardId => {
            return new __WEBPACK_IMPORTED_MODULE_4_1846_map_offBoardCell__["a" /* default */](OffBoardDefinitions[offBoardId]);
        });

        const allCells = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.concat(cells, offBoardCells);

        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(allCells, cell => {

            const existingTile = state.tilesByCellId[cell.id];
            if (!existingTile) {
                const tile = __WEBPACK_IMPORTED_MODULE_6_1846_config_tileManifest__["a" /* default */].createTile(SpecialTiles[cell.id] || __WEBPACK_IMPORTED_MODULE_1_1846_config_mapTileIds__["a" /* default */].BLANK);
                state.tilesByCellId[cell.id] = tile;
                cell.tile(tile);
            } else {
                cell.tile(existingTile);
            }
        });

        return allCells;
    }

    addTokens(state) {

        const portHuron = this.cellsById()['B16'];
        portHuron.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].GRAND_TRUNK);

        const detroit = this.cellsById()['C15'];
        detroit.tile().addToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].MICHIGAN_SOUTHERN);

        const erie = this.cellsById()['D20'];
        erie.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].NEW_YORK_CENTRAL);

        const erieRemoved = !state.getCompany(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].ERIE);
        if (!erieRemoved) {
            erie.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].ERIE);
        }

        const chicago = this.cellsById()['D6'];
        chicago.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].CHICAGO_WESTERN_INDIANA, 9);

        const prrRemoved = !state.getCompany(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].PENNSYLVANIA);
        if (!prrRemoved) {
            const fortWayne = this.cellsById()['E11'];
            fortWayne.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].PENNSYLVANIA);
        }

        const salamanca = this.cellsById()['E21'];
        if (erieRemoved) {
            salamanca.tile().addToken('removed');
        } else {
            salamanca.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].ERIE);
        }

        const homewood = this.cellsById()['F20'];
        if (prrRemoved) {
            homewood.tile().addToken('removed');
        } else {
            homewood.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].PENNSYLVANIA);
        }

        const indianapolis = this.cellsById()['G9'];
        indianapolis.tile().addToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].BIG_4);

        const wheeling = this.cellsById()['G19'];
        wheeling.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO);

        const cincinnati = this.cellsById()['H12'];
        cincinnati.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].BALTIMORE_OHIO);

        const centralia = this.cellsById()['I5'];
        centralia.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL);

        const candoRemoved = !state.getCompany(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].CHESAPEAKE_OHIO);
        const huntington = this.cellsById()['I15'];
        if (candoRemoved) {
            huntington.tile().addToken('removed');
        } else {
            huntington.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].CHESAPEAKE_OHIO);
        }

        const cairo = this.cellsById()['K3'];
        cairo.tile().addReservedToken(__WEBPACK_IMPORTED_MODULE_10_1846_config_companyIds__["a" /* default */].ILLINOIS_CENTRAL);
    }

    connectNeighbors() {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(this.cells(), cell => {
            cell.neighbors[0] = this.cellsById()[Grid.getIDForRowAndColumn(cell.row - 1, cell.col + (cell.row % 2 ? 0 : 1))];
            cell.neighbors[1] = this.cellsById()[Grid.getIDForRowAndColumn(cell.row, cell.col + 1)];
            cell.neighbors[2] = this.cellsById()[Grid.getIDForRowAndColumn(cell.row + 1, cell.col + (cell.row % 2 ? 0 : 1))];
            cell.neighbors[3] = this.cellsById()[Grid.getIDForRowAndColumn(cell.row + 1, cell.col - (cell.row % 2 ? 1 : 0))];
            cell.neighbors[4] = this.cellsById()[Grid.getIDForRowAndColumn(cell.row, cell.col - 1)];
            cell.neighbors[5] = this.cellsById()[Grid.getIDForRowAndColumn(cell.row - 1, cell.col - (cell.row % 2 ? 1 : 0))];
            // console.log('Cell ' + cell.id + ' Neighbors: [' + (cell.neighbors[0] ? cell.neighbors[0].id : 'None') + ',' +
            //        (cell.neighbors[1] ? cell.neighbors[1].id : 'None') + ',' +
            //        (cell.neighbors[2] ? cell.neighbors[2].id : 'None') + ',' +
            //        (cell.neighbors[3] ? cell.neighbors[3].id : 'None') + ',' +
            //        (cell.neighbors[4] ? cell.neighbors[4].id : 'None') + ',' +
            //        (cell.neighbors[5] ? cell.neighbors[5].id : 'None') + ']');
        });

        const b10 = this.cellsById()['B10'];
        const holland = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].HOLLAND];
        b10.neighbors[4] = holland;
        holland.neighbors = [b10];

        const chicago = this.cellsById()['D6'];
        const chicagoConnections = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHICAGO_CONNECTIONS];
        chicago.neighbors[5] = chicagoConnections;
        chicagoConnections.neighbors = [chicago];

        const stLouis = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].ST_LOUIS];
        const h2 = this.cellsById()['H2'];
        h2.neighbors[3] = stLouis;
        const i3 = this.cellsById()['I3'];
        i3.neighbors[4] = stLouis;
        stLouis.neighbors = [h2, i3];

        const sarnia = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].SARNIA];
        const b16 = this.cellsById()['B16'];
        b16.neighbors[1] = sarnia;
        sarnia.neighbors = [b16];

        const windsor = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].WINDSOR];
        const c15 = this.cellsById()['C15'];
        c15.neighbors[1] = windsor;
        windsor.neighbors = [c15];

        const buffalo = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BUFFALO];
        const d20 = this.cellsById()['D20'];
        d20.neighbors[0] = buffalo;
        d20.neighbors[1] = buffalo;
        buffalo.neighbors = [d20, d20];

        const binghamton = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].BINGHAMTON];
        const e21 = this.cellsById()['E21'];
        e21.neighbors[1] = binghamton;
        binghamton.neighbors = [e21];

        const pittsburgh = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].PITTSBURGH];
        const f20 = this.cellsById()['F20'];
        f20.neighbors[1] = pittsburgh;
        f20.neighbors[2] = pittsburgh;

        const g19 = this.cellsById()['G19'];
        g19.neighbors[1] = pittsburgh;
        g19.neighbors[0] = null;
        pittsburgh.neighbors = [f20, f20, g19];

        const cumberland = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CUMBERLAND];
        g19.neighbors[2] = cumberland;
        cumberland.neighbors = [g19];

        const charleston = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].CHARLESTON];
        const i15 = this.cellsById()['I15'];
        i15.neighbors[1] = charleston;
        charleston.neighbors = [i15];

        const louisville = this.cellsById()[__WEBPACK_IMPORTED_MODULE_11_1846_config_offBoardIds__["a" /* default */].LOUISVILLE];
        const i9 = this.cellsById()['I9'];
        i9.neighbors[2] = louisville;

        const i11 = this.cellsById()['I11'];
        i11.neighbors[3] = louisville;
        louisville.neighbors = [i9, i11];

        const j6 = this.cellsById()['J6'];
        j6.neighbors[5] = null;

        const h4 = this.cellsById()['H4'];
        h4.neighbors[2] = null;

        const c9 = this.cellsById()['C9'];
        c9.neighbors[4] = null;
    }

    static costForCell(id) {}

    static getIDForRowAndColumn(row, column) {
        return RowLetters[row] + (column * 2 + (row % 2 ? 2 : 3));
    }

    onTouchStart(cell) {
        this.onMouseDown(cell);
        if (this.routing) {
            this.lastTouchedCell = cell;
        }
    }

    onTouchMove(originalCell, event) {
        const element = document.elementFromPoint(event.touches[0].clientX, event.touches[0].clientY);
        const object = __WEBPACK_IMPORTED_MODULE_12_knockout___default.a.dataFor(element);
        if (object !== this.lastTouchedCell) {
            this.lastTouchedCell = object;
            this.onMouseOver(object);
        }
    }

    onTouchEnd(cell) {
        this.finishRoute();
    }

    onMouseOver(cell) {
        if (!this.routing) {
            return;
        }

        // If reentering earlier in the route, prune to here
        if (this.route.containsCell(cell.id)) {
            if (this.route.lastCell().id !== cell.id) {
                if (this.route.firstCell().id === cell.id) {
                    this.startRoute(cell);
                    return;
                } else {
                    const index = this.route.cellIndex(cell.id);
                    const removedCells = this.route.pruneAt(index - 1);
                    __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(removedCells, cell => this.cellsById()[cell.id].tile().clearRoutedConnections(this.route.id));
                    cell.tile().clearRoutedConnections(this.route.id);
                }
            }
        }

        if (this.route.isFull()) {
            return;
        }

        // No E/E routes
        const firstCellInRoute = this.cellsById()[this.route.firstCell().id];
        if (firstCellInRoute.direction === 'e' && cell.direction === 'e') {
            return;
        }

        const lastCellInRoute = this.cellsById()[this.route.lastCell().id];

        // Find connections in the current cell which are available for routing
        const connectionsToLastCellInRoute = cell.getConnectionsToCell(lastCellInRoute);
        if (connectionsToLastCellInRoute.length === 0) {
            return;
        }

        const usedCurrentConnectionPoints = {};
        let routeableConnectionsToPrior = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.reject(connectionsToLastCellInRoute, connection => {
            const connectionPoint = connection[0] >= 0 && connection[0] < 7 ? connection[0] : connection[1];
            if (usedCurrentConnectionPoints[connectionPoint]) {
                return true;
            }

            if (cell.tile().hasOtherRoutedConnection(connection, this.route.id)) {
                usedCurrentConnectionPoints[connectionPoint] = true;
                return true;
            }
        });

        if (cell.offboard && routeableConnectionsToPrior.length > 1) {
            routeableConnectionsToPrior = [__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.first(routeableConnectionsToPrior)];
        }

        const cities = __WEBPACK_IMPORTED_MODULE_2_lodash___default()(connectionsToLastCellInRoute).flatten().filter(cityId => cityId > 6).uniq().value();
        const hasOpenCity = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(cities, cityId => {
            return !cell.tile().isBlockedForCompany(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__["a" /* default */])().state().currentCompanyId(), cityId);
        });

        const routeableConnectionsOnCurrent = hasOpenCity ? __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.reject(cell.tile().connections, connection => {
            if (__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.indexOf(cities, __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.max(connection)) < 0) {
                return true;
            }

            const connectionPoint = connection[0] >= 0 && connection[0] < 7 ? connection[0] : connection[1];
            if (usedCurrentConnectionPoints[connectionPoint]) {
                return true;
            }

            if (cell.tile().hasOtherRoutedConnection(connection, this.route.id)) {
                usedCurrentConnectionPoints[connectionPoint] = true;
                return true;
            }
        }) : routeableConnectionsToPrior;

        const lastCellInRouteConnectionsToCurrent = lastCellInRoute.getConnectionsToCell(cell);
        const usedPriorConnectionPoints = {};
        const routeableConnectionsToCurrent = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.reject(lastCellInRouteConnectionsToCurrent, connection => {

            const connectionPoint = connection[0] >= 0 && connection[0] < 7 ? connection[0] : connection[1];
            if (usedPriorConnectionPoints[connectionPoint]) {
                return true;
            }

            if (lastCellInRoute.tile().hasOtherRoutedConnection(connection, this.route.id)) {
                usedPriorConnectionPoints[connectionPoint] = true;
                return true;
            }

            if (!lastCellInRoute.tile().hasRoutedConnection(connection, this.route.id)) {
                return true;
            }
        });

        if (routeableConnectionsToPrior.length === 0) {
            return;
        }
        if (routeableConnectionsToCurrent.length === 0) {
            return;
        }

        // set the correct connections in the previous tile for this route
        let lastCellConnections = [];
        if (this.route.numCells() > 1) {
            // Not a terminus for the route
            const invalidConnectionIds = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.map(lastCellInRoute.tile().getOtherRoutedConnections(this.route.id), connection => __WEBPACK_IMPORTED_MODULE_5_common_map_tile__["a" /* default */].getConnectionId(connection));
            const nextToLastCellInRoute = this.cellsById()[this.route.nextToLastCell().id];
            lastCellConnections = lastCellInRoute.getConnectionsFromNeighborToNeighbor(cell, nextToLastCellInRoute, invalidConnectionIds);
        } else if (lastCellInRoute.id === 'D6') {
            // Chicago is special with the many cities to one
            // Need to find the city with a station
            const routedConnections = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.filter(lastCellInRouteConnectionsToCurrent, connection => lastCellInRoute.tile().hasRoutedConnection(connection, this.route.id));

            const stationedConnection = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(routedConnections, connection => {
                return lastCellInRoute.tile().hasTokenForCompany(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__["a" /* default */])().state().currentCompanyId(), __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.max(connection));
            });

            lastCellConnections = stationedConnection ? [stationedConnection] : routedConnections;
        } else {
            lastCellConnections = [__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.first(routeableConnectionsToCurrent)];
        }

        lastCellInRoute.tile().clearRoutedConnections(this.route.id);
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(lastCellConnections, connection => {
            lastCellInRoute.tile().addRoutedConnection(connection, 0, this.route.id);
        });
        this.route.updateConnections(lastCellInRoute.id, lastCellConnections);

        // Now add the connections in our current tile

        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(routeableConnectionsOnCurrent, connection => cell.tile().addRoutedConnection(connection, 0, this.route.id));

        // Add the cell to the route
        this.route.addCell(cell.id, routeableConnectionsOnCurrent);

        // Cap off the route if full
        if (this.route.isFull()) {

            const chicagoStation = cell.id === 'D6' && routeableConnectionsToPrior.length > 1;
            const connection = chicagoStation ? __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(routeableConnectionsToPrior, connection => {
                return cell.tile().hasTokenForCompany(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__["a" /* default */])().state().currentCompanyId(), __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.max(connection));
            }) : __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.first(routeableConnectionsToPrior);
            cell.tile().clearRoutedConnections(this.route.id);
            cell.tile().addRoutedConnection(connection, 0, this.route.id);
            this.route.updateConnections(cell.id, [connection]);
        }

        const valid = this.route.isValid();
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(this.route.cells(), cell => this.cellsById()[cell.id].tile().updateRoutedConnectionsColor(this.route.id, valid ? this.route.color : 0));
    }

    onMouseOut(target) {}

    startRoute(cell) {
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(this.route.cells(), cell => this.cellsById()[cell.id].tile().clearRoutedConnections(this.route.id));
        this.route.clear();
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(cell.tile().getUnroutedConnections(), connection => cell.tile().addRoutedConnection(connection, 0, this.route.id));
        this.route.addCell(cell.id, cell.tile().getUnroutedConnections);
    }

    onMouseDown(cell) {
        if (cell.tile().getRevenue() > 0 && this.route) {
            this.startRoute(cell);
            this.routing = true;
        }
    }

    finishRoute() {
        if (!this.routing) {
            return;
        }

        const removedCells = this.route.pruneToLastRevenueLocation();
        __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(removedCells, cell => this.cellsById()[cell.id].tile().clearRoutedConnections(this.route.id));

        if (!this.route.isValid()) {
            __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.each(this.route.cells(), cell => this.cellsById()[cell.id].tile().clearRoutedConnections(this.route.id));
            this.route.clear();
        } else {
            const lastCell = this.cellsById()[this.route.lastCell().id];
            const nextToLastCell = this.cellsById()[this.route.nextToLastCell().id];
            if (__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.keys(lastCell.tile().cities).length > 0) {
                const priorConnections = lastCell.getConnectionsToCell(nextToLastCell);
                const usedConnectionPoints = {};
                const routeablePriorConnections = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.reject(priorConnections, connection => {
                    const connectionPoint = connection[0] >= 0 && connection[0] < 7 ? connection[0] : connection[1];
                    if (usedConnectionPoints[connectionPoint]) {
                        return true;
                    }

                    if (lastCell.tile().hasOtherRoutedConnection(connection, this.route.id)) {
                        usedConnectionPoints[connectionPoint] = true;
                        return true;
                    }
                });

                const chicagoStation = lastCell.id === 'D6' && routeablePriorConnections.length > 1;
                const connection = chicagoStation ? __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(routeablePriorConnections, connection => {
                    return lastCell.tile().hasTokenForCompany(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_common_game_currentGame__["a" /* default */])().state().currentCompanyId(), __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.max(connection));
                }) : __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.first(routeablePriorConnections);
                lastCell.tile().clearRoutedConnections(this.route.id);
                lastCell.tile().addRoutedConnection(connection, this.route.color, this.route.id);
                this.route.updateConnections(lastCell.id, [connection]);
            }
        }

        this.routing = false;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Grid);

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_map_cell__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



class OffBoardCell extends __WEBPACK_IMPORTED_MODULE_0_common_map_cell__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);
        this.offboard = true;
        this.connectionsToNeighborIndex = definition.connectionsToNeighborIndex || {};
        this.direction = definition.direction;
    }

    getConnectionPointAtIndex(neighbor, index) {
        const neighborConnectionId = neighbor.id + '|' + index;
        const point = this.connectionsToNeighborIndex[neighborConnectionId];

        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isNumber(point) ? point : -1;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (OffBoardCell);

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_game_baseState__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_roundHistory__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_game_turnHistory__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_game_actionHistory__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_1846_game_passCard__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_knockout__);











class State extends __WEBPACK_IMPORTED_MODULE_1_common_game_baseState__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);

        this.id = definition.id;
        this.version = definition.version || 0;
        this.local = definition.local;

        this.winner = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.winner);
        this.players = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observableArray(definition.players || []);

        this.playersById = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.keyBy(this.players(), 'id');
        });
        this.playersByOrder = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.sortBy(this.players(), player => player.order());
        });

        this.lastPlayerId = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.currentPlayerId);

        this.interruptedCompanyId = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.interruptedCompanyId);
        this.interruptionType = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.interruptionType);

        this.currentPlayerIndex = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.currentPlayerIndex || 0);
        this.currentPlayerId = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return this.players()[this.currentPlayerIndex()].id;
        });
        this.currentPlayer = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return this.players()[this.currentPlayerIndex()];
        });
        this.currentPhaseId = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.currentPhaseId || __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_I);
        this.currentCompanyId = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.currentCompanyId);

        this.firstPassIndex = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.firstPassIndex);

        this.priorityDealIndex = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.priorityDealIndex);
        this.priorityDealPlayerId = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            if (!__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.isNumber(this.priorityDealIndex())) {
                return null;
            }
            return this.players()[this.priorityDealIndex()].id;
        });
        this.trainLimit = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.trainLimit || 4);

        this.publicCompanies = definition.publicCompanies || [];
        this.publicCompaniesById = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.keyBy(this.publicCompanies, 'id');
        });
        this.privateCompanies = definition.privateCompanies || [];
        this.privateCompaniesById = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.keyBy(this.privateCompanies, 'id');
        });
        this.allCompaniesById = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default()(this.publicCompanies).concat(this.privateCompanies).keyBy('id').value();
        });
        this.openCompanies = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.reject(this.publicCompanies, company => company.closed());
        });

        this.certLimit = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return this.calculateCertLimit();
        });

        this.currentCompany = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            return this.currentCompanyId() ? this.getCompany(this.currentCompanyId()) : null;
        });

        this.passCards = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.map(__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.range(1, this.players().length + 1), val => {
            return new __WEBPACK_IMPORTED_MODULE_6_1846_game_passCard__["a" /* default */]({
                id: 'pass' + val,
                name: 'Pass ' + val
            });
        });
        this.passCardsById = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.keyBy(this.passCards, 'id');
        this.undraftedPrivateIds = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observableArray(definition.undraftedPrivateIds || __WEBPACK_IMPORTED_MODULE_0_lodash___default()(this.privateCompanies).map('id').concat(__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.map(this.passCards, 'id')).shuffle().value());

        this.stockBoard = definition.stockBoard;
        this.bank = definition.bank;
        this.manifest = definition.manifest;

        this.roundHistory = definition.roundHistory || new __WEBPACK_IMPORTED_MODULE_2_common_game_roundHistory__["a" /* default */]();
        this.turnHistory = definition.turnHistory || new __WEBPACK_IMPORTED_MODULE_3_common_game_turnHistory__["a" /* default */]();
        this.actionHistory = definition.actionHistory || new __WEBPACK_IMPORTED_MODULE_4_common_game_actionHistory__["a" /* default */]();

        this.roundName = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            const currentRound = this.roundHistory.getCurrentRound();
            if (!currentRound) {
                return '';
            }

            return currentRound.getRoundName();
        });

        this.roundType = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            const currentRound = this.roundHistory.getCurrentRound();
            if (!currentRound) {
                return '';
            }

            return currentRound.roundType;
        });

        this.roundNumber = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.computed(() => {
            const currentRound = this.roundHistory.getCurrentRound();
            if (!currentRound) {
                return '';
            }

            return currentRound.number;
        });

        this.tilesByCellId = definition.tilesByCellId || {};
        this.operatingOrder = __WEBPACK_IMPORTED_MODULE_9_knockout___default.a.observable(definition.operatingOrder || []);
    }

    calculateCertLimit() {
        const numOpenCompanies = this.openCompanies().length;
        const numPlayers = this.players().length;
        if (numPlayers === 3) {
            return numOpenCompanies > 4 ? 14 : 11;
        } else if (numPlayers === 4) {
            return numOpenCompanies > 5 ? 12 : numOpenCompanies > 4 ? 10 : 8;
        } else {
            return numOpenCompanies > 6 ? 11 : numOpenCompanies > 5 ? 10 : numOpenCompanies > 4 ? 8 : 6;
        }
    }

    isOperatingRound() {
        return !this.winner() && this.roundType() === __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_1 || this.roundType() === __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_2;
    }

    isStockRound() {
        return !this.winner() && this.roundType() === __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__["a" /* default */].STOCK_ROUND;
    }

    isOperatingRound1() {
        return !this.winner() && this.roundType() === __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_1;
    }

    isOperatingRound2() {
        return !this.winner() && this.roundType() === __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_2;
    }

    isPrivateDraft() {
        return !this.winner() && this.roundType() === __WEBPACK_IMPORTED_MODULE_7_1846_config_roundTypes__["a" /* default */].PRIVATE_DRAFT;
    }

    getPriorPhase() {
        if (this.currentPhaseId() === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_IV) {
            return __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_III;
        } else if (this.currentPhaseId() === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_III) {
            return __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_II;
        }

        return __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_I;
    }

    getNextPhase() {
        if (this.currentPhaseId() === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_I) {
            return __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_II;
        } else if (this.currentPhaseId() === __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_II) {
            return __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_III;
        }

        return __WEBPACK_IMPORTED_MODULE_5_1846_config_phaseIds__["a" /* default */].PHASE_IV;
    }

    getCompany(companyId) {
        return this.allCompaniesById()[companyId];
    }

    getOperatingCompanies() {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.map(this.operatingOrder(), companyId => this.getCompany(companyId));
    }

    trySerialize() {
        console.log(this.serialize());
    }

    tryDeserialize() {
        const state = __WEBPACK_IMPORTED_MODULE_8_common_model_serializable__["a" /* default */].deserialize(this.serialize());
    }

}

State.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (State);

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);





class ActionHistory extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super();

        this.actions = __WEBPACK_IMPORTED_MODULE_1_knockout___default.a.observableArray(definition.actions || []);
        this.lastCommittedIndex = __WEBPACK_IMPORTED_MODULE_1_knockout___default.a.observable(definition.lastCommittedIndex || 0);
    }

    addAction(action) {
        this.actions.push(action);
    }

    canUndo() {
        return this.currentIndex() > this.lastCommittedIndex();
    }

    undo() {
        const state = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_currentGame__["a" /* default */])().state();
        const action = this.actions.pop();
        action.doUndo(state);
    }

    currentIndex() {
        return this.actions().length;
    }

    getActionRange(start, end) {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.slice(this.actions(), start, end);
    }

    undoRange(start, end) {
        const actualEnd = end || this.actions().length;

        if (actualEnd <= start) {
            return [];
        }

        __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.each(__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.range(start, actualEnd), () => {
            this.undo();
        });
    }

    commit() {
        this.lastCommittedIndex(this.currentIndex());
    }
}

ActionHistory.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (ActionHistory);

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_validationError__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__ = __webpack_require__(12);







class Bank extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);
        this.cash = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.cash || 0);
        this.trainsByPhase = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.trainsByPhase || {});
        this.certificates = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.certificates || []);
        this.certificatesById = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.groupBy(this.certificates(), 'companyId');
        });
    }

    getTrainsForPhase(phase) {
        if (phase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I) {
            return [__WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_2];
        } else if (phase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II) {
            return [__WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_3_5, __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_4];
        } else if (phase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III) {
            return [__WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_4_6, __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_5];
        } else if (phase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV) {
            return [__WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_6, __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_7_8];
        }
    }

    getAvailableTrainsForPhase(phase) {
        return phase === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV ? 99 : this.trainsByPhase()[phase];
    }

    removeTrains(type, count) {
        this.trainsByPhase.valueWillMutate();
        if (type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_2) {
            this.trainsByPhase()[__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I] -= count || 1;
        } else if (type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_3_5 || type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_4) {
            this.trainsByPhase()[__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II] -= count || 1;
        } else if (type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_4_6 || type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_5) {
            this.trainsByPhase()[__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III] -= count || 1;
        }
        this.trainsByPhase.valueHasMutated();
    }

    addTrains(type, count) {
        this.trainsByPhase.valueWillMutate();
        if (type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_2) {
            this.trainsByPhase()[__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I] += count || 1;
        } else if (type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_3_5 || type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_4) {
            this.trainsByPhase()[__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II] += count || 1;
        } else if (type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_4_6 || type === __WEBPACK_IMPORTED_MODULE_5_1846_config_trainIds__["a" /* default */].TRAIN_5) {
            this.trainsByPhase()[__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III] += count || 1;
        }
        this.trainsByPhase.valueHasMutated();
    }

    cheapestCostForTrainPhase(phaseId) {
        if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_I) {
            return 80;
        } else if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_II) {
            return 160;
        } else if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_III) {
            return 450;
        } else if (phaseId === __WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */].PHASE_IV) {
            return 800;
        }
    }

    getCheapestTrainCost() {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */]).values().map(phaseId => {
            const trains = this.trainsByPhase()[phaseId];
            if (trains > 0 || trains === -1) {
                return this.cheapestCostForTrainPhase(phaseId);
            }
            return null;
        }).compact().min();
    }

    getFirstAvailablePhaseTrains() {
        const phase = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(__WEBPACK_IMPORTED_MODULE_4_1846_config_phaseIds__["a" /* default */]).values().find(phaseId => {
            const trains = this.trainsByPhase()[phaseId];
            return trains > 0 || trains === -1;
        });
        return this.getTrainsForPhase(phase);
    }

    addCash(amount) {
        this.cash(this.cash() + amount);
    }

    removeCash(amount) {
        this.cash(this.cash() - amount);
    }

    addCert(cert) {
        this.certificates.push(cert);
    }

    addCerts(certs) {
        this.certificates.push.apply(this.certificates, certs);
    }

    removeCert(companyId) {
        const certs = this.certificates();
        const indexToRemove = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.findIndex(certs, { companyId });
        if (indexToRemove < 0) {
            throw __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_common_game_validationError__["a" /* default */])('Cert to remove from bank not found!');
        }
        const removedCert = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.pullAt(certs, indexToRemove)[0];
        this.certificates(certs);
        return removedCert;
    }

    numSharesOwnedOfCompany(companyId) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.certificatesById()[companyId] || []).sumBy('shares');
    }

    removeCertsById(ids) {
        return this.certificates.remove(cert => {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(ids, cert.id) >= 0;
        });
    }

    removeNonPresidentCertsForCompany(count, companyId) {
        const certIdsToRemove = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.certificatesById()[companyId]).sortBy('president').reverse().take(count).map('id').value();
        return this.certificates.remove(cert => {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.indexOf(certIdsToRemove, cert.id) >= 0;
        });
    }

    removeAllCertsForCompany(companyId) {
        return this.certificates.remove(cert => {
            return cert.companyId === companyId;
        });
    }

    hasPresidentCertForCompany(companyId) {
        return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.find(this.certificatesById()[companyId] || [], cert => cert.president);
    }

    removePresidentCertForCompany(companyId) {
        if (!this.hasPresidentCertForCompany(companyId)) {
            throw new __WEBPACK_IMPORTED_MODULE_2_common_game_validationError__["a" /* default */]('No president cert!');
        }

        return this.certificates.remove(cert => {
            return cert.companyId === companyId && cert.president;
        })[0];
    }
}

Bank.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Bank);

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

class BaseGame {
    constructor(definition) {}

}

/* harmony default export */ __webpack_exports__["a"] = (BaseGame);

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_short_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_game_validationError__ = __webpack_require__(14);






class BasePlayer extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);
        this.id = definition.id || __WEBPACK_IMPORTED_MODULE_1_short_uuid___default()().new();
        this.user = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.user);
        this.cash = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.cash || 0);
        this.worth = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.worth || 0);
        this.order = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(definition.order || 0);
        this.certificates = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(definition.certificates);
        this.certificatesById = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.groupBy(this.certificates(), 'companyId');
        });

        this.ownedCompanyIds = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.keys(this.certificatesById()).sort();
        });

        this.presidentCompanyIds = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default()(this.certificates()).filter({ president: true }).sortBy('companyId').map('companyId').value();
        });

        this.sharesPerCompany = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default()(this.ownedCompanyIds()).zipObject(__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.map(this.ownedCompanyIds(), companyId => __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.sumBy(this.certificatesById()[companyId], 'shares'))).value();
        });

        this.popoverParams = {
            content: '<div data-bind="template: { name: \'views/playerPopover\' }"></div>'
        };

        this.name = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            const user = this.user();
            return user ? user.username : this.id;
        });
    }

    addCash(amount) {
        this.cash(this.cash() + amount);
    }

    removeCash(amount) {
        this.cash(this.cash() - amount);
    }

    isPresidentOfCompany(companyId) {
        return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.indexOf(this.presidentCompanyIds(), companyId) >= 0;
    }

    numSharesOwnedOfCompany(companyId) {
        return this.sharesPerCompany()[companyId] || 0;
    }

    addCert(cert) {
        this.certificates.push(cert);
    }

    addCerts(certs) {
        this.certificates.push.apply(this.certificates, certs);
    }

    removeNonPresidentCertsForCompany(count, companyId) {
        const numShares = this.sharesPerCompany()[companyId];
        if (numShares < count || this.isPresidentOfCompany(companyId) && numShares < count + 2) {
            throw new __WEBPACK_IMPORTED_MODULE_4_common_game_validationError__["a" /* default */]('Not enough shares!');
        }

        const certIdsToRemove = __WEBPACK_IMPORTED_MODULE_2_lodash___default()(this.certificatesById()[companyId]).sortBy('president').reverse().take(count).map('id').value();
        return this.certificates.remove(cert => {
            return __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.indexOf(certIdsToRemove, cert.id) >= 0;
        });
    }

    removePresidentCertForCompany(companyId) {
        if (!this.isPresidentOfCompany(companyId)) {
            throw new __WEBPACK_IMPORTED_MODULE_4_common_game_validationError__["a" /* default */]('No director Cert!');
        }

        return this.certificates.remove(cert => {
            return cert.companyId === companyId && cert.president;
        })[0];
    }

    removeAllCertsForCompany(companyId) {
        return this.certificates.remove(cert => {
            return cert.companyId === companyId;
        });
    }

    removePrivate(id) {
        const privates = this.certificates.remove(cert => cert.companyId === id);
        return privates.length > 0 ? privates[0] : null;
    }

    toJSON() {
        const plainObject = super.toJSON();
        delete plainObject.popoverParams;
        return plainObject;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (BasePlayer);

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_model_serializable__ = __webpack_require__(3);


class BaseState extends __WEBPACK_IMPORTED_MODULE_0_common_model_serializable__["a" /* default */] {
    constructor() {
        super();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (BaseState);

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_actionGroup__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_1846_config_roundTypes__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_short_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);






class Round extends __WEBPACK_IMPORTED_MODULE_0_common_game_actionGroup__["a" /* default */] {

    constructor(definition) {
        definition.type = 'round';
        super(definition);

        this.id = definition.id || __WEBPACK_IMPORTED_MODULE_3_short_uuid___default()().new();
        this.roundType = definition.roundType;
        this.number = definition.number;
        this.actionStartIndex = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.isNumber(definition.actionStartIndex) ? definition.actionStartIndex : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])() ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.currentIndex() : 0;
    }

    getRoundName() {
        if (this.roundType === __WEBPACK_IMPORTED_MODULE_2_1846_config_roundTypes__["a" /* default */].PRIVATE_DRAFT) {
            return 'Privates Draft';
        } else if (this.roundType === __WEBPACK_IMPORTED_MODULE_2_1846_config_roundTypes__["a" /* default */].STOCK_ROUND) {
            return 'SR' + this.number;
        } else if (this.roundType === __WEBPACK_IMPORTED_MODULE_2_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_1) {
            return 'OR' + this.number + '.1';
        } else if (this.roundType === __WEBPACK_IMPORTED_MODULE_2_1846_config_roundTypes__["a" /* default */].OPERATING_ROUND_2) {
            return 'OR' + this.number + '.2';
        }
        return '';
    }
}

Round.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Round);

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_round__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);





class RoundHistory extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);
        this.rounds = __WEBPACK_IMPORTED_MODULE_1_knockout___default.a.observableArray(definition.rounds || []);
        this.currentRound = __WEBPACK_IMPORTED_MODULE_1_knockout___default.a.observable(definition.currentRound);
    }

    startRound(type, number) {
        number = number || __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.last(this.rounds()).number;
        this.currentRound(new __WEBPACK_IMPORTED_MODULE_2_common_game_round__["a" /* default */]({
            roundType: type,
            number: number
        }));
    }

    commitRound() {
        this.currentRound().commit();
        this.rounds.push(this.currentRound());
        this.currentRound(null);
    }

    getCurrentRound() {
        return this.currentRound();
    }

    lastRound() {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.last(this.rounds());
    }

    getRound(id) {
        return this.currentRound() && this.currentRound().id === id ? this.currentRound() : __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.find(this.rounds(), { id });
    }

    getAllRounds() {
        const all = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.clone(this.rounds());
        if (this.currentRound()) {
            all.push(this.currentRound());
        }
        return all;
    }
}

RoundHistory.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (RoundHistory);

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_game_actionGroup__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_knockout__);





class Turn extends __WEBPACK_IMPORTED_MODULE_0_common_game_actionGroup__["a" /* default */] {

    constructor(definition) {
        definition.type = 'turn';
        super(definition);

        const state = definition.state;

        this.number = definition.number;
        this.playerId = definition.playerId || state.currentPlayerId();
        this.actionGroups = definition.actionGroups || [];
        this.inProgress = __WEBPACK_IMPORTED_MODULE_3_knockout___default.a.observableArray(definition.inProgress || []);
        this.actionStartIndex = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.isUndefined(definition.actionStartIndex) ? state.actionHistory.currentIndex() : definition.actionStartIndex;
        this.context = definition.context || {};
    }

    undoLast() {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.undo();
    }

    commitActionGroup() {
        console.log('Committing ' + __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.last(this.inProgress()).type);
        const actionGroup = this.inProgress.pop();
        actionGroup.actionEndIndex = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.currentIndex();
        this.actionGroups.push(actionGroup);
    }

    rollbackPrior() {
        const prior = this.actionGroups.pop();
        console.log('Rolling back ' + prior.type);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.undoRange(prior.actionStartIndex);
    }

    rollbackActionGroup() {
        console.log('Rolling back ' + last.type);
        const actionGroup = this.inProgress.pop();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.undoRange(actionGroup.actionStartIndex);
    }

    startActionGroup(type) {
        console.log('Starting group ' + type);
        const actionGroup = new __WEBPACK_IMPORTED_MODULE_0_common_game_actionGroup__["a" /* default */]({
            type: type,
            actionStartIndex: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().state().actionHistory.currentIndex()
        });
        this.inProgress.push(actionGroup);
    }

    getCurrentSummaries() {
        const inProgress = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.last(this.inProgress());
        return inProgress ? inProgress.getSummaries() : this.getSummaries();
    }

}

Turn.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Turn);

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_turn__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__ = __webpack_require__(3);





class TurnHistory extends __WEBPACK_IMPORTED_MODULE_3_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);
        this.turns = __WEBPACK_IMPORTED_MODULE_1_knockout___default.a.observableArray(definition.turns || []);
        this.currentTurn = __WEBPACK_IMPORTED_MODULE_1_knockout___default.a.observable(definition.currentTurn);
    }

    startTurn(args) {
        args = args || {};
        this.currentTurn(new __WEBPACK_IMPORTED_MODULE_2_common_game_turn__["a" /* default */]({
            number: this.nextTurnNumber(),
            context: args.turnContext,
            state: args.state
        }));
    }

    rollbackTurn() {
        if (this.currentTurn()) {
            this.currentTurn().undo();
        }
    }

    rollbackCurrentAction() {
        this.currentTurn().rollbackActionGroup();
    }

    commitTurn() {
        this.currentTurn().commit();
        this.turns.push(this.currentTurn());
        this.currentTurn(null);
    }

    undoLastTurn() {
        const turn = this.turns.pop();
        turn.undo();
    }

    getCurrentTurn() {
        return this.currentTurn();
    }

    lastTurn() {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.last(this.turns());
    }

    nextTurnNumber() {
        return this.turns().length + 1;
    }

    getTurnsForRange(startIndex, endIndex) {
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.filter(this.turns(), turn => turn.isWithinRange(startIndex, endIndex));
    }

}

TurnHistory.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (TurnHistory);

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



class BaseGrid {
    constructor(data) {
        this.cellSize = data.cellSize;
        this.cells = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray(data.cells);
        this.cellsById = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.keyBy(this.cells(), 'id');
        });
    }

}

/* harmony default export */ __webpack_exports__["a"] = (BaseGrid);

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_short_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__ = __webpack_require__(3);



class Certificate extends __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        super();
        definition = definition || {};
        this.id = definition.id || __WEBPACK_IMPORTED_MODULE_0_short_uuid___default()().new();
        this.companyId = definition.companyId;
        this.shares = definition.shares;
        this.president = definition.president;
    }
}

Certificate.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Certificate);

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_model_company__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_companyTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_knockout__);




class PrivateCompany extends __WEBPACK_IMPORTED_MODULE_0_common_model_company__["a" /* default */] {
    constructor(definition) {
        definition = definition || {};
        super(definition);

        this.cost = definition.cost || 0;
        this.baseCost = definition.baseCost || 0;
        this.maxBuyInPrice = definition.maxBuyInPrice || 0;
        this.income = definition.income || 0;
        this.hasAbility = definition.hasAbility;
        this.used = __WEBPACK_IMPORTED_MODULE_2_knockout___default.a.observable(definition.used || false);
    }
}

PrivateCompany.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (PrivateCompany);

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_short_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_map_tile__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_config_trainDefinitions__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_util_events__ = __webpack_require__(7);









class Route extends __WEBPACK_IMPORTED_MODULE_1_common_model_serializable__["a" /* default */] {
    constructor(definition) {
        super();
        definition = definition || {};
        this.id = definition.id || __WEBPACK_IMPORTED_MODULE_0_short_uuid___default()().new();
        this.color = definition.color || __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.random(1, 4);
        this.companyId = definition.companyId;
        this.maxStops = definition.maxStops;
        this.revenueStops = definition.revenueStops;
        this.numStops = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.observable(definition.numStops || 0);
        this.cells = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.observableArray(definition.cells || []);
        this.revenue = __WEBPACK_IMPORTED_MODULE_5_knockout___default.a.observable(definition.revenue || 0);
        if (definition.trainType) {
            this.configureForTrain(definition.trainType);
        }
    }

    configureForTrain(trainType) {
        const trainDefinition = __WEBPACK_IMPORTED_MODULE_3_1846_config_trainDefinitions__["a" /* default */][trainType];
        this.maxStops = trainDefinition.stops;
        this.revenueStops = trainDefinition.payingStops;
    }

    calculateRevenue() {
        const companyId = this.companyId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().currentCompanyId();
        let ewBonus = false;
        if (this.numStops() >= 2) {
            const firstStop = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[this.firstCell().id];
            const lastStop = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[this.lastCell().id];

            if (__WEBPACK_IMPORTED_MODULE_4_lodash___default()([firstStop, lastStop]).map('direction').sort().join('') === 'ew') {
                ewBonus = true;
            }
        }
        const revenueData = __WEBPACK_IMPORTED_MODULE_4_lodash___default()(this.cells()).map(cellData => {
            const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cellData.id];
            return {
                hasStation: tile.hasTokenForCompany(companyId),
                revenue: tile.getRevenue(cellData.id, companyId, ewBonus)
            };
        }).sortBy(cellData => {
            return (cellData.hasStation ? 'b' : 'c') + '-' + (999 - cellData.revenue);
        }).value();

        let revenue = revenueData.length > 0 ? __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.first(revenueData).revenue + __WEBPACK_IMPORTED_MODULE_4_lodash___default()(revenueData).tail(revenueData).sortBy('revenue').reverse().take(this.revenueStops - 1).sumBy('revenue') : 0;

        this.revenue(revenue);
    }

    isValid() {

        if (this.cells().length < 2) {
            return false;
        }

        // count revenue cells
        const companyId = this.companyId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().currentCompanyId();
        const revenueCells = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.filter(this.cells(), cellData => {
            const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cellData.id];
            return tile.getRevenue(cellData.id, companyId);
        });

        if (revenueCells.length < 2) {
            return false;
        }

        if (revenueCells.length > 2) {
            const blocked = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.find(__WEBPACK_IMPORTED_MODULE_4_lodash___default.a.slice(revenueCells, 1, revenueCells.length - 1), cellData => {
                const cityId = this.getConnectedCityForConnections(cellData.connections);
                if (cityId < 7) {
                    return false;
                }
                const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cellData.id];
                return tile.isBlockedForCompany(companyId, cityId);
            });
            if (blocked) {
                return false;
            }
        }

        return __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.find(revenueCells, cellData => {
            const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cellData.id];
            const cityId = __WEBPACK_IMPORTED_MODULE_4_lodash___default()(cellData.connections).flatten().max();
            return tile.hasTokenForCompany(companyId, cityId);
        });
    }

    getConnectedCityForConnections(connections) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash___default()(connections).flatten().max();
    }

    isFull() {
        return this.numStops() === this.maxStops;
    }

    clear() {
        this.numStops(0);
        this.cells([]);
        this.calculateRevenue();
    }

    addCell(id, connections) {
        const companyId = this.companyId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().currentCompanyId();
        const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[id];
        if (tile.getRevenue(id, companyId) > 0) {
            this.numStops(this.numStops() + 1);
        }
        this.cells.push({ id, connections });
        this.calculateRevenue();
    }

    pruneToCell(id) {
        const index = this.cellIndex(id);
        return this.pruneAt(index);
    }

    pruneAt(index) {
        const cells = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.takeRight(this.cells(), this.numCells() - index - 1);
        __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.each(cells, cell => {
            const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cell.id];
            if (tile.getRevenue() > 0) {
                this.numStops(this.numStops() - 1);
            }
        });
        this.cells(__WEBPACK_IMPORTED_MODULE_4_lodash___default.a.take(this.cells(), index + 1));
        this.calculateRevenue();

        return cells;
    }

    pruneToLastRevenueLocation() {
        const index = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.findLastIndex(this.cells(), cellData => {
            const tile = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_common_game_currentGame__["a" /* default */])().state().tilesByCellId[cellData.id];
            return tile.getRevenue() > 0;
        });

        let pruned = [];
        if (index < 1) {
            pruned = this.cells();
            this.clear();
        } else {
            pruned = this.pruneAt(index);
        }

        return pruned;
    }

    numCells() {
        return this.cells().length;
    }

    containsCell(id) {
        return this.cellIndex(id) >= 0;
    }

    cellIndex(id) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.findIndex(this.cells(), cell => cell.id === id);
    }

    getCell(id) {
        return __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.find(this.cells(), cell => cell.id === id);
    }

    firstCell() {
        return __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.first(this.cells());
    }

    lastCell() {
        return __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.last(this.cells());
    }

    nextToLastCell() {
        return __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.nth(this.cells(), this.numCells() - 2);
    }

    updateConnections(cellId, connections) {
        const cell = this.getCell(cellId);
        cell.connections = connections;
    }

    upgradeConnections(cellId, oldTile, newTile) {
        const cell = this.getCell(cellId);
        if (!cell) {
            return;
        }
        const upgradedConnectionsById = oldTile.getUpgradedConnections(newTile);

        cell.connections = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.map(cell.connections, connection => {
            const connectionId = __WEBPACK_IMPORTED_MODULE_2_common_map_tile__["a" /* default */].getConnectionId(connection);
            return upgradedConnectionsById[connectionId];
        });
        this.calculateRevenue(this.companyId);
    }
}

Route.registerClass();

/* harmony default export */ __webpack_exports__["a"] = (Route);

/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class User {
    constructor(definition) {
        definition = definition || {};
        this.id = definition.id;
        this.local = definition.local;
        this.username = definition.username;
        this.email = definition.email;
        this.passwordHash = definition.passwordHash;
        this.passwordSalt = definition.passwordSalt;
        this.verified = definition.verified || false;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (User);

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_game_gameRecord__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_ui_newGameForm__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_1846_game_game__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_1846_game_sequence__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_common_util_knockoutBootstrapBindings__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_knockout_delegated_events__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_knockout_delegated_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_knockout_delegated_events__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_common_util_history__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_lz_string__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_lz_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_lz_string__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_common_model_serializable__ = __webpack_require__(3);














const ActivePanelIDs = {
    ACTIVE_GAMES: 'active_games',
    COMPLETED_GAMES: 'completed_games',
    NEW_GAME: 'new_game'
};

function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    const regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)", "i"),
          results = regex.exec(url);
    if (!results) {
        return null;
    }
    if (!results[2]) {
        return '';
    }
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

class Dashboard {
    constructor() {
        this.game = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])();
        });

        this.availableGames = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray();
        this.completedGames = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observableArray();
        this.newGameForm = new __WEBPACK_IMPORTED_MODULE_3_common_ui_newGameForm__["a" /* default */]();

        this.activePanel = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(ActivePanelIDs.ACTIVE_GAMES);
        this.ActivePanelIDs = ActivePanelIDs;
        this.rootPath = '/18www/';
        this.rootPathForHistory = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.computed(() => {
            if (this.rootPath === '/') {
                return this.rootPath;
            } else {
                return this.rootPath.substring(0, this.rootPath.length - 1);
            }
        });

        __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].on('newGameCreated', record => {
            this.loadAvailableGames();
            this.launchGame(record);
        });

        this.loadAvailableGames();

        __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].on('nav-change', state => {
            this.checkNavigation(state);
        });

        // _.delay(()=> {
        //     this.fileInput = document.getElementById('fileInput');
        //     this.fileInput.addEventListener('change', (e) => {
        //         this.loadState();
        //     });
        // },1000);

        __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].emit('app-ready');
    }

    resetGame() {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])()) {
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].emit('game-reset');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('trackLaid');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('gridRestored');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('undo');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('turnEnd');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('stateUpdated');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('drawRoutes');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('clearRoutes');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('global:mouseup');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('global:mouseout');
            __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].removeAllListeners('tileUpdated');
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])(null);
        }
    }

    checkNavigation(state) {
        const fromState = state && state.game;

        this.resetGame();

        const gameId = fromState ? state.game : getParameterByName('game');
        if (gameId) {
            const record = __WEBPACK_IMPORTED_MODULE_2_common_game_gameRecord__["a" /* default */].load(gameId);
            if (record) {
                this.launchGame(record, fromState);
                return;
            }
        }

        __WEBPACK_IMPORTED_MODULE_10_common_util_history__["a" /* default */].replaceState({}, 'Games', this.rootPathForHistory());
    }

    setActivePanel(newPanel) {
        this.activePanel(newPanel);
    }

    loadAvailableGames() {
        this.availableGames(__WEBPACK_IMPORTED_MODULE_7_lodash___default.a.orderBy(__WEBPACK_IMPORTED_MODULE_2_common_game_gameRecord__["a" /* default */].list(), ['startDate', 'name']));
    }

    showDashboard() {
        this.resetGame();
        __WEBPACK_IMPORTED_MODULE_10_common_util_history__["a" /* default */].pushState({}, 'Games', this.rootPathForHistory());
    }

    launchGame(record, fromState) {
        const state = record.loadCurrentState();
        const game = new __WEBPACK_IMPORTED_MODULE_4_1846_game_game__["a" /* default */]({ record: record, state: state });
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])(game);
        game.sequence.restore();
        __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].emit('stateUpdated');
        if (!fromState) {
            __WEBPACK_IMPORTED_MODULE_10_common_util_history__["a" /* default */].pushState({ game: record.id }, record.name, this.rootPathForHistory() + '?game=' + record.id);
        }
    }

    onMouseUp() {
        __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].emit('global:mouseup');
    }

    onMouseOut() {
        __WEBPACK_IMPORTED_MODULE_9_common_util_events__["a" /* default */].emit('global:mouseout');
    }

    downloadState() {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])()) {
            return;
        }
        const record = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_common_game_currentGame__["a" /* default */])().record;
        const state = record.loadCurrentState();
        const download = {
            record: record.serialize(),
            state: state.serialize()
        };
        const element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + __WEBPACK_IMPORTED_MODULE_11_lz_string___default.a.compressToEncodedURIComponent(JSON.stringify(download)));
        element.setAttribute('download', '1846-' + record.name + '-state');
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    sendBugEmail() {
        const link = "mailto:justin.waugh@gmail.com?subject=1846 Bug Report";
        const element = document.createElement('a');
        element.setAttribute('href', link);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    loadState() {
        const file = this.fileInput.files[0];
        const reader = new FileReader();
        reader.onload = function (e) {
            const decompressed = JSON.parse(__WEBPACK_IMPORTED_MODULE_11_lz_string___default.a.decompressFromEncodedURIComponent(reader.result));
            const record = __WEBPACK_IMPORTED_MODULE_2_common_game_gameRecord__["a" /* default */].deserialize(decompressed.record);
            const state = __WEBPACK_IMPORTED_MODULE_12_common_model_serializable__["a" /* default */].deserialize(decompressed.state);
            record.save(state);
        };

        reader.readAsText(file);
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Dashboard);

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_server_user__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_1846_game_game__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_common_game_gameRecord__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_common_util_events__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_short_uuid__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_short_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_short_uuid__);








class NewGameForm {
    constructor() {

        this.type = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable('1846');
        this.name = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
        this.numPlayers = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable(3);
        this.player1 = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
        this.player2 = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
        this.player3 = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
        this.player4 = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
        this.player5 = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.observable();
        this.players = [this.player1, this.player2, this.player3, this.player4, this.player5];
    }

    setNumPlayers(num) {
        if (num < 5) {
            this.player5(null);
        }

        if (num < 4) {
            this.player4(null);
        }
        this.numPlayers(num);
    }

    createLocalGame() {
        const users = __WEBPACK_IMPORTED_MODULE_1_lodash___default()(this.players).take(this.numPlayers()).map((playerName, index) => {
            return new __WEBPACK_IMPORTED_MODULE_2_common_server_user__["a" /* default */]({ id: __WEBPACK_IMPORTED_MODULE_6_short_uuid___default()().new(), username: playerName() || 'Player ' + (index + 1) });
        }).value();
        const state = __WEBPACK_IMPORTED_MODULE_3_1846_game_game__["a" /* default */].createInitialState(users);
        const gameRecord = new __WEBPACK_IMPORTED_MODULE_4_common_game_gameRecord__["a" /* default */]({
            type: this.type(),
            name: this.name() || 'New Game',
            location: 'local',
            startDate: new Date().toISOString().substring(0, 10),
            players: users.length,
            round: state.roundHistory.currentRound().getRoundName(),
            turn: state.currentPlayer().name()
        });
        gameRecord.create(state, state);
        __WEBPACK_IMPORTED_MODULE_5_common_util_events__["a" /* default */].emit('newGameCreated', gameRecord);
    }

}

/* harmony default export */ __webpack_exports__["a"] = (NewGameForm);

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_common_util_events__ = __webpack_require__(7);


class History {
    constructor() {
        this.history = window.history && window.history.pushState ? window.history : { pushState: function () {}, replaceState: function () {}, back: function () {}, state: null };
        window.onpopstate = function (event) {
            __WEBPACK_IMPORTED_MODULE_0_common_util_events__["a" /* default */].emit('nav-change', event.state);
        };

        __WEBPACK_IMPORTED_MODULE_0_common_util_events__["a" /* default */].on('app-ready', () => {
            __WEBPACK_IMPORTED_MODULE_0_common_util_events__["a" /* default */].emit('nav-change', this.history.state);
        });
    }

    pushState(state, title, url) {
        self.history.pushState(state, title, url);
    }

    replaceState(state, title, url) {
        self.history.replaceState(state, title, url);
    }

    back() {
        self.history.back();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (new History());

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);



function cleanupPopover(element, dispose) {
    $(element).off('inserted.bs.popover');
    $(element).off('shown.bs.popover');
    $(element).off('hidden.bs.popover');

    if (currentPopover === element) {
        $(currentPopover).popover('hide');
        currentPopover = null;
    }

    if (dispose) {
        $(element).popover('dispose');
    }
}

function setupPopover(element, args, bindingContext) {

    __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.defaults(args, {
        placement: 'auto',
        trigger: 'click',
        removeOnDestroy: true,
        bindContent: true,
        html: true,
        closestDiv: false
    });

    const target = args.closestDiv ? $(element).parent().closest('div') : $(element);
    const targetElement = target[0];
    let enabledSubscription = null;

    const popover = target.popover(args);

    if (args.bindContent) {
        popover.on('inserted.bs.popover', function (e) {
            const pop = popover.data('bs.popover').tip;
            __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.cleanNode(pop);
            __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.applyBindingsToDescendants(bindingContext, pop);
        });
    }

    popover.on('shown.bs.popover', function (e) {
        if (currentPopover && currentPopover !== targetElement) {
            $(currentPopover).popover('hide');
        }

        if (args.onShow) {
            const pop = popover.data('bs.popover').tip;
            args.onShow(pop);
        }
        currentPopover = targetElement;
    });

    popover.on('hidden.bs.popover', function (e) {
        if (args.onHide) {
            const pop = popover.data('bs.popover').tip;
            args.onHide(pop);
        }

        if (currentPopover === targetElement) {
            currentPopover = null;
        }
    });
    //TODO: store this somewhere we can get at it from the element
    if (args.enabledObservable) {
        if (!args.enabledObservable()) {
            $(targetElement).popover('disable');
        }
        enabledSubscription = args.enabledObservable.subscribe(value => {
            if (value) {
                $(targetElement).popover('enable');
            } else {
                $(targetElement).popover('disable');
            }
        });
    }

    __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.utils.domNodeDisposal.addDisposeCallback(element, function () {
        if (enabledSubscription) {
            enabledSubscription.dispose();
        }
        cleanupPopover(targetElement, true);
    });
}

let currentPopover = null;

__WEBPACK_IMPORTED_MODULE_0_knockout___default.a.bindingHandlers.popover = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        const args = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.utils.unwrapObservable(valueAccessor());
        setupPopover(element, args, bindingContext);
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        const args = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.utils.unwrapObservable(valueAccessor());
        const target = args.closestDiv ? $(element).parent().closest('div') : $(element);
        const targetElement = target[0];
        cleanupPopover(targetElement);
        setupPopover(element, args, bindingContext);
    }
};

__WEBPACK_IMPORTED_MODULE_0_knockout___default.a.extenders.numeric = function (target, max) {
    //create a writable computed observable to intercept writes to our observable
    const result = __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.pureComputed({
        read: target, //always return the original observables value
        write: function (newValue) {
            const current = target();
            let valueToWrite = __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isNaN(newValue) || __WEBPACK_IMPORTED_MODULE_1_lodash___default.a.isNull(newValue) ? null : +newValue;
            if (valueToWrite && max && valueToWrite > max()) {
                valueToWrite = max();
            }

            //only write if it changed
            if (valueToWrite !== current) {
                target(valueToWrite);
            } else {
                //if the rounded value is the same, but a different value was written, force a notification for the current field
                if (newValue !== current) {
                    target.notifySubscribers(valueToWrite);
                }
            }
        }
    }).extend({ notify: 'always' });

    //initialize with current value to make sure it is rounded appropriately
    result(target());

    //return the new computed observable
    return result;
};
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(32)))

/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lz_string__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lz_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lz_string__);



class LocalStore {

    static getStorage() {
        return (typeof window !== 'undefined' ? window : global).localStorage;
    }

    static list(namespace) {
        const storage = LocalStore.getStorage();
        return __WEBPACK_IMPORTED_MODULE_0_lodash___default()(__WEBPACK_IMPORTED_MODULE_0_lodash___default.a.range(0, storage.length)).map(index => {
            const key = storage.key(index);
            if (!namespace || __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.startsWith(key, namespace)) {
                return storage.getItem(key);
            }
        }).compact().value();
    }

    static store(key, value, namespace) {
        const storage = LocalStore.getStorage();
        storage.setItem(namespace ? namespace + ':' + key : key, value);
    }

    static storeCompressed(key, value, namespace) {
        const storage = LocalStore.getStorage();
        const compressed = __WEBPACK_IMPORTED_MODULE_1_lz_string___default.a.compress(value);
        storage.setItem(namespace ? namespace + ':' + key : key, compressed);
    }

    static load(key, namespace) {
        const storage = LocalStore.getStorage();
        return storage.getItem(namespace ? namespace + ':' + key : key);
    }

    static loadCompressed(key, namespace) {
        const storage = LocalStore.getStorage();
        const item = storage.getItem(namespace ? namespace + ':' + key : key);
        const decompressed = __WEBPACK_IMPORTED_MODULE_1_lz_string___default.a.decompress(item);
        return decompressed || item;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (LocalStore);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(20)))

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);


// This is mega crappy stuff right here.
const templateContext = __webpack_require__(162);

//define a template source that simply treats the template name as its content
const sources = {},
      engine = new __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.nativeTemplateEngine();

//create a template source that loads its template using the require.js text plugin
__WEBPACK_IMPORTED_MODULE_0_knockout___default.a.templateSources.webpackTemplate = function (key, data) {
    this.key = key;
    this.templateData = data;
    this.requested = false;
    this.retrieved = false;
};

__WEBPACK_IMPORTED_MODULE_0_knockout___default.a.templateSources.webpackTemplate.prototype.text = function (value) {
    //always return the current template
    if (arguments.length === 0) {
        return this.templateData;
    }
};

//our engine needs to understand when to create a "requireTemplate" template source
engine.makeTemplateSource = function (template, doc) {
    let el;

    //if a name is specified
    if (typeof template === "string") {
        //if there is an element with this id and it is a script tag, then use it
        el = (doc || document).getElementById(template);

        if (el && el.tagName.toLowerCase() === "script") {
            return new __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.templateSources.domElement(el);
        }

        //otherwise pull the template in using the AMD loader's text plugin
        if (!(template in sources)) {
            const raw = templateContext('./' + template + '.html');
            const start = raw.indexOf('"') + 1;
            const end = raw.lastIndexOf('"');
            const templateData = raw.substring(start, end).replace(/\\"/g, '"').replace(/\\n/g, '');
            sources[template] = new __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.templateSources.webpackTemplate(template, templateData);
        }

        //keep a single template source instance for each key, so everyone depends on the same observable
        return sources[template];
    }
    //if there is no name (foreach/with) use the elements as the template, as normal
    else if (template && (template.nodeType === 1 || template.nodeType === 8)) {
            return new __WEBPACK_IMPORTED_MODULE_0_knockout___default.a.templateSources.anonymousTemplate(template);
        }
};

//make this new template engine our default engine
__WEBPACK_IMPORTED_MODULE_0_knockout___default.a.setTemplateEngine(engine);

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * Bootstrap v4.0.0-beta.3 (https://getbootstrap.com)
  * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
(function (global, factory) {
	 true ? factory(exports, __webpack_require__(32), __webpack_require__(154)) :
	typeof define === 'function' && define.amd ? define(['exports', 'jquery', 'popper.js'], factory) :
	(factory((global.bootstrap = {}),global.jQuery,global.Popper));
}(this, (function (exports,$,Popper) { 'use strict';

$ = $ && $.hasOwnProperty('default') ? $['default'] : $;
Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Util = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */
  var transition = false;
  var MAX_UID = 1000000; // shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: transition.end,
      delegateType: transition.end,
      handle: function handle(event) {
        if ($$$1(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined; // eslint-disable-line no-undefined
      }
    };
  }

  function transitionEndTest() {
    if (window.QUnit) {
      return false;
    }

    return {
      end: 'transitionend'
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    $$$1(this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    transition = transitionEndTest();
    $$$1.fn.emulateTransitionEnd = transitionEndEmulator;

    if (Util.supportsTransitionEnd()) {
      $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
    }
  }

  function escapeId(selector) {
    // we escape IDs in case of special selectors (selector = '#myId:something')
    // $.escapeSelector does not exist in jQuery < 3
    selector = typeof $$$1.escapeSelector === 'function' ? $$$1.escapeSelector(selector).substr(1) : selector.replace(/(:|\.|\[|\]|,|=|@)/g, '\\$1');
    return selector;
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        // eslint-disable-next-line no-bitwise
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        selector = element.getAttribute('href') || '';
      } // if it's an ID


      if (selector.charAt(0) === '#') {
        selector = escapeId(selector);
      }

      try {
        var $selector = $$$1(document).find(selector);
        return $selector.length > 0 ? selector : null;
      } catch (error) {
        return null;
      }
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $$$1(element).trigger(transition.end);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(transition);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
          }
        }
      }
    }
  };
  setTransitionEndSupport();
  return Util;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Alert = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'alert';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 150;
  var Selector = {
    DISMISS: '[data-dismiss="alert"]'
  };
  var Event = {
    CLOSE: "close" + EVENT_KEY,
    CLOSED: "closed" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    ALERT: 'alert',
    FADE: 'fade',
    SHOW: 'show'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Alert =
  /*#__PURE__*/
  function () {
    function Alert(element) {
      this._element = element;
    } // getters


    var _proto = Alert.prototype;

    // public
    _proto.close = function close(element) {
      element = element || this._element;

      var rootElement = this._getRootElement(element);

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._element = null;
    }; // private


    _proto._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = $$$1(selector)[0];
      }

      if (!parent) {
        parent = $$$1(element).closest("." + ClassName.ALERT)[0];
      }

      return parent;
    };

    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $$$1.Event(Event.CLOSE);
      $$$1(element).trigger(closeEvent);
      return closeEvent;
    };

    _proto._removeElement = function _removeElement(element) {
      var _this = this;

      $$$1(element).removeClass(ClassName.SHOW);

      if (!Util.supportsTransitionEnd() || !$$$1(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);

        return;
      }

      $$$1(element).one(Util.TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(TRANSITION_DURATION);
    };

    _proto._destroyElement = function _destroyElement(element) {
      $$$1(element).detach().trigger(Event.CLOSED).remove();
    }; // static


    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $$$1(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);
    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Alert._jQueryInterface;
  $$$1.fn[NAME].Constructor = Alert;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  return Alert;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Button = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'button';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.button';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var ClassName = {
    ACTIVE: 'active',
    BUTTON: 'btn',
    FOCUS: 'focus'
  };
  var Selector = {
    DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
    DATA_TOGGLE: '[data-toggle="buttons"]',
    INPUT: 'input',
    ACTIVE: '.active',
    BUTTON: '.btn'
  };
  var Event = {
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
    FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Button =
  /*#__PURE__*/
  function () {
    function Button(element) {
      this._element = element;
    } // getters


    var _proto = Button.prototype;

    // public
    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];

      if (rootElement) {
        var input = $$$1(this._element).find(Selector.INPUT)[0];

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];

              if (activeElement) {
                $$$1(activeElement).removeClass(ClassName.ACTIVE);
              }
            }
          }

          if (triggerChangeEvent) {
            if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
              return;
            }

            input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
            $$$1(input).trigger('change');
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (addAriaPressed) {
        this._element.setAttribute('aria-pressed', !$$$1(this._element).hasClass(ClassName.ACTIVE));
      }

      if (triggerChangeEvent) {
        $$$1(this._element).toggleClass(ClassName.ACTIVE);
      }
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._element = null;
    }; // static


    Button._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        if (!data) {
          data = new Button(this);
          $$$1(this).data(DATA_KEY, data);
        }

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);
    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    event.preventDefault();
    var button = event.target;

    if (!$$$1(button).hasClass(ClassName.BUTTON)) {
      button = $$$1(button).closest(Selector.BUTTON);
    }

    Button._jQueryInterface.call($$$1(button), 'toggle');
  }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    var button = $$$1(event.target).closest(Selector.BUTTON)[0];
    $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Button._jQueryInterface;
  $$$1.fn[NAME].Constructor = Button;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Button._jQueryInterface;
  };

  return Button;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Carousel = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'carousel';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.carousel';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 600;
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean'
  };
  var Direction = {
    NEXT: 'next',
    PREV: 'prev',
    LEFT: 'left',
    RIGHT: 'right'
  };
  var Event = {
    SLIDE: "slide" + EVENT_KEY,
    SLID: "slid" + EVENT_KEY,
    KEYDOWN: "keydown" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY,
    TOUCHEND: "touchend" + EVENT_KEY,
    LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    CAROUSEL: 'carousel',
    ACTIVE: 'active',
    SLIDE: 'slide',
    RIGHT: 'carousel-item-right',
    LEFT: 'carousel-item-left',
    NEXT: 'carousel-item-next',
    PREV: 'carousel-item-prev',
    ITEM: 'carousel-item'
  };
  var Selector = {
    ACTIVE: '.active',
    ACTIVE_ITEM: '.active.carousel-item',
    ITEM: '.carousel-item',
    NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
    INDICATORS: '.carousel-indicators',
    DATA_SLIDE: '[data-slide], [data-slide-to]',
    DATA_RIDE: '[data-ride="carousel"]'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Carousel =
  /*#__PURE__*/
  function () {
    function Carousel(element, config) {
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this._config = this._getConfig(config);
      this._element = $$$1(element)[0];
      this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];

      this._addEventListeners();
    } // getters


    var _proto = Carousel.prototype;

    // public
    _proto.next = function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    };

    _proto.nextWhenVisible = function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && $$$1(this._element).is(':visible') && $$$1(this._element).css('visibility') !== 'hidden') {
        this.next();
      }
    };

    _proto.prev = function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    };

    _proto.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if ($$$1(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    _proto.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    _proto.to = function to(index) {
      var _this = this;

      this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $$$1(this._element).one(Event.SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    };

    _proto.dispose = function dispose() {
      $$$1(this._element).off(EVENT_KEY);
      $$$1.removeData(this._element, DATA_KEY);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    }; // private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._addEventListeners = function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        $$$1(this._element).on(Event.KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $$$1(this._element).on(Event.MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(Event.MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });

        if ('ontouchstart' in document.documentElement) {
          // if it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          $$$1(this._element).on(Event.TOUCHEND, function () {
            _this2.pause();

            if (_this2.touchTimeout) {
              clearTimeout(_this2.touchTimeout);
            }

            _this2.touchTimeout = setTimeout(function (event) {
              return _this2.cycle(event);
            }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
          });
        }
      }
    };

    _proto._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;

        default:
          return;
      }
    };

    _proto._getItemIndex = function _getItemIndex(element) {
      this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
      return this._items.indexOf(element);
    };

    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);

      var slideEvent = $$$1.Event(Event.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      $$$1(this._element).trigger(slideEvent);
      return slideEvent;
    };

    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $$$1(nextIndicator).addClass(ClassName.ACTIVE);
        }
      }
    };

    _proto._slide = function _slide(direction, element) {
      var _this3 = this;

      var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName.LEFT;
        orderClassName = ClassName.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName.RIGHT;
        orderClassName = ClassName.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      var slidEvent = $$$1.Event(Event.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.SLIDE)) {
        $$$1(nextElement).addClass(orderClassName);
        Util.reflow(nextElement);
        $$$1(activeElement).addClass(directionalClassName);
        $$$1(nextElement).addClass(directionalClassName);
        $$$1(activeElement).one(Util.TRANSITION_END, function () {
          $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
          $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
          _this3._isSliding = false;
          setTimeout(function () {
            return $$$1(_this3._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        $$$1(activeElement).removeClass(ClassName.ACTIVE);
        $$$1(nextElement).addClass(ClassName.ACTIVE);
        this._isSliding = false;
        $$$1(this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    }; // static


    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = _extends({}, Default, $$$1(this).data());

        if (typeof config === 'object') {
          _config = _extends({}, _config, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new Error("No method named \"" + action + "\"");
          }

          data[action]();
        } else if (_config.interval) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $$$1(selector)[0];

      if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
        return;
      }

      var config = _extends({}, $$$1(target).data(), $$$1(this).data());
      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($$$1(target), config);

      if (slideIndex) {
        $$$1(target).data(DATA_KEY).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
  $$$1(window).on(Event.LOAD_DATA_API, function () {
    $$$1(Selector.DATA_RIDE).each(function () {
      var $carousel = $$$1(this);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Carousel._jQueryInterface;
  $$$1.fn[NAME].Constructor = Carousel;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Carousel._jQueryInterface;
  };

  return Carousel;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Collapse = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'collapse';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.collapse';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 600;
  var Default = {
    toggle: true,
    parent: ''
  };
  var DefaultType = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var Event = {
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    SHOW: 'show',
    COLLAPSE: 'collapse',
    COLLAPSING: 'collapsing',
    COLLAPSED: 'collapsed'
  };
  var Dimension = {
    WIDTH: 'width',
    HEIGHT: 'height'
  };
  var Selector = {
    ACTIVES: '.show, .collapsing',
    DATA_TOGGLE: '[data-toggle="collapse"]'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Collapse =
  /*#__PURE__*/
  function () {
    function Collapse(element, config) {
      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = $$$1.makeArray($$$1("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
      var tabToggles = $$$1(Selector.DATA_TOGGLE);

      for (var i = 0; i < tabToggles.length; i++) {
        var elem = tabToggles[i];
        var selector = Util.getSelectorFromElement(elem);

        if (selector !== null && $$$1(selector).filter(element).length > 0) {
          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // getters


    var _proto = Collapse.prototype;

    // public
    _proto.toggle = function toggle() {
      if ($$$1(this._element).hasClass(ClassName.SHOW)) {
        this.hide();
      } else {
        this.show();
      }
    };

    _proto.show = function show() {
      var _this = this;

      if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = $$$1.makeArray($$$1(this._parent).children().children(Selector.ACTIVES));

        if (!actives.length) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $$$1(actives).data(DATA_KEY);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $$$1.Event(Event.SHOW);
      $$$1(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($$$1(actives), 'hide');

        if (!activesData) {
          $$$1(actives).data(DATA_KEY, null);
        }
      }

      var dimension = this._getDimension();

      $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        $$$1(_this._element).trigger(Event.SHOWN);
      };

      if (!Util.supportsTransitionEnd()) {
        complete();
        return;
      }

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll" + capitalizedDimension;
      $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      this._element.style[dimension] = this._element[scrollSize] + "px";
    };

    _proto.hide = function hide() {
      var _this2 = this;

      if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var startEvent = $$$1.Event(Event.HIDE);
      $$$1(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
      Util.reflow(this._element);
      $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

      if (this._triggerArray.length) {
        for (var i = 0; i < this._triggerArray.length; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = $$$1(selector);

            if (!$elem.hasClass(ClassName.SHOW)) {
              $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
      };

      this._element.style[dimension] = '';

      if (!Util.supportsTransitionEnd()) {
        complete();
        return;
      }

      $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
    };

    _proto.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    }; // private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      config.toggle = Boolean(config.toggle); // coerce string values

      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._getDimension = function _getDimension() {
      var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
    };

    _proto._getParent = function _getParent() {
      var _this3 = this;

      var parent = null;

      if (Util.isElement(this._config.parent)) {
        parent = this._config.parent; // it's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = $$$1(this._config.parent)[0];
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
      $$$1(parent).find(selector).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    };

    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      if (element) {
        var isOpen = $$$1(element).hasClass(ClassName.SHOW);

        if (triggerArray.length) {
          $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
        }
      }
    }; // static


    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? $$$1(selector)[0] : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $$$1(this);
        var data = $this.data(DATA_KEY);

        var _config = _extends({}, Default, $this.data(), typeof config === 'object' && config);

        if (!data && _config.toggle && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = $$$1(this);
    var selector = Util.getSelectorFromElement(this);
    $$$1(selector).each(function () {
      var $target = $$$1(this);
      var data = $target.data(DATA_KEY);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Collapse._jQueryInterface;
  $$$1.fn[NAME].Constructor = Collapse;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Collapse._jQueryInterface;
  };

  return Collapse;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Dropdown = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'dropdown';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.dropdown';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
    KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
    KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    DISABLED: 'disabled',
    SHOW: 'show',
    DROPUP: 'dropup',
    DROPRIGHT: 'dropright',
    DROPLEFT: 'dropleft',
    MENURIGHT: 'dropdown-menu-right',
    MENULEFT: 'dropdown-menu-left',
    POSITION_STATIC: 'position-static'
  };
  var Selector = {
    DATA_TOGGLE: '[data-toggle="dropdown"]',
    FORM_CHILD: '.dropdown form',
    MENU: '.dropdown-menu',
    NAVBAR_NAV: '.navbar-nav',
    VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled)'
  };
  var AttachmentMap = {
    TOP: 'top-start',
    TOPEND: 'top-end',
    BOTTOM: 'bottom-start',
    BOTTOMEND: 'bottom-end',
    RIGHT: 'right-start',
    RIGHTEND: 'right-end',
    LEFT: 'left-start',
    LEFTEND: 'left-end'
  };
  var Default = {
    offset: 0,
    flip: true,
    boundary: 'scrollParent'
  };
  var DefaultType = {
    offset: '(number|string|function)',
    flip: 'boolean',
    boundary: '(string|element)'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Dropdown =
  /*#__PURE__*/
  function () {
    function Dropdown(element, config) {
      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    } // getters


    var _proto = Dropdown.prototype;

    // public
    _proto.toggle = function toggle() {
      if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this._element);

      var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
      $$$1(parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      } // Disable totally Popper.js for Dropdown in Navbar


      if (!this._inNavbar) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper === 'undefined') {
          throw new Error('Bootstrap dropdown require Popper.js (https://popper.js.org)');
        }

        var element = this._element; // for dropup with alignment we use the parent as popper container

        if ($$$1(parent).hasClass(ClassName.DROPUP)) {
          if ($$$1(this._menu).hasClass(ClassName.MENULEFT) || $$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
            element = parent;
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (this._config.boundary !== 'scrollParent') {
          $$$1(parent).addClass(ClassName.POSITION_STATIC);
        }

        this._popper = new Popper(element, this._menu, this._getPopperConfig());
      } // if this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && !$$$1(parent).closest(Selector.NAVBAR_NAV).length) {
        $$$1('body').children().on('mouseover', null, $$$1.noop);
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      $$$1(this._menu).toggleClass(ClassName.SHOW);
      $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      $$$1(this._element).off(EVENT_KEY);
      this._element = null;
      this._menu = null;

      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    };

    _proto.update = function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    }; // private


    _proto._addEventListeners = function _addEventListeners() {
      var _this = this;

      $$$1(this._element).on(Event.CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this.toggle();
      });
    };

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, this.constructor.Default, $$$1(this._element).data(), config);
      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);

        this._menu = $$$1(parent).find(Selector.MENU)[0];
      }

      return this._menu;
    };

    _proto._getPlacement = function _getPlacement() {
      var $parentDropdown = $$$1(this._element).parent();
      var placement = AttachmentMap.BOTTOM; // Handle dropup

      if ($parentDropdown.hasClass(ClassName.DROPUP)) {
        placement = AttachmentMap.TOP;

        if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
          placement = AttachmentMap.TOPEND;
        }
      } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
        placement = AttachmentMap.RIGHT;
      } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
        placement = AttachmentMap.LEFT;
      } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
        placement = AttachmentMap.BOTTOMEND;
      }

      return placement;
    };

    _proto._detectNavbar = function _detectNavbar() {
      return $$$1(this._element).closest('.navbar').length > 0;
    };

    _proto._getPopperConfig = function _getPopperConfig() {
      var _this2 = this;

      var offsetConf = {};

      if (typeof this._config.offset === 'function') {
        offsetConf.fn = function (data) {
          data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets) || {});
          return data;
        };
      } else {
        offsetConf.offset = this._config.offset;
      }

      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: offsetConf,
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      };
      return popperConfig;
    }; // static


    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));

      for (var i = 0; i < toggles.length; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);

        var context = $$$1(toggles[i]).data(DATA_KEY);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;

        if (!$$$1(parent).hasClass(ClassName.SHOW)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
        $$$1(parent).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          continue;
        } // if this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          $$$1('body').children().off('mouseover', null, $$$1.noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');
        $$$1(dropdownMenu).removeClass(ClassName.SHOW);
        $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = $$$1(selector)[0];
      }

      return parent || element.parentNode;
    };

    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);

      var isActive = $$$1(parent).hasClass(ClassName.SHOW);

      if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
        if (event.which === ESCAPE_KEYCODE) {
          var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
          $$$1(toggle).trigger('focus');
        }

        $$$1(this).trigger('click');
        return;
      }

      var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();

      if (!items.length) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }]);
    return Dropdown;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    event.preventDefault();
    event.stopPropagation();

    Dropdown._jQueryInterface.call($$$1(this), 'toggle');
  }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
    e.stopPropagation();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Dropdown._jQueryInterface;
  $$$1.fn[NAME].Constructor = Dropdown;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Dropdown._jQueryInterface;
  };

  return Dropdown;
}($, Popper);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Modal = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'modal';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.modal';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 300;
  var BACKDROP_TRANSITION_DURATION = 150;
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    RESIZE: "resize" + EVENT_KEY,
    CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
    KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
    MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top',
    NAVBAR_TOGGLER: '.navbar-toggler'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Modal =
  /*#__PURE__*/
  function () {
    function Modal(element, config) {
      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = $$$1(element).find(Selector.DIALOG)[0];
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._originalBodyPadding = 0;
      this._scrollbarWidth = 0;
    } // getters


    var _proto = Modal.prototype;

    // public
    _proto.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    _proto.show = function show(relatedTarget) {
      var _this = this;

      if (this._isTransitioning || this._isShown) {
        return;
      }

      if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = $$$1.Event(Event.SHOW, {
        relatedTarget: relatedTarget
      });
      $$$1(this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      $$$1(document.body).addClass(ClassName.OPEN);

      this._setEscapeEvent();

      this._setResizeEvent();

      $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
        $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
          if ($$$1(event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    };

    _proto.hide = function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (this._isTransitioning || !this._isShown) {
        return;
      }

      var hideEvent = $$$1.Event(Event.HIDE);
      $$$1(this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      $$$1(document).off(Event.FOCUSIN);
      $$$1(this._element).removeClass(ClassName.SHOW);
      $$$1(this._element).off(Event.CLICK_DISMISS);
      $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);

      if (transition) {
        $$$1(this._element).one(Util.TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        this._hideModal();
      }
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._scrollbarWidth = null;
    };

    _proto.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    }; // private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._showElement = function _showElement(relatedTarget) {
      var _this3 = this;

      var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // don't move modals dom position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.scrollTop = 0;

      if (transition) {
        Util.reflow(this._element);
      }

      $$$1(this._element).addClass(ClassName.SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $$$1.Event(Event.SHOWN, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this3._config.focus) {
          _this3._element.focus();
        }

        _this3._isTransitioning = false;
        $$$1(_this3._element).trigger(shownEvent);
      };

      if (transition) {
        $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        transitionComplete();
      }
    };

    _proto._enforceFocus = function _enforceFocus() {
      var _this4 = this;

      $$$1(document).off(Event.FOCUSIN) // guard against infinite focus loop
      .on(Event.FOCUSIN, function (event) {
        if (document !== event.target && _this4._element !== event.target && !$$$1(_this4._element).has(event.target).length) {
          _this4._element.focus();
        }
      });
    };

    _proto._setEscapeEvent = function _setEscapeEvent() {
      var _this5 = this;

      if (this._isShown && this._config.keyboard) {
        $$$1(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
          if (event.which === ESCAPE_KEYCODE) {
            event.preventDefault();

            _this5.hide();
          }
        });
      } else if (!this._isShown) {
        $$$1(this._element).off(Event.KEYDOWN_DISMISS);
      }
    };

    _proto._setResizeEvent = function _setResizeEvent() {
      var _this6 = this;

      if (this._isShown) {
        $$$1(window).on(Event.RESIZE, function (event) {
          return _this6.handleUpdate(event);
        });
      } else {
        $$$1(window).off(Event.RESIZE);
      }
    };

    _proto._hideModal = function _hideModal() {
      var _this7 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._isTransitioning = false;

      this._showBackdrop(function () {
        $$$1(document.body).removeClass(ClassName.OPEN);

        _this7._resetAdjustments();

        _this7._resetScrollbar();

        $$$1(_this7._element).trigger(Event.HIDDEN);
      });
    };

    _proto._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $$$1(this._backdrop).remove();
        this._backdrop = null;
      }
    };

    _proto._showBackdrop = function _showBackdrop(callback) {
      var _this8 = this;

      var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

      if (this._isShown && this._config.backdrop) {
        var doAnimate = Util.supportsTransitionEnd() && animate;
        this._backdrop = document.createElement('div');
        this._backdrop.className = ClassName.BACKDROP;

        if (animate) {
          $$$1(this._backdrop).addClass(animate);
        }

        $$$1(this._backdrop).appendTo(document.body);
        $$$1(this._element).on(Event.CLICK_DISMISS, function (event) {
          if (_this8._ignoreBackdropClick) {
            _this8._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          if (_this8._config.backdrop === 'static') {
            _this8._element.focus();
          } else {
            _this8.hide();
          }
        });

        if (doAnimate) {
          Util.reflow(this._backdrop);
        }

        $$$1(this._backdrop).addClass(ClassName.SHOW);

        if (!callback) {
          return;
        }

        if (!doAnimate) {
          callback();
          return;
        }

        $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
      } else if (!this._isShown && this._backdrop) {
        $$$1(this._backdrop).removeClass(ClassName.SHOW);

        var callbackRemove = function callbackRemove() {
          _this8._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
          $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    }; // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------


    _proto._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    };

    _proto._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    _proto._checkScrollbar = function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    _proto._setScrollbar = function _setScrollbar() {
      var _this9 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        // Adjust fixed content padding
        $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
          var actualPadding = $$$1(element)[0].style.paddingRight;
          var calculatedPadding = $$$1(element).css('padding-right');
          $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
        }); // Adjust sticky content margin

        $$$1(Selector.STICKY_CONTENT).each(function (index, element) {
          var actualMargin = $$$1(element)[0].style.marginRight;
          var calculatedMargin = $$$1(element).css('margin-right');
          $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
        }); // Adjust navbar-toggler margin

        $$$1(Selector.NAVBAR_TOGGLER).each(function (index, element) {
          var actualMargin = $$$1(element)[0].style.marginRight;
          var calculatedMargin = $$$1(element).css('margin-right');
          $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $$$1('body').css('padding-right');
        $$$1('body').data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
      }
    };

    _proto._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
        var padding = $$$1(element).data('padding-right');

        if (typeof padding !== 'undefined') {
          $$$1(element).css('padding-right', padding).removeData('padding-right');
        }
      }); // Restore sticky content and navbar-toggler margin

      $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function (index, element) {
        var margin = $$$1(element).data('margin-right');

        if (typeof margin !== 'undefined') {
          $$$1(element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = $$$1('body').data('padding-right');

      if (typeof padding !== 'undefined') {
        $$$1('body').css('padding-right', padding).removeData('padding-right');
      }
    };

    _proto._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    }; // static


    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = _extends({}, Modal.Default, $$$1(this).data(), typeof config === 'object' && config);

        if (!data) {
          data = new Modal(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    var _this10 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = $$$1(selector)[0];
    }

    var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _extends({}, $$$1(target).data(), $$$1(this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $$$1(target).one(Event.SHOW, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(Event.HIDDEN, function () {
        if ($$$1(_this10).is(':visible')) {
          _this10.focus();
        }
      });
    });

    Modal._jQueryInterface.call($$$1(target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Modal._jQueryInterface;
  $$$1.fn[NAME].Constructor = Modal;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Modal._jQueryInterface;
  };

  return Modal;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tooltip = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'tooltip';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.tooltip';
  var EVENT_KEY = "." + DATA_KEY;
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 150;
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var DefaultType = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)'
  };
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent'
  };
  var HoverState = {
    SHOW: 'show',
    OUT: 'out'
  };
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    INSERTED: "inserted" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    FOCUSOUT: "focusout" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY
  };
  var ClassName = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    TOOLTIP: '.tooltip',
    TOOLTIP_INNER: '.tooltip-inner',
    ARROW: '.arrow'
  };
  var Trigger = {
    HOVER: 'hover',
    FOCUS: 'focus',
    CLICK: 'click',
    MANUAL: 'manual'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Tooltip =
  /*#__PURE__*/
  function () {
    function Tooltip(element, config) {
      /**
       * Check for Popper dependency
       * Popper - https://popper.js.org
       */
      if (typeof Popper === 'undefined') {
        throw new Error('Bootstrap tooltips require Popper.js (https://popper.js.org)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // getters


    var _proto = Tooltip.prototype;

    // public
    _proto.enable = function enable() {
      this._isEnabled = true;
    };

    _proto.disable = function disable() {
      this._isEnabled = false;
    };

    _proto.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    _proto.toggle = function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $$$1(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $$$1(event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      $$$1.removeData(this.element, this.constructor.DATA_KEY);
      $$$1(this.element).off(this.constructor.EVENT_KEY);
      $$$1(this.element).closest('.modal').off('hide.bs.modal');

      if (this.tip) {
        $$$1(this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;

      if (this._popper !== null) {
        this._popper.destroy();
      }

      this._popper = null;
      this.element = null;
      this.config = null;
      this.tip = null;
    };

    _proto.show = function show() {
      var _this = this;

      if ($$$1(this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $$$1.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        $$$1(this.element).trigger(showEvent);
        var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);
        this.setContent();

        if (this.config.animation) {
          $$$1(tip).addClass(ClassName.FADE);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);

        this.addAttachmentClass(attachment);
        var container = this.config.container === false ? document.body : $$$1(this.config.container);
        $$$1(tip).data(this.constructor.DATA_KEY, this);

        if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
          $$$1(tip).appendTo(container);
        }

        $$$1(this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new Popper(this.element, tip, {
          placement: attachment,
          modifiers: {
            offset: {
              offset: this.config.offset
            },
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: Selector.ARROW
            },
            preventOverflow: {
              boundariesElement: this.config.boundary
            }
          },
          onCreate: function onCreate(data) {
            if (data.originalPlacement !== data.placement) {
              _this._handlePopperPlacementChange(data);
            }
          },
          onUpdate: function onUpdate(data) {
            _this._handlePopperPlacementChange(data);
          }
        });
        $$$1(tip).addClass(ClassName.SHOW); // if this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          $$$1('body').children().on('mouseover', null, $$$1.noop);
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = null;
          $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);

          if (prevHoverState === HoverState.OUT) {
            _this._leave(null, _this);
          }
        };

        if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
          $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
        } else {
          complete();
        }
      }
    };

    _proto.hide = function hide(callback) {
      var _this2 = this;

      var tip = this.getTipElement();
      var hideEvent = $$$1.Event(this.constructor.Event.HIDE);

      var complete = function complete() {
        if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute('aria-describedby');

        $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

        if (_this2._popper !== null) {
          _this2._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $$$1(this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $$$1(tip).removeClass(ClassName.SHOW); // if this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        $$$1('body').children().off('mouseover', null, $$$1.noop);
      }

      this._activeTrigger[Trigger.CLICK] = false;
      this._activeTrigger[Trigger.FOCUS] = false;
      this._activeTrigger[Trigger.HOVER] = false;

      if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
        $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    _proto.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    }; // protected


    _proto.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $$$1(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $$$1(this.getTipElement());
      this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
      $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
    };

    _proto.setElementContent = function setElementContent($element, content) {
      var html = this.config.html;

      if (typeof content === 'object' && (content.nodeType || content.jquery)) {
        // content is a DOM node or a jQuery
        if (html) {
          if (!$$$1(content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($$$1(content).text());
        }
      } else {
        $element[html ? 'html' : 'text'](content);
      }
    };

    _proto.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    }; // private


    _proto._getAttachment = function _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    };

    _proto._setListeners = function _setListeners() {
      var _this3 = this;

      var triggers = this.config.trigger.split(' ');
      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {
            return _this3.toggle(event);
          });
        } else if (trigger !== Trigger.MANUAL) {
          var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
          var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
          $$$1(_this3.element).on(eventIn, _this3.config.selector, function (event) {
            return _this3._enter(event);
          }).on(eventOut, _this3.config.selector, function (event) {
            return _this3._leave(event);
          });
        }

        $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function () {
          return _this3.hide();
        });
      });

      if (this.config.selector) {
        this.config = _extends({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    _proto._fixTitle = function _fixTitle() {
      var titleType = typeof this.element.getAttribute('data-original-title');

      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    _proto._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $$$1(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $$$1(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
      }

      if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
        context._hoverState = HoverState.SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    _proto._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $$$1(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $$$1(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, this.constructor.Default, $$$1(this.element).data(), config);

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $$$1(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
      this._cleanTipClass();

      this.addAttachmentClass(this._getAttachment(data.placement));
    };

    _proto._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute('x-placement') !== null) {
        return;
      }

      $$$1(tip).removeClass(ClassName.FADE);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    }; // static


    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }]);
    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $$$1.fn[NAME] = Tooltip._jQueryInterface;
  $$$1.fn[NAME].Constructor = Tooltip;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Tooltip._jQueryInterface;
  };

  return Tooltip;
}($, Popper);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Popover = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'popover';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.popover';
  var EVENT_KEY = "." + DATA_KEY;
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var CLASS_PREFIX = 'bs-popover';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var Default = _extends({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });
  var DefaultType = _extends({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });
  var ClassName = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    TITLE: '.popover-header',
    CONTENT: '.popover-body'
  };
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    INSERTED: "inserted" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    FOCUSOUT: "focusout" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Popover =
  /*#__PURE__*/
  function (_Tooltip) {
    _inheritsLoose(Popover, _Tooltip);

    function Popover() {
      return _Tooltip.apply(this, arguments) || this;
    }

    var _proto = Popover.prototype;

    // overrides
    _proto.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $$$1(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $$$1(this.getTipElement()); // we use append for html objects to maintain js events

      this.setElementContent($tip.find(Selector.TITLE), this.getTitle());

      var content = this._getContent();

      if (typeof content === 'function') {
        content = content.call(this.element);
      }

      this.setElementContent($tip.find(Selector.CONTENT), content);
      $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
    }; // private


    _proto._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || this.config.content;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $$$1(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    }; // static


    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' ? config : null;

        if (!data && /destroy|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: "VERSION",
      // getters
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }]);
    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $$$1.fn[NAME] = Popover._jQueryInterface;
  $$$1.fn[NAME].Constructor = Popover;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Popover._jQueryInterface;
  };

  return Popover;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var ScrollSpy = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'scrollspy';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.scrollspy';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var Default = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var Event = {
    ACTIVATE: "activate" + EVENT_KEY,
    SCROLL: "scroll" + EVENT_KEY,
    LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    DROPDOWN_ITEM: 'dropdown-item',
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active'
  };
  var Selector = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: '.active',
    NAV_LIST_GROUP: '.nav, .list-group',
    NAV_LINKS: '.nav-link',
    NAV_ITEMS: '.nav-item',
    LIST_ITEMS: '.list-group-item',
    DROPDOWN: '.dropdown',
    DROPDOWN_ITEMS: '.dropdown-item',
    DROPDOWN_TOGGLE: '.dropdown-toggle'
  };
  var OffsetMethod = {
    OFFSET: 'offset',
    POSITION: 'position'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var ScrollSpy =
  /*#__PURE__*/
  function () {
    function ScrollSpy(element, config) {
      var _this = this;

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      $$$1(this._scrollElement).on(Event.SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // getters


    var _proto = ScrollSpy.prototype;

    // public
    _proto.refresh = function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement !== this._scrollElement.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = $$$1.makeArray($$$1(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = $$$1(targetSelector)[0];
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // todo (fat): remove sketch reliance on jQuery position/offset
            return [$$$1(target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      $$$1(this._scrollElement).off(EVENT_KEY);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    }; // private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);

      if (typeof config.target !== 'string') {
        var id = $$$1(config.target).attr('id');

        if (!id) {
          id = Util.getUID(NAME);
          $$$1(config.target).attr('id', id);
        }

        config.target = "#" + id;
      }

      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    _proto._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    _proto._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    _proto._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      for (var i = this._offsets.length; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    _proto._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(','); // eslint-disable-next-line arrow-body-style


      queries = queries.map(function (selector) {
        return selector + "[data-target=\"" + target + "\"]," + (selector + "[href=\"" + target + "\"]");
      });
      var $link = $$$1(queries.join(','));

      if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
        $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        $link.addClass(ClassName.ACTIVE);
      } else {
        // Set triggered link as active
        $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item

        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
      }

      $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
        relatedTarget: target
      });
    };

    _proto._clear = function _clear() {
      $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
    }; // static


    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(window).on(Event.LOAD_DATA_API, function () {
    var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));

    for (var i = scrollSpys.length; i--;) {
      var $spy = $$$1(scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
  $$$1.fn[NAME].Constructor = ScrollSpy;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return ScrollSpy._jQueryInterface;
  };

  return ScrollSpy;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-beta.3): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tab = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'tab';
  var VERSION = '4.0.0-beta.3';
  var DATA_KEY = 'bs.tab';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 150;
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    DROPDOWN: '.dropdown',
    NAV_LIST_GROUP: '.nav, .list-group',
    ACTIVE: '.active',
    ACTIVE_UL: '> li > .active',
    DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
    DROPDOWN_TOGGLE: '.dropdown-toggle',
    DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(element) {
      this._element = element;
    } // getters


    var _proto = Tab.prototype;

    // public
    _proto.show = function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var target;
      var previous;
      var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
        previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $$$1.Event(Event.HIDE, {
        relatedTarget: this._element
      });
      var showEvent = $$$1.Event(Event.SHOW, {
        relatedTarget: previous
      });

      if (previous) {
        $$$1(previous).trigger(hideEvent);
      }

      $$$1(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = $$$1(selector)[0];
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $$$1.Event(Event.HIDDEN, {
          relatedTarget: _this._element
        });
        var shownEvent = $$$1.Event(Event.SHOWN, {
          relatedTarget: previous
        });
        $$$1(previous).trigger(hiddenEvent);
        $$$1(_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._element = null;
    }; // private


    _proto._activate = function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements;

      if (container.nodeName === 'UL') {
        activeElements = $$$1(container).find(Selector.ACTIVE_UL);
      } else {
        activeElements = $$$1(container).children(Selector.ACTIVE);
      }

      var active = activeElements[0];
      var isTransitioning = callback && Util.supportsTransitionEnd() && active && $$$1(active).hasClass(ClassName.FADE);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }
    };

    _proto._transitionComplete = function _transitionComplete(element, active, callback) {
      if (active) {
        $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
        var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      $$$1(element).addClass(ClassName.ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      Util.reflow(element);
      $$$1(element).addClass(ClassName.SHOW);

      if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
        var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];

        if (dropdownElement) {
          $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    }; // static


    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $$$1(this);
        var data = $this.data(DATA_KEY);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new Error("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);
    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call($$$1(this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Tab._jQueryInterface;
  $$$1.fn[NAME].Constructor = Tab;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Tab._jQueryInterface;
  };

  return Tab;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

(function ($$$1) {
  if (typeof $$$1 === 'undefined') {
    throw new Error('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
  }

  var version = $$$1.fn.jquery.split(' ')[0].split('.');
  var minMajor = 1;
  var ltMajor = 2;
  var minMinor = 9;
  var minPatch = 1;
  var maxMajor = 4;

  if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
    throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
  }
})($);

exports.Util = Util;
exports.Alert = Alert;
exports.Button = Button;
exports.Carousel = Carousel;
exports.Collapse = Collapse;
exports.Dropdown = Dropdown;
exports.Modal = Modal;
exports.Popover = Popover;
exports.Scrollspy = ScrollSpy;
exports.Tab = Tab;
exports.Tooltip = Tooltip;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bootstrap.js.map


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(94)(undefined);
// imports


// module
exports.push([module.i, "/*!\n * Bootstrap v4.0.0-beta.3 (https://getbootstrap.com)\n * Copyright 2011-2017 The Bootstrap Authors\n * Copyright 2011-2017 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */:root{--blue:#007bff;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#dc3545;--orange:#fd7e14;--yellow:#ffc107;--green:#28a745;--teal:#20c997;--cyan:#17a2b8;--white:#fff;--gray:#868e96;--gray-dark:#343a40;--primary:#007bff;--secondary:#868e96;--success:#28a745;--info:#17a2b8;--warning:#ffc107;--danger:#dc3545;--light:#f8f9fa;--dark:#343a40;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1200px;--font-family-sans-serif:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";--font-family-monospace:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace}*,::after,::before{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:transparent}@-ms-viewport{width:device-width}article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex=\"-1\"]:focus{outline:0!important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0}address{margin-bottom:1rem;font-style:normal;line-height:inherit}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#0056b3;text-decoration:underline}a:not([href]):not([tabindex]){color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg:not(:root){overflow:hidden}[role=button],a,area,button,input:not([type=range]),label,select,summary,textarea{-ms-touch-action:manipulation;touch-action:manipulation}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#868e96;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;font-family:inherit;font-weight:500;line-height:1.2;color:inherit}.h1,h1{font-size:2.5rem}.h2,h2{font-size:2rem}.h3,h3{font-size:1.75rem}.h4,h4{font-size:1.5rem}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:6rem;font-weight:300;line-height:1.2}.display-2{font-size:5.5rem;font-weight:300;line-height:1.2}.display-3{font-size:4.5rem;font-weight:300;line-height:1.2}.display-4{font-size:3.5rem;font-weight:300;line-height:1.2}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote-footer{display:block;font-size:80%;color:#868e96}.blockquote-footer::before{content:\"\\2014   \\A0\"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#fff;border:1px solid #dee2e6;border-radius:.25rem;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:90%;color:#868e96}code,kbd,pre,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace}code{font-size:87.5%;color:#e83e8c;word-break:break-word}a>code{color:inherit}kbd{padding:.2rem .4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:576px){.container{max-width:540px}}@media (min-width:768px){.container{max-width:720px}}@media (min-width:992px){.container{max-width:960px}}@media (min-width:1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-10,.col-11,.col-12,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-auto,.col-lg,.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-auto,.col-md,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-auto,.col-sm,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-auto{position:relative;width:100%;min-height:1px;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-1{-webkit-box-flex:0;-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-2{-webkit-box-flex:0;-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-webkit-box-flex:0;-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-5{-webkit-box-flex:0;-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-webkit-box-flex:0;-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-8{-webkit-box-flex:0;-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-webkit-box-flex:0;-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-11{-webkit-box-flex:0;-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-1{margin-left:8.333333%}.offset-2{margin-left:16.666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.333333%}.offset-5{margin-left:41.666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.333333%}.offset-8{margin-left:66.666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.333333%}.offset-11{margin-left:91.666667%}@media (min-width:576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-sm-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-sm-1{-webkit-box-flex:0;-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-sm-2{-webkit-box-flex:0;-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-webkit-box-flex:0;-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-sm-5{-webkit-box-flex:0;-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-sm-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-webkit-box-flex:0;-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-sm-8{-webkit-box-flex:0;-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-sm-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-webkit-box-flex:0;-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-sm-11{-webkit-box-flex:0;-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-sm-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-sm-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-sm-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-sm-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-sm-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-sm-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-sm-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-sm-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-sm-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-sm-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-sm-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-sm-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-sm-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.333333%}.offset-sm-2{margin-left:16.666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.333333%}.offset-sm-5{margin-left:41.666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.333333%}.offset-sm-8{margin-left:66.666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.333333%}.offset-sm-11{margin-left:91.666667%}}@media (min-width:768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-md-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-md-1{-webkit-box-flex:0;-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-md-2{-webkit-box-flex:0;-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-webkit-box-flex:0;-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-md-5{-webkit-box-flex:0;-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-md-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-webkit-box-flex:0;-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-md-8{-webkit-box-flex:0;-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-md-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-webkit-box-flex:0;-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-md-11{-webkit-box-flex:0;-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-md-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-md-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-md-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-md-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-md-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-md-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-md-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-md-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-md-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-md-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-md-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-md-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-md-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.333333%}.offset-md-2{margin-left:16.666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.333333%}.offset-md-5{margin-left:41.666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.333333%}.offset-md-8{margin-left:66.666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.333333%}.offset-md-11{margin-left:91.666667%}}@media (min-width:992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-lg-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-lg-1{-webkit-box-flex:0;-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-lg-2{-webkit-box-flex:0;-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-webkit-box-flex:0;-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-lg-5{-webkit-box-flex:0;-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-lg-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-webkit-box-flex:0;-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-lg-8{-webkit-box-flex:0;-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-lg-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-webkit-box-flex:0;-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-lg-11{-webkit-box-flex:0;-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-lg-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-lg-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-lg-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-lg-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-lg-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-lg-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-lg-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-lg-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-lg-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-lg-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-lg-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-lg-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-lg-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.333333%}.offset-lg-2{margin-left:16.666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.333333%}.offset-lg-5{margin-left:41.666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.333333%}.offset-lg-8{margin-left:66.666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.333333%}.offset-lg-11{margin-left:91.666667%}}@media (min-width:1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-xl-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-xl-1{-webkit-box-flex:0;-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-xl-2{-webkit-box-flex:0;-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-webkit-box-flex:0;-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-xl-5{-webkit-box-flex:0;-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-xl-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-webkit-box-flex:0;-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-xl-8{-webkit-box-flex:0;-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-xl-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-webkit-box-flex:0;-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-xl-11{-webkit-box-flex:0;-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-xl-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-xl-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-xl-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-xl-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-xl-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-xl-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-xl-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-xl-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-xl-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-xl-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-xl-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-xl-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-xl-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.333333%}.offset-xl-2{margin-left:16.666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.333333%}.offset-xl-5{margin-left:41.666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.333333%}.offset-xl-8{margin-left:66.666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.333333%}.offset-xl-11{margin-left:91.666667%}}.table{width:100%;max-width:100%;margin-bottom:1rem;background-color:transparent}.table td,.table th{padding:.75rem;vertical-align:top;border-top:1px solid #dee2e6}.table thead th{vertical-align:bottom;border-bottom:2px solid #dee2e6}.table tbody+tbody{border-top:2px solid #dee2e6}.table .table{background-color:#fff}.table-sm td,.table-sm th{padding:.3rem}.table-bordered{border:1px solid #dee2e6}.table-bordered td,.table-bordered th{border:1px solid #dee2e6}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#b8daff}.table-hover .table-primary:hover{background-color:#9fcdff}.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#9fcdff}.table-secondary,.table-secondary>td,.table-secondary>th{background-color:#dddfe2}.table-hover .table-secondary:hover{background-color:#cfd2d6}.table-hover .table-secondary:hover>td,.table-hover .table-secondary:hover>th{background-color:#cfd2d6}.table-success,.table-success>td,.table-success>th{background-color:#c3e6cb}.table-hover .table-success:hover{background-color:#b1dfbb}.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#b1dfbb}.table-info,.table-info>td,.table-info>th{background-color:#bee5eb}.table-hover .table-info:hover{background-color:#abdde5}.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#abdde5}.table-warning,.table-warning>td,.table-warning>th{background-color:#ffeeba}.table-hover .table-warning:hover{background-color:#ffe8a1}.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#ffe8a1}.table-danger,.table-danger>td,.table-danger>th{background-color:#f5c6cb}.table-hover .table-danger:hover{background-color:#f1b0b7}.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f1b0b7}.table-light,.table-light>td,.table-light>th{background-color:#fdfdfe}.table-hover .table-light:hover{background-color:#ececf6}.table-hover .table-light:hover>td,.table-hover .table-light:hover>th{background-color:#ececf6}.table-dark,.table-dark>td,.table-dark>th{background-color:#c6c8ca}.table-hover .table-dark:hover{background-color:#b9bbbe}.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b9bbbe}.table-active,.table-active>td,.table-active>th{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.table .thead-dark th{color:#fff;background-color:#212529;border-color:#32383e}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:#dee2e6}.table-dark{color:#fff;background-color:#212529}.table-dark td,.table-dark th,.table-dark thead th{border-color:#32383e}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:rgba(255,255,255,.05)}.table-dark.table-hover tbody tr:hover{background-color:rgba(255,255,255,.075)}@media (max-width:575.99px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-sm>.table-bordered{border:0}}@media (max-width:767.99px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-md>.table-bordered{border:0}}@media (max-width:991.99px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-lg>.table-bordered{border:0}}@media (max-width:1199.99px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-xl>.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive>.table-bordered{border:0}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:1rem;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.form-control::-webkit-input-placeholder{color:#868e96;opacity:1}.form-control::-moz-placeholder{color:#868e96;opacity:1}.form-control:-ms-input-placeholder{color:#868e96;opacity:1}.form-control::-ms-input-placeholder{color:#868e96;opacity:1}.form-control::placeholder{color:#868e96;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:not([size]):not([multiple]){height:calc(2.25rem + 2px)}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(.375rem + 1px);padding-bottom:calc(.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + 1px);padding-bottom:calc(.5rem + 1px);font-size:1.25rem;line-height:1.5}.col-form-label-sm{padding-top:calc(.25rem + 1px);padding-bottom:calc(.25rem + 1px);font-size:.875rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:.375rem;padding-bottom:.375rem;margin-bottom:0;line-height:1.5;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm,.input-group-lg>.form-control-plaintext.form-control,.input-group-lg>.input-group-append>.form-control-plaintext.btn,.input-group-lg>.input-group-append>.form-control-plaintext.input-group-text,.input-group-lg>.input-group-prepend>.form-control-plaintext.btn,.input-group-lg>.input-group-prepend>.form-control-plaintext.input-group-text,.input-group-sm>.form-control-plaintext.form-control,.input-group-sm>.input-group-append>.form-control-plaintext.btn,.input-group-sm>.input-group-append>.form-control-plaintext.input-group-text,.input-group-sm>.input-group-prepend>.form-control-plaintext.btn,.input-group-sm>.input-group-prepend>.form-control-plaintext.input-group-text{padding-right:0;padding-left:0}.form-control-sm,.input-group-sm>.form-control,.input-group-sm>.input-group-append>.btn,.input-group-sm>.input-group-append>.input-group-text,.input-group-sm>.input-group-prepend>.btn,.input-group-sm>.input-group-prepend>.input-group-text{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.input-group-sm>.input-group-append>select.btn:not([size]):not([multiple]),.input-group-sm>.input-group-append>select.input-group-text:not([size]):not([multiple]),.input-group-sm>.input-group-prepend>select.btn:not([size]):not([multiple]),.input-group-sm>.input-group-prepend>select.input-group-text:not([size]):not([multiple]),.input-group-sm>select.form-control:not([size]):not([multiple]),select.form-control-sm:not([size]):not([multiple]){height:calc(1.8125rem + 2px)}.form-control-lg,.input-group-lg>.form-control,.input-group-lg>.input-group-append>.btn,.input-group-lg>.input-group-append>.input-group-text,.input-group-lg>.input-group-prepend>.btn,.input-group-lg>.input-group-prepend>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.input-group-lg>.input-group-append>select.btn:not([size]):not([multiple]),.input-group-lg>.input-group-append>select.input-group-text:not([size]):not([multiple]),.input-group-lg>.input-group-prepend>select.btn:not([size]):not([multiple]),.input-group-lg>.input-group-prepend>select.input-group-text:not([size]):not([multiple]),.input-group-lg>select.form-control:not([size]):not([multiple]),select.form-control-lg:not([size]):not([multiple]){height:calc(2.875rem + 2px)}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:.25rem}.form-row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:.3rem;margin-left:-1.25rem}.form-check-input:disabled~.form-check-label{color:#868e96}.form-check-label{margin-bottom:0}.form-check-inline{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:0;margin-right:.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#28a745}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;width:250px;padding:.5rem;margin-top:.1rem;font-size:.875rem;line-height:1;color:#fff;background-color:rgba(40,167,69,.8);border-radius:.2rem}.custom-select.is-valid,.form-control.is-valid,.was-validated .custom-select:valid,.was-validated .form-control:valid{border-color:#28a745}.custom-select.is-valid:focus,.form-control.is-valid:focus,.was-validated .custom-select:valid:focus,.was-validated .form-control:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-select.is-valid~.valid-feedback,.custom-select.is-valid~.valid-tooltip,.form-control.is-valid~.valid-feedback,.form-control.is-valid~.valid-tooltip,.was-validated .custom-select:valid~.valid-feedback,.was-validated .custom-select:valid~.valid-tooltip,.was-validated .form-control:valid~.valid-feedback,.was-validated .form-control:valid~.valid-tooltip{display:block}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:#28a745}.custom-control-input.is-valid~.custom-control-label,.was-validated .custom-control-input:valid~.custom-control-label{color:#28a745}.custom-control-input.is-valid~.custom-control-label::before,.was-validated .custom-control-input:valid~.custom-control-label::before{background-color:#71dd8a}.custom-control-input.is-valid~.valid-feedback,.custom-control-input.is-valid~.valid-tooltip,.was-validated .custom-control-input:valid~.valid-feedback,.was-validated .custom-control-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid:checked~.custom-control-label::before,.was-validated .custom-control-input:valid:checked~.custom-control-label::before{background-color:#34ce57}.custom-control-input.is-valid:focus~.custom-control-label::before,.was-validated .custom-control-input:valid:focus~.custom-control-label::before{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(40,167,69,.25)}.custom-file-input.is-valid~.custom-file-label,.was-validated .custom-file-input:valid~.custom-file-label{border-color:#28a745}.custom-file-input.is-valid~.custom-file-label::before,.was-validated .custom-file-input:valid~.custom-file-label::before{border-color:inherit}.custom-file-input.is-valid~.valid-feedback,.custom-file-input.is-valid~.valid-tooltip,.was-validated .custom-file-input:valid~.valid-feedback,.was-validated .custom-file-input:valid~.valid-tooltip{display:block}.custom-file-input.is-valid:focus~.custom-file-label,.was-validated .custom-file-input:valid:focus~.custom-file-label{box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#dc3545}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;width:250px;padding:.5rem;margin-top:.1rem;font-size:.875rem;line-height:1;color:#fff;background-color:rgba(220,53,69,.8);border-radius:.2rem}.custom-select.is-invalid,.form-control.is-invalid,.was-validated .custom-select:invalid,.was-validated .form-control:invalid{border-color:#dc3545}.custom-select.is-invalid:focus,.form-control.is-invalid:focus,.was-validated .custom-select:invalid:focus,.was-validated .form-control:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-select.is-invalid~.invalid-feedback,.custom-select.is-invalid~.invalid-tooltip,.form-control.is-invalid~.invalid-feedback,.form-control.is-invalid~.invalid-tooltip,.was-validated .custom-select:invalid~.invalid-feedback,.was-validated .custom-select:invalid~.invalid-tooltip,.was-validated .form-control:invalid~.invalid-feedback,.was-validated .form-control:invalid~.invalid-tooltip{display:block}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:#dc3545}.custom-control-input.is-invalid~.custom-control-label,.was-validated .custom-control-input:invalid~.custom-control-label{color:#dc3545}.custom-control-input.is-invalid~.custom-control-label::before,.was-validated .custom-control-input:invalid~.custom-control-label::before{background-color:#efa2a9}.custom-control-input.is-invalid~.invalid-feedback,.custom-control-input.is-invalid~.invalid-tooltip,.was-validated .custom-control-input:invalid~.invalid-feedback,.was-validated .custom-control-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid:checked~.custom-control-label::before,.was-validated .custom-control-input:invalid:checked~.custom-control-label::before{background-color:#e4606d}.custom-control-input.is-invalid:focus~.custom-control-label::before,.was-validated .custom-control-input:invalid:focus~.custom-control-label::before{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(220,53,69,.25)}.custom-file-input.is-invalid~.custom-file-label,.was-validated .custom-file-input:invalid~.custom-file-label{border-color:#dc3545}.custom-file-input.is-invalid~.custom-file-label::before,.was-validated .custom-file-input:invalid~.custom-file-label::before{border-color:inherit}.custom-file-input.is-invalid~.invalid-feedback,.custom-file-input.is-invalid~.invalid-tooltip,.was-validated .custom-file-input:invalid~.invalid-feedback,.was-validated .custom-file-input:invalid~.invalid-tooltip{display:block}.custom-file-input.is-invalid:focus~.custom-file-label,.was-validated .custom-file-input:invalid:focus~.custom-file-label{box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-inline{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-bottom:0}.form-inline .form-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:0}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .input-group{width:auto}.form-inline .form-check{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.btn:focus,.btn:hover{text-decoration:none}.btn.focus,.btn:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.btn.disabled,.btn:disabled{opacity:.65}.btn:not([disabled]):not(.disabled){cursor:pointer}.btn:not([disabled]):not(.disabled).active,.btn:not([disabled]):not(.disabled):active{background-image:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:hover{color:#fff;background-color:#0069d9;border-color:#0062cc}.btn-primary.focus,.btn-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-primary.disabled,.btn-primary:disabled{background-color:#007bff;border-color:#007bff}.btn-primary:not([disabled]):not(.disabled).active,.btn-primary:not([disabled]):not(.disabled):active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#0062cc;border-color:#005cbf}.btn-primary:not([disabled]):not(.disabled).active:focus,.btn-primary:not([disabled]):not(.disabled):active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-secondary{color:#fff;background-color:#868e96;border-color:#868e96}.btn-secondary:hover{color:#fff;background-color:#727b84;border-color:#6c757d}.btn-secondary.focus,.btn-secondary:focus{box-shadow:0 0 0 .2rem rgba(134,142,150,.5)}.btn-secondary.disabled,.btn-secondary:disabled{background-color:#868e96;border-color:#868e96}.btn-secondary:not([disabled]):not(.disabled).active,.btn-secondary:not([disabled]):not(.disabled):active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#6c757d;border-color:#666e76}.btn-secondary:not([disabled]):not(.disabled).active:focus,.btn-secondary:not([disabled]):not(.disabled):active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(134,142,150,.5)}.btn-success{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:hover{color:#fff;background-color:#218838;border-color:#1e7e34}.btn-success.focus,.btn-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-success.disabled,.btn-success:disabled{background-color:#28a745;border-color:#28a745}.btn-success:not([disabled]):not(.disabled).active,.btn-success:not([disabled]):not(.disabled):active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#1e7e34;border-color:#1c7430}.btn-success:not([disabled]):not(.disabled).active:focus,.btn-success:not([disabled]):not(.disabled):active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-info{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:hover{color:#fff;background-color:#138496;border-color:#117a8b}.btn-info.focus,.btn-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-info.disabled,.btn-info:disabled{background-color:#17a2b8;border-color:#17a2b8}.btn-info:not([disabled]):not(.disabled).active,.btn-info:not([disabled]):not(.disabled):active,.show>.btn-info.dropdown-toggle{color:#fff;background-color:#117a8b;border-color:#10707f}.btn-info:not([disabled]):not(.disabled).active:focus,.btn-info:not([disabled]):not(.disabled):active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-warning{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:hover{color:#212529;background-color:#e0a800;border-color:#d39e00}.btn-warning.focus,.btn-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-warning.disabled,.btn-warning:disabled{background-color:#ffc107;border-color:#ffc107}.btn-warning:not([disabled]):not(.disabled).active,.btn-warning:not([disabled]):not(.disabled):active,.show>.btn-warning.dropdown-toggle{color:#212529;background-color:#d39e00;border-color:#c69500}.btn-warning:not([disabled]):not(.disabled).active:focus,.btn-warning:not([disabled]):not(.disabled):active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-danger{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:hover{color:#fff;background-color:#c82333;border-color:#bd2130}.btn-danger.focus,.btn-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-danger.disabled,.btn-danger:disabled{background-color:#dc3545;border-color:#dc3545}.btn-danger:not([disabled]):not(.disabled).active,.btn-danger:not([disabled]):not(.disabled):active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#bd2130;border-color:#b21f2d}.btn-danger:not([disabled]):not(.disabled).active:focus,.btn-danger:not([disabled]):not(.disabled):active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light.focus,.btn-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-light.disabled,.btn-light:disabled{background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not([disabled]):not(.disabled).active,.btn-light:not([disabled]):not(.disabled):active,.show>.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not([disabled]):not(.disabled).active:focus,.btn-light:not([disabled]):not(.disabled):active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark.focus,.btn-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-dark.disabled,.btn-dark:disabled{background-color:#343a40;border-color:#343a40}.btn-dark:not([disabled]):not(.disabled).active,.btn-dark:not([disabled]):not(.disabled):active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not([disabled]):not(.disabled).active:focus,.btn-dark:not([disabled]):not(.disabled):active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-primary{color:#007bff;background-color:transparent;background-image:none;border-color:#007bff}.btn-outline-primary:hover{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary.focus,.btn-outline-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#007bff;background-color:transparent}.btn-outline-primary:not([disabled]):not(.disabled).active,.btn-outline-primary:not([disabled]):not(.disabled):active,.show>.btn-outline-primary.dropdown-toggle{color:#212529;background-color:#007bff;border-color:#007bff;box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-secondary{color:#868e96;background-color:transparent;background-image:none;border-color:#868e96}.btn-outline-secondary:hover{color:#fff;background-color:#868e96;border-color:#868e96}.btn-outline-secondary.focus,.btn-outline-secondary:focus{box-shadow:0 0 0 .2rem rgba(134,142,150,.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#868e96;background-color:transparent}.btn-outline-secondary:not([disabled]):not(.disabled).active,.btn-outline-secondary:not([disabled]):not(.disabled):active,.show>.btn-outline-secondary.dropdown-toggle{color:#212529;background-color:#868e96;border-color:#868e96;box-shadow:0 0 0 .2rem rgba(134,142,150,.5)}.btn-outline-success{color:#28a745;background-color:transparent;background-image:none;border-color:#28a745}.btn-outline-success:hover{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success.focus,.btn-outline-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#28a745;background-color:transparent}.btn-outline-success:not([disabled]):not(.disabled).active,.btn-outline-success:not([disabled]):not(.disabled):active,.show>.btn-outline-success.dropdown-toggle{color:#212529;background-color:#28a745;border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-info{color:#17a2b8;background-color:transparent;background-image:none;border-color:#17a2b8}.btn-outline-info:hover{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info.focus,.btn-outline-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#17a2b8;background-color:transparent}.btn-outline-info:not([disabled]):not(.disabled).active,.btn-outline-info:not([disabled]):not(.disabled):active,.show>.btn-outline-info.dropdown-toggle{color:#212529;background-color:#17a2b8;border-color:#17a2b8;box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-warning{color:#ffc107;background-color:transparent;background-image:none;border-color:#ffc107}.btn-outline-warning:hover{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning.focus,.btn-outline-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#ffc107;background-color:transparent}.btn-outline-warning:not([disabled]):not(.disabled).active,.btn-outline-warning:not([disabled]):not(.disabled):active,.show>.btn-outline-warning.dropdown-toggle{color:#212529;background-color:#ffc107;border-color:#ffc107;box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-danger{color:#dc3545;background-color:transparent;background-image:none;border-color:#dc3545}.btn-outline-danger:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger.focus,.btn-outline-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#dc3545;background-color:transparent}.btn-outline-danger:not([disabled]):not(.disabled).active,.btn-outline-danger:not([disabled]):not(.disabled):active,.show>.btn-outline-danger.dropdown-toggle{color:#212529;background-color:#dc3545;border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-light{color:#f8f9fa;background-color:transparent;background-image:none;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light.focus,.btn-outline-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not([disabled]):not(.disabled).active,.btn-outline-light:not([disabled]):not(.disabled):active,.show>.btn-outline-light.dropdown-toggle{color:#fff;background-color:#f8f9fa;border-color:#f8f9fa;box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-dark{color:#343a40;background-color:transparent;background-image:none;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark.focus,.btn-outline-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not([disabled]):not(.disabled).active,.btn-outline-dark:not([disabled]):not(.disabled):active,.show>.btn-outline-dark.dropdown-toggle{color:#212529;background-color:#343a40;border-color:#343a40;box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-link{font-weight:400;color:#007bff;background-color:transparent}.btn-link:hover{color:#0056b3;text-decoration:underline;background-color:transparent;border-color:transparent}.btn-link.focus,.btn-link:focus{text-decoration:underline;border-color:transparent;box-shadow:none}.btn-link.disabled,.btn-link:disabled{color:#868e96}.btn-group-lg>.btn,.btn-lg{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;transition:opacity .15s linear}.fade.show{opacity:1}.collapse{display:none}.collapse.show{display:block}tr.collapse.show{display:table-row}tbody.collapse.show{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;transition:height .35s ease}.dropdown,.dropup{position:relative}.dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropup .dropdown-menu{margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-menu{margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-toggle::after{vertical-align:0}.dropleft .dropdown-menu{margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\"}.dropleft .dropdown-toggle::after{display:none}.dropleft .dropdown-toggle::before{display:inline-block;width:0;height:0;margin-right:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty::after{margin-left:0}.dropleft .dropdown-toggle::before{vertical-align:0}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#868e96;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#868e96;white-space:nowrap}.btn-group,.btn-group-vertical{position:relative;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto}.btn-group-vertical>.btn:hover,.btn-group>.btn:hover{z-index:1}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus{z-index:1}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group,.btn-group-vertical .btn+.btn,.btn-group-vertical .btn+.btn-group,.btn-group-vertical .btn-group+.btn,.btn-group-vertical .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after{margin-left:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.btn-group-vertical .btn,.btn-group-vertical .btn-group{width:100%}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle>.btn,.btn-group-toggle>.btn-group>.btn{margin-bottom:0}.btn-group-toggle>.btn input[type=checkbox],.btn-group-toggle>.btn input[type=radio],.btn-group-toggle>.btn-group>.btn input[type=checkbox],.btn-group-toggle>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;width:100%}.input-group .custom-file,.input-group .custom-select,.input-group .form-control{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;margin-bottom:0}.input-group .custom-file:focus,.input-group .custom-select:focus,.input-group .form-control:focus{z-index:3}.input-group .custom-file+.form-control,.input-group .custom-select+.form-control,.input-group .form-control+.form-control{margin-left:-1px}.input-group .custom-select:not(:last-child),.input-group .form-control:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group .custom-select:not(:first-child),.input-group .form-control:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group .custom-file{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.input-group .custom-file:not(:last-child) .custom-file-control,.input-group .custom-file:not(:last-child) .custom-file-control::before{border-top-right-radius:0;border-bottom-right-radius:0}.input-group .custom-file:not(:first-child) .custom-file-control,.input-group .custom-file:not(:first-child) .custom-file-control::before{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-append,.input-group-prepend{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.input-group-append .btn,.input-group-prepend .btn{position:relative;z-index:2}.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.btn,.input-group-append .input-group-text+.input-group-text,.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-prepend .input-group-text+.input-group-text{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{padding:.375rem .75rem;margin-bottom:0;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-text input[type=checkbox],.input-group-text input[type=radio]{margin-top:0}.input-group>.input-group-append:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group>.input-group-append:last-child>.input-group-text:not(:last-child),.input-group>.input-group-append:not(:last-child)>.btn,.input-group>.input-group-append:not(:last-child)>.input-group-text,.input-group>.input-group-prepend>.btn,.input-group>.input-group-prepend>.input-group-text{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn,.input-group>.input-group-append>.input-group-text,.input-group>.input-group-prepend:first-child>.btn:not(:first-child),.input-group>.input-group-prepend:first-child>.input-group-text:not(:first-child),.input-group>.input-group-prepend:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.input-group-text{border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:1.5rem;padding-left:1.5rem}.custom-control-inline{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked~.custom-control-label::before{color:#fff;background-color:#007bff}.custom-control-input:focus~.custom-control-label::before{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-control-input:active~.custom-control-label::before{color:#fff;background-color:#b3d7ff}.custom-control-input:disabled~.custom-control-label{color:#868e96}.custom-control-input:disabled~.custom-control-label::before{background-color:#e9ecef}.custom-control-label{margin-bottom:0}.custom-control-label::before{position:absolute;top:.25rem;left:0;display:block;width:1rem;height:1rem;pointer-events:none;content:\"\";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#dee2e6}.custom-control-label::after{position:absolute;top:.25rem;left:0;display:block;width:1rem;height:1rem;content:\"\";background-repeat:no-repeat;background-position:center center;background-size:50% 50%}.custom-checkbox .custom-control-label::before{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-label::before{background-color:#007bff}.custom-checkbox .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E\")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label::before{background-color:#007bff}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='%23fff' d='M0 2h4'/%3E%3C/svg%3E\")}.custom-radio .custom-control-label::before{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-label::before{background-color:#007bff}.custom-radio .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E\")}.custom-select{display:inline-block;width:100%;height:calc(2.25rem + 2px);padding:.375rem 1.75rem .375rem .75rem;line-height:1.5;color:#495057;vertical-align:middle;background:#fff url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\") no-repeat right .75rem center;background-size:8px 10px;border:1px solid #ced4da;border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#80bdff;outline:0;box-shadow:inset 0 1px 2px rgba(0,0,0,.075),0 0 0 .2rem rgba(0,123,255,.25)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size=\"1\"]){height:auto;padding-right:.75rem;background-image:none}.custom-select:disabled{color:#868e96;background-color:#e9ecef}.custom-select::-ms-expand{opacity:0}.custom-select-sm{height:calc(1.8125rem + 2px);padding-top:.375rem;padding-bottom:.375rem;font-size:75%}.custom-select-lg{height:calc(2.875rem + 2px);padding-top:.375rem;padding-bottom:.375rem;font-size:125%}.custom-file{position:relative;display:inline-block;width:100%;height:calc(2.25rem + 2px);margin-bottom:0}.custom-file-input{position:relative;z-index:2;width:100%;height:calc(2.25rem + 2px);margin:0;opacity:0}.custom-file-input:focus~.custom-file-control{border-color:#80bdff;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-file-input:focus~.custom-file-control::before{border-color:#80bdff}.custom-file-input:lang(en)~.custom-file-label::after{content:\"Browse\"}.custom-file-label{position:absolute;top:0;right:0;left:0;z-index:1;height:calc(2.25rem + 2px);padding:.375rem .75rem;line-height:1.5;color:#495057;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem}.custom-file-label::after{position:absolute;top:0;right:0;bottom:0;z-index:3;display:block;height:calc(calc(2.25rem + 2px) - 1px * 2);padding:.375rem .75rem;line-height:1.5;color:#495057;content:\"Browse\";background-color:#e9ecef;border-left:1px solid #ced4da;border-radius:0 .25rem .25rem 0}.nav{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#868e96}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #dee2e6}.nav-tabs .nav-link.disabled{color:#868e96;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#007bff}.nav-fill .nav-item{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:.5rem 1rem}.navbar>.container,.navbar>.container-fluid{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:.3125rem;padding-bottom:.3125rem;margin-right:1rem;font-size:1.25rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler:not([disabled]):not(.disabled){cursor:pointer}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:no-repeat center center;background-size:100% 100%}@media (max-width:575.99px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .dropup .dropdown-menu{top:auto;bottom:100%}}@media (max-width:767.99px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .dropup .dropdown-menu{top:auto;bottom:100%}}@media (max-width:991.99px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .dropup .dropdown-menu{top:auto;bottom:100%}}@media (max-width:1199.99px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .dropup .dropdown-menu{top:auto;bottom:100%}}.navbar-expand{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .dropup .dropdown-menu{top:auto;bottom:100%}.navbar-light .navbar-brand{color:rgba(0,0,0,.9)}.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-light .navbar-text a{color:rgba(0,0,0,.9)}.navbar-light .navbar-text a:focus,.navbar-light .navbar-text a:hover{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:rgba(255,255,255,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:rgba(255,255,255,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:rgba(255,255,255,.5);border-color:rgba(255,255,255,.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\")}.navbar-dark .navbar-text{color:rgba(255,255,255,.5)}.navbar-dark .navbar-text a{color:#fff}.navbar-dark .navbar-text a:focus,.navbar-dark .navbar-text a:hover{color:#fff}.card{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group:first-child .list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card>.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-body{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:.75rem}.card-subtitle{margin-top:-.375rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-right:-.625rem;margin-bottom:-.75rem;margin-left:-.625rem;border-bottom:0}.card-header-pills{margin-right:-.625rem;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-deck{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width:576px){.card-deck{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.card-group>.card{margin-bottom:15px}@media (min-width:576px){.card-group{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group>.card{-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:first-child .card-header,.card-group>.card:first-child .card-img-top{border-top-right-radius:0}.card-group>.card:first-child .card-footer,.card-group>.card:first-child .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:last-child .card-header,.card-group>.card:last-child .card-img-top{border-top-left-radius:0}.card-group>.card:last-child .card-footer,.card-group>.card:last-child .card-img-bottom{border-bottom-left-radius:0}.card-group>.card:only-child{border-radius:.25rem}.card-group>.card:only-child .card-header,.card-group>.card:only-child .card-img-top{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card-group>.card:only-child .card-footer,.card-group>.card:only-child .card-img-bottom{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-group>.card:not(:first-child):not(:last-child):not(:only-child){border-radius:0}.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-footer,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-header,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-img-top{border-radius:0}}.card-columns .card{margin-bottom:.75rem}@media (min-width:576px){.card-columns{-webkit-column-count:3;-moz-column-count:3;column-count:3;-webkit-column-gap:1.25rem;-moz-column-gap:1.25rem;column-gap:1.25rem}.card-columns .card{display:inline-block;width:100%}}.breadcrumb{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb-item+.breadcrumb-item::before{display:inline-block;padding-right:.5rem;padding-left:.5rem;color:#868e96;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:underline}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:none}.breadcrumb-item.active{color:#868e96}.pagination{display:-webkit-box;display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#007bff;background-color:#fff;border:1px solid #dee2e6}.page-link:focus,.page-link:hover{color:#0056b3;text-decoration:none;background-color:#e9ecef;border-color:#dee2e6}.page-link:not([disabled]):not(.disabled){cursor:pointer}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#007bff;border-color:#007bff}.page-item.disabled .page-link{color:#868e96;pointer-events:none;cursor:auto;background-color:#fff;border-color:#dee2e6}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.25rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:.875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#007bff}.badge-primary[href]:focus,.badge-primary[href]:hover{color:#fff;text-decoration:none;background-color:#0062cc}.badge-secondary{color:#fff;background-color:#868e96}.badge-secondary[href]:focus,.badge-secondary[href]:hover{color:#fff;text-decoration:none;background-color:#6c757d}.badge-success{color:#fff;background-color:#28a745}.badge-success[href]:focus,.badge-success[href]:hover{color:#fff;text-decoration:none;background-color:#1e7e34}.badge-info{color:#fff;background-color:#17a2b8}.badge-info[href]:focus,.badge-info[href]:hover{color:#fff;text-decoration:none;background-color:#117a8b}.badge-warning{color:#212529;background-color:#ffc107}.badge-warning[href]:focus,.badge-warning[href]:hover{color:#212529;text-decoration:none;background-color:#d39e00}.badge-danger{color:#fff;background-color:#dc3545}.badge-danger[href]:focus,.badge-danger[href]:hover{color:#fff;text-decoration:none;background-color:#bd2130}.badge-light{color:#212529;background-color:#f8f9fa}.badge-light[href]:focus,.badge-light[href]:hover{color:#212529;text-decoration:none;background-color:#dae0e5}.badge-dark{color:#fff;background-color:#343a40}.badge-dark[href]:focus,.badge-dark[href]:hover{color:#fff;text-decoration:none;background-color:#1d2124}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:4rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#004085;background-color:#cce5ff;border-color:#b8daff}.alert-primary hr{border-top-color:#9fcdff}.alert-primary .alert-link{color:#002752}.alert-secondary{color:#464a4e;background-color:#e7e8ea;border-color:#dddfe2}.alert-secondary hr{border-top-color:#cfd2d6}.alert-secondary .alert-link{color:#2e3133}.alert-success{color:#155724;background-color:#d4edda;border-color:#c3e6cb}.alert-success hr{border-top-color:#b1dfbb}.alert-success .alert-link{color:#0b2e13}.alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}.alert-info hr{border-top-color:#abdde5}.alert-info .alert-link{color:#062c33}.alert-warning{color:#856404;background-color:#fff3cd;border-color:#ffeeba}.alert-warning hr{border-top-color:#ffe8a1}.alert-warning .alert-link{color:#533f03}.alert-danger{color:#721c24;background-color:#f8d7da;border-color:#f5c6cb}.alert-danger hr{border-top-color:#f1b0b7}.alert-danger .alert-link{color:#491217}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@-webkit-keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}.progress{display:-webkit-box;display:-ms-flexbox;display:flex;height:1rem;overflow:hidden;font-size:.75rem;background-color:#e9ecef;border-radius:.25rem}.progress-bar{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;color:#fff;text-align:center;background-color:#007bff;transition:width .6s ease}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}.media{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.media-body{-webkit-box-flex:1;-ms-flex:1;flex:1}.list-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.75rem 1.25rem;margin-bottom:-1px;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.list-group-item:focus,.list-group-item:hover{z-index:1;text-decoration:none}.list-group-item.disabled,.list-group-item:disabled{color:#868e96;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#007bff;border-color:#007bff}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{border-bottom:0}.list-group-item-primary{color:#004085;background-color:#b8daff}a.list-group-item-primary,button.list-group-item-primary{color:#004085}a.list-group-item-primary:focus,a.list-group-item-primary:hover,button.list-group-item-primary:focus,button.list-group-item-primary:hover{color:#004085;background-color:#9fcdff}a.list-group-item-primary.active,button.list-group-item-primary.active{color:#fff;background-color:#004085;border-color:#004085}.list-group-item-secondary{color:#464a4e;background-color:#dddfe2}a.list-group-item-secondary,button.list-group-item-secondary{color:#464a4e}a.list-group-item-secondary:focus,a.list-group-item-secondary:hover,button.list-group-item-secondary:focus,button.list-group-item-secondary:hover{color:#464a4e;background-color:#cfd2d6}a.list-group-item-secondary.active,button.list-group-item-secondary.active{color:#fff;background-color:#464a4e;border-color:#464a4e}.list-group-item-success{color:#155724;background-color:#c3e6cb}a.list-group-item-success,button.list-group-item-success{color:#155724}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#155724;background-color:#b1dfbb}a.list-group-item-success.active,button.list-group-item-success.active{color:#fff;background-color:#155724;border-color:#155724}.list-group-item-info{color:#0c5460;background-color:#bee5eb}a.list-group-item-info,button.list-group-item-info{color:#0c5460}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#0c5460;background-color:#abdde5}a.list-group-item-info.active,button.list-group-item-info.active{color:#fff;background-color:#0c5460;border-color:#0c5460}.list-group-item-warning{color:#856404;background-color:#ffeeba}a.list-group-item-warning,button.list-group-item-warning{color:#856404}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#856404;background-color:#ffe8a1}a.list-group-item-warning.active,button.list-group-item-warning.active{color:#fff;background-color:#856404;border-color:#856404}.list-group-item-danger{color:#721c24;background-color:#f5c6cb}a.list-group-item-danger,button.list-group-item-danger{color:#721c24}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#721c24;background-color:#f1b0b7}a.list-group-item-danger.active,button.list-group-item-danger.active{color:#fff;background-color:#721c24;border-color:#721c24}.list-group-item-light{color:#818182;background-color:#fdfdfe}a.list-group-item-light,button.list-group-item-light{color:#818182}a.list-group-item-light:focus,a.list-group-item-light:hover,button.list-group-item-light:focus,button.list-group-item-light:hover{color:#818182;background-color:#ececf6}a.list-group-item-light.active,button.list-group-item-light.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}a.list-group-item-dark,button.list-group-item-dark{color:#1b1e21}a.list-group-item-dark:focus,a.list-group-item-dark:hover,button.list-group-item-dark:focus,button.list-group-item-dark:hover{color:#1b1e21;background-color:#b9bbbe}a.list-group-item-dark.active,button.list-group-item-dark.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:1.5rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:focus,.close:hover{color:#000;text-decoration:none;opacity:.75}.close:not([disabled]):not(.disabled){cursor:pointer}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;outline:0}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out;-webkit-transform:translate(0,-25%);transform:translate(0,-25%)}.modal.show .modal-dialog{-webkit-transform:translate(0,0);transform:translate(0,0)}.modal-dialog-centered{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;min-height:calc(100% - (.5rem * 2))}.modal-content{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:1rem;border-bottom:1px solid #e9ecef;border-top-left-radius:.3rem;border-top-right-radius:.3rem}.modal-header .close{padding:1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem}.modal-footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:1rem;border-top:1px solid #e9ecef}.modal-footer>:not(:first-child){margin-left:.25rem}.modal-footer>:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-centered{min-height:calc(100% - (1.75rem * 2))}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg{max-width:800px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:.8rem;height:.4rem}.tooltip .arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-auto[x-placement^=top],.bs-tooltip-top{padding:.4rem 0}.bs-tooltip-auto[x-placement^=top] .arrow,.bs-tooltip-top .arrow{bottom:0}.bs-tooltip-auto[x-placement^=top] .arrow::before,.bs-tooltip-top .arrow::before{top:0;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-auto[x-placement^=right],.bs-tooltip-right{padding:0 .4rem}.bs-tooltip-auto[x-placement^=right] .arrow,.bs-tooltip-right .arrow{left:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=right] .arrow::before,.bs-tooltip-right .arrow::before{right:0;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-auto[x-placement^=bottom],.bs-tooltip-bottom{padding:.4rem 0}.bs-tooltip-auto[x-placement^=bottom] .arrow,.bs-tooltip-bottom .arrow{top:0}.bs-tooltip-auto[x-placement^=bottom] .arrow::before,.bs-tooltip-bottom .arrow::before{bottom:0;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-auto[x-placement^=left],.bs-tooltip-left{padding:0 .4rem}.bs-tooltip-auto[x-placement^=left] .arrow,.bs-tooltip-left .arrow{right:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=left] .arrow::before,.bs-tooltip-left .arrow::before{left:0;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover .arrow{position:absolute;display:block;width:1rem;height:.5rem;margin:0 .3rem}.popover .arrow::after,.popover .arrow::before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}.bs-popover-auto[x-placement^=top],.bs-popover-top{margin-bottom:.5rem}.bs-popover-auto[x-placement^=top] .arrow,.bs-popover-top .arrow{bottom:calc((.5rem + 1px) * -1)}.bs-popover-auto[x-placement^=top] .arrow::after,.bs-popover-auto[x-placement^=top] .arrow::before,.bs-popover-top .arrow::after,.bs-popover-top .arrow::before{border-width:.5rem .5rem 0}.bs-popover-auto[x-placement^=top] .arrow::before,.bs-popover-top .arrow::before{bottom:0;border-top-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=top] .arrow::after,.bs-popover-top .arrow::after{bottom:1px;border-top-color:#fff}.bs-popover-auto[x-placement^=right],.bs-popover-right{margin-left:.5rem}.bs-popover-auto[x-placement^=right] .arrow,.bs-popover-right .arrow{left:calc((.5rem + 1px) * -1);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=right] .arrow::after,.bs-popover-auto[x-placement^=right] .arrow::before,.bs-popover-right .arrow::after,.bs-popover-right .arrow::before{border-width:.5rem .5rem .5rem 0}.bs-popover-auto[x-placement^=right] .arrow::before,.bs-popover-right .arrow::before{left:0;border-right-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=right] .arrow::after,.bs-popover-right .arrow::after{left:1px;border-right-color:#fff}.bs-popover-auto[x-placement^=bottom],.bs-popover-bottom{margin-top:.5rem}.bs-popover-auto[x-placement^=bottom] .arrow,.bs-popover-bottom .arrow{top:calc((.5rem + 1px) * -1)}.bs-popover-auto[x-placement^=bottom] .arrow::after,.bs-popover-auto[x-placement^=bottom] .arrow::before,.bs-popover-bottom .arrow::after,.bs-popover-bottom .arrow::before{border-width:0 .5rem .5rem .5rem}.bs-popover-auto[x-placement^=bottom] .arrow::before,.bs-popover-bottom .arrow::before{top:0;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=bottom] .arrow::after,.bs-popover-bottom .arrow::after{top:1px;border-bottom-color:#fff}.bs-popover-auto[x-placement^=bottom] .popover-header::before,.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-.5rem;content:\"\";border-bottom:1px solid #f7f7f7}.bs-popover-auto[x-placement^=left],.bs-popover-left{margin-right:.5rem}.bs-popover-auto[x-placement^=left] .arrow,.bs-popover-left .arrow{right:calc((.5rem + 1px) * -1);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=left] .arrow::after,.bs-popover-auto[x-placement^=left] .arrow::before,.bs-popover-left .arrow::after,.bs-popover-left .arrow::before{border-width:.5rem 0 .5rem .5rem}.bs-popover-auto[x-placement^=left] .arrow::before,.bs-popover-left .arrow::before{right:0;border-left-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=left] .arrow::after,.bs-popover-left .arrow::after{right:1px;border-left-color:#fff}.popover-header{padding:.5rem .75rem;margin-bottom:0;font-size:1rem;color:inherit;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:.5rem .75rem;color:#212529}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-item{position:relative;display:none;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;transition:-webkit-transform .6s ease;transition:transform .6s ease;transition:transform .6s ease,-webkit-transform .6s ease;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.carousel-item-next,.carousel-item-prev{position:absolute;top:0}.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translateX(0);transform:translateX(0)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.active.carousel-item-right,.carousel-item-next{-webkit-transform:translateX(100%);transform:translateX(100%)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.active.carousel-item-right,.carousel-item-next{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}}.active.carousel-item-left,.carousel-item-prev{-webkit-transform:translateX(-100%);transform:translateX(-100%)}@supports ((-webkit-transform-style:preserve-3d) or (transform-style:preserve-3d)){.active.carousel-item-left,.carousel-item-prev{-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:.5}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:transparent no-repeat center center;background-size:100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E\")}.carousel-indicators{position:absolute;right:0;bottom:10px;left:0;z-index:15;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{position:relative;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;background-color:rgba(255,255,255,.5)}.carousel-indicators li::before{position:absolute;top:-10px;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators li::after{position:absolute;bottom:-10px;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators .active{background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#007bff!important}a.bg-primary:focus,a.bg-primary:hover,button.bg-primary:focus,button.bg-primary:hover{background-color:#0062cc!important}.bg-secondary{background-color:#868e96!important}a.bg-secondary:focus,a.bg-secondary:hover,button.bg-secondary:focus,button.bg-secondary:hover{background-color:#6c757d!important}.bg-success{background-color:#28a745!important}a.bg-success:focus,a.bg-success:hover,button.bg-success:focus,button.bg-success:hover{background-color:#1e7e34!important}.bg-info{background-color:#17a2b8!important}a.bg-info:focus,a.bg-info:hover,button.bg-info:focus,button.bg-info:hover{background-color:#117a8b!important}.bg-warning{background-color:#ffc107!important}a.bg-warning:focus,a.bg-warning:hover,button.bg-warning:focus,button.bg-warning:hover{background-color:#d39e00!important}.bg-danger{background-color:#dc3545!important}a.bg-danger:focus,a.bg-danger:hover,button.bg-danger:focus,button.bg-danger:hover{background-color:#bd2130!important}.bg-light{background-color:#f8f9fa!important}a.bg-light:focus,a.bg-light:hover,button.bg-light:focus,button.bg-light:hover{background-color:#dae0e5!important}.bg-dark{background-color:#343a40!important}a.bg-dark:focus,a.bg-dark:hover,button.bg-dark:focus,button.bg-dark:hover{background-color:#1d2124!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #e9ecef!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#007bff!important}.border-secondary{border-color:#868e96!important}.border-success{border-color:#28a745!important}.border-info{border-color:#17a2b8!important}.border-warning{border-color:#ffc107!important}.border-danger{border-color:#dc3545!important}.border-light{border-color:#f8f9fa!important}.border-dark{border-color:#343a40!important}.border-white{border-color:#fff!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:.25rem!important;border-top-right-radius:.25rem!important}.rounded-right{border-top-right-radius:.25rem!important;border-bottom-right-radius:.25rem!important}.rounded-bottom{border-bottom-right-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-circle{border-radius:50%!important}.rounded-0{border-radius:0!important}.clearfix::after{display:block;clear:both;content:\"\"}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-sm-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-md-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-lg-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.d-xl-inline-flex{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important}}.d-print-block{display:none!important}@media print{.d-print-block{display:block!important}}.d-print-inline{display:none!important}@media print{.d-print-inline{display:inline!important}}.d-print-inline-block{display:none!important}@media print{.d-print-inline-block{display:inline-block!important}}@media print{.d-print-none{display:none!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive::before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9::before{padding-top:42.857143%}.embed-responsive-16by9::before{padding-top:56.25%}.embed-responsive-4by3::before{padding-top:75%}.embed-responsive-1by1::before{padding-top:100%}.flex-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.flex-sm-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-sm-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-sm-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-sm-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-sm-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-sm-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-sm-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-sm-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-sm-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-sm-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-sm-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-sm-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-sm-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-sm-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-sm-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-sm-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-sm-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-sm-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-sm-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-sm-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-sm-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-sm-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-sm-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-sm-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-sm-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-sm-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-sm-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-sm-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.flex-md-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-md-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-md-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-md-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-md-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-md-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-md-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-md-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-md-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-md-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-md-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-md-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-md-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-md-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-md-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-md-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-md-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-md-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-md-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-md-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-md-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-md-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-md-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-md-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-md-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-md-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-md-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-md-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-lg-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-lg-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-lg-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-lg-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-lg-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-lg-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-lg-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-lg-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-lg-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-lg-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-lg-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-lg-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-lg-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-lg-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-lg-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-lg-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-lg-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-lg-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-lg-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-lg-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-lg-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-lg-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-lg-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-lg-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-lg-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-lg-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-lg-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{-webkit-box-orient:horizontal!important;-webkit-box-direction:normal!important;-ms-flex-direction:row!important;flex-direction:row!important}.flex-xl-column{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}.flex-xl-row-reverse{-webkit-box-orient:horizontal!important;-webkit-box-direction:reverse!important;-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-xl-column-reverse{-webkit-box-orient:vertical!important;-webkit-box-direction:reverse!important;-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-xl-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-xl-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-xl-start{-webkit-box-pack:start!important;-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-xl-end{-webkit-box-pack:end!important;-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-xl-center{-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important}.justify-content-xl-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-xl-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-xl-start{-webkit-box-align:start!important;-ms-flex-align:start!important;align-items:flex-start!important}.align-items-xl-end{-webkit-box-align:end!important;-ms-flex-align:end!important;align-items:flex-end!important}.align-items-xl-center{-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important}.align-items-xl-baseline{-webkit-box-align:baseline!important;-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-xl-stretch{-webkit-box-align:stretch!important;-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-xl-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-xl-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-xl-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-xl-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-xl-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-xl-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-xl-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-xl-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-xl-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-xl-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-xl-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-xl-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}@supports ((position:-webkit-sticky) or (position:sticky)){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;-webkit-clip-path:inset(50%);clip-path:inset(50%);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal;-webkit-clip-path:none;clip-path:none}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.m-0{margin:0!important}.mt-0,.my-0{margin-top:0!important}.mr-0,.mx-0{margin-right:0!important}.mb-0,.my-0{margin-bottom:0!important}.ml-0,.mx-0{margin-left:0!important}.m-1{margin:.25rem!important}.mt-1,.my-1{margin-top:.25rem!important}.mr-1,.mx-1{margin-right:.25rem!important}.mb-1,.my-1{margin-bottom:.25rem!important}.ml-1,.mx-1{margin-left:.25rem!important}.m-2{margin:.5rem!important}.mt-2,.my-2{margin-top:.5rem!important}.mr-2,.mx-2{margin-right:.5rem!important}.mb-2,.my-2{margin-bottom:.5rem!important}.ml-2,.mx-2{margin-left:.5rem!important}.m-3{margin:1rem!important}.mt-3,.my-3{margin-top:1rem!important}.mr-3,.mx-3{margin-right:1rem!important}.mb-3,.my-3{margin-bottom:1rem!important}.ml-3,.mx-3{margin-left:1rem!important}.m-4{margin:1.5rem!important}.mt-4,.my-4{margin-top:1.5rem!important}.mr-4,.mx-4{margin-right:1.5rem!important}.mb-4,.my-4{margin-bottom:1.5rem!important}.ml-4,.mx-4{margin-left:1.5rem!important}.m-5{margin:3rem!important}.mt-5,.my-5{margin-top:3rem!important}.mr-5,.mx-5{margin-right:3rem!important}.mb-5,.my-5{margin-bottom:3rem!important}.ml-5,.mx-5{margin-left:3rem!important}.p-0{padding:0!important}.pt-0,.py-0{padding-top:0!important}.pr-0,.px-0{padding-right:0!important}.pb-0,.py-0{padding-bottom:0!important}.pl-0,.px-0{padding-left:0!important}.p-1{padding:.25rem!important}.pt-1,.py-1{padding-top:.25rem!important}.pr-1,.px-1{padding-right:.25rem!important}.pb-1,.py-1{padding-bottom:.25rem!important}.pl-1,.px-1{padding-left:.25rem!important}.p-2{padding:.5rem!important}.pt-2,.py-2{padding-top:.5rem!important}.pr-2,.px-2{padding-right:.5rem!important}.pb-2,.py-2{padding-bottom:.5rem!important}.pl-2,.px-2{padding-left:.5rem!important}.p-3{padding:1rem!important}.pt-3,.py-3{padding-top:1rem!important}.pr-3,.px-3{padding-right:1rem!important}.pb-3,.py-3{padding-bottom:1rem!important}.pl-3,.px-3{padding-left:1rem!important}.p-4{padding:1.5rem!important}.pt-4,.py-4{padding-top:1.5rem!important}.pr-4,.px-4{padding-right:1.5rem!important}.pb-4,.py-4{padding-bottom:1.5rem!important}.pl-4,.px-4{padding-left:1.5rem!important}.p-5{padding:3rem!important}.pt-5,.py-5{padding-top:3rem!important}.pr-5,.px-5{padding-right:3rem!important}.pb-5,.py-5{padding-bottom:3rem!important}.pl-5,.px-5{padding-left:3rem!important}.m-auto{margin:auto!important}.mt-auto,.my-auto{margin-top:auto!important}.mr-auto,.mx-auto{margin-right:auto!important}.mb-auto,.my-auto{margin-bottom:auto!important}.ml-auto,.mx-auto{margin-left:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0,.my-sm-0{margin-top:0!important}.mr-sm-0,.mx-sm-0{margin-right:0!important}.mb-sm-0,.my-sm-0{margin-bottom:0!important}.ml-sm-0,.mx-sm-0{margin-left:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1,.my-sm-1{margin-top:.25rem!important}.mr-sm-1,.mx-sm-1{margin-right:.25rem!important}.mb-sm-1,.my-sm-1{margin-bottom:.25rem!important}.ml-sm-1,.mx-sm-1{margin-left:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2,.my-sm-2{margin-top:.5rem!important}.mr-sm-2,.mx-sm-2{margin-right:.5rem!important}.mb-sm-2,.my-sm-2{margin-bottom:.5rem!important}.ml-sm-2,.mx-sm-2{margin-left:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3,.my-sm-3{margin-top:1rem!important}.mr-sm-3,.mx-sm-3{margin-right:1rem!important}.mb-sm-3,.my-sm-3{margin-bottom:1rem!important}.ml-sm-3,.mx-sm-3{margin-left:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4,.my-sm-4{margin-top:1.5rem!important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem!important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem!important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5,.my-sm-5{margin-top:3rem!important}.mr-sm-5,.mx-sm-5{margin-right:3rem!important}.mb-sm-5,.my-sm-5{margin-bottom:3rem!important}.ml-sm-5,.mx-sm-5{margin-left:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0,.py-sm-0{padding-top:0!important}.pr-sm-0,.px-sm-0{padding-right:0!important}.pb-sm-0,.py-sm-0{padding-bottom:0!important}.pl-sm-0,.px-sm-0{padding-left:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1,.py-sm-1{padding-top:.25rem!important}.pr-sm-1,.px-sm-1{padding-right:.25rem!important}.pb-sm-1,.py-sm-1{padding-bottom:.25rem!important}.pl-sm-1,.px-sm-1{padding-left:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2,.py-sm-2{padding-top:.5rem!important}.pr-sm-2,.px-sm-2{padding-right:.5rem!important}.pb-sm-2,.py-sm-2{padding-bottom:.5rem!important}.pl-sm-2,.px-sm-2{padding-left:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3,.py-sm-3{padding-top:1rem!important}.pr-sm-3,.px-sm-3{padding-right:1rem!important}.pb-sm-3,.py-sm-3{padding-bottom:1rem!important}.pl-sm-3,.px-sm-3{padding-left:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4,.py-sm-4{padding-top:1.5rem!important}.pr-sm-4,.px-sm-4{padding-right:1.5rem!important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem!important}.pl-sm-4,.px-sm-4{padding-left:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5,.py-sm-5{padding-top:3rem!important}.pr-sm-5,.px-sm-5{padding-right:3rem!important}.pb-sm-5,.py-sm-5{padding-bottom:3rem!important}.pl-sm-5,.px-sm-5{padding-left:3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto,.my-sm-auto{margin-top:auto!important}.mr-sm-auto,.mx-sm-auto{margin-right:auto!important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto!important}.ml-sm-auto,.mx-sm-auto{margin-left:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0,.my-md-0{margin-top:0!important}.mr-md-0,.mx-md-0{margin-right:0!important}.mb-md-0,.my-md-0{margin-bottom:0!important}.ml-md-0,.mx-md-0{margin-left:0!important}.m-md-1{margin:.25rem!important}.mt-md-1,.my-md-1{margin-top:.25rem!important}.mr-md-1,.mx-md-1{margin-right:.25rem!important}.mb-md-1,.my-md-1{margin-bottom:.25rem!important}.ml-md-1,.mx-md-1{margin-left:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2,.my-md-2{margin-top:.5rem!important}.mr-md-2,.mx-md-2{margin-right:.5rem!important}.mb-md-2,.my-md-2{margin-bottom:.5rem!important}.ml-md-2,.mx-md-2{margin-left:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3,.my-md-3{margin-top:1rem!important}.mr-md-3,.mx-md-3{margin-right:1rem!important}.mb-md-3,.my-md-3{margin-bottom:1rem!important}.ml-md-3,.mx-md-3{margin-left:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4,.my-md-4{margin-top:1.5rem!important}.mr-md-4,.mx-md-4{margin-right:1.5rem!important}.mb-md-4,.my-md-4{margin-bottom:1.5rem!important}.ml-md-4,.mx-md-4{margin-left:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5,.my-md-5{margin-top:3rem!important}.mr-md-5,.mx-md-5{margin-right:3rem!important}.mb-md-5,.my-md-5{margin-bottom:3rem!important}.ml-md-5,.mx-md-5{margin-left:3rem!important}.p-md-0{padding:0!important}.pt-md-0,.py-md-0{padding-top:0!important}.pr-md-0,.px-md-0{padding-right:0!important}.pb-md-0,.py-md-0{padding-bottom:0!important}.pl-md-0,.px-md-0{padding-left:0!important}.p-md-1{padding:.25rem!important}.pt-md-1,.py-md-1{padding-top:.25rem!important}.pr-md-1,.px-md-1{padding-right:.25rem!important}.pb-md-1,.py-md-1{padding-bottom:.25rem!important}.pl-md-1,.px-md-1{padding-left:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2,.py-md-2{padding-top:.5rem!important}.pr-md-2,.px-md-2{padding-right:.5rem!important}.pb-md-2,.py-md-2{padding-bottom:.5rem!important}.pl-md-2,.px-md-2{padding-left:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3,.py-md-3{padding-top:1rem!important}.pr-md-3,.px-md-3{padding-right:1rem!important}.pb-md-3,.py-md-3{padding-bottom:1rem!important}.pl-md-3,.px-md-3{padding-left:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4,.py-md-4{padding-top:1.5rem!important}.pr-md-4,.px-md-4{padding-right:1.5rem!important}.pb-md-4,.py-md-4{padding-bottom:1.5rem!important}.pl-md-4,.px-md-4{padding-left:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5,.py-md-5{padding-top:3rem!important}.pr-md-5,.px-md-5{padding-right:3rem!important}.pb-md-5,.py-md-5{padding-bottom:3rem!important}.pl-md-5,.px-md-5{padding-left:3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto,.my-md-auto{margin-top:auto!important}.mr-md-auto,.mx-md-auto{margin-right:auto!important}.mb-md-auto,.my-md-auto{margin-bottom:auto!important}.ml-md-auto,.mx-md-auto{margin-left:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0,.my-lg-0{margin-top:0!important}.mr-lg-0,.mx-lg-0{margin-right:0!important}.mb-lg-0,.my-lg-0{margin-bottom:0!important}.ml-lg-0,.mx-lg-0{margin-left:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1,.my-lg-1{margin-top:.25rem!important}.mr-lg-1,.mx-lg-1{margin-right:.25rem!important}.mb-lg-1,.my-lg-1{margin-bottom:.25rem!important}.ml-lg-1,.mx-lg-1{margin-left:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2,.my-lg-2{margin-top:.5rem!important}.mr-lg-2,.mx-lg-2{margin-right:.5rem!important}.mb-lg-2,.my-lg-2{margin-bottom:.5rem!important}.ml-lg-2,.mx-lg-2{margin-left:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3,.my-lg-3{margin-top:1rem!important}.mr-lg-3,.mx-lg-3{margin-right:1rem!important}.mb-lg-3,.my-lg-3{margin-bottom:1rem!important}.ml-lg-3,.mx-lg-3{margin-left:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4,.my-lg-4{margin-top:1.5rem!important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem!important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem!important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5,.my-lg-5{margin-top:3rem!important}.mr-lg-5,.mx-lg-5{margin-right:3rem!important}.mb-lg-5,.my-lg-5{margin-bottom:3rem!important}.ml-lg-5,.mx-lg-5{margin-left:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0,.py-lg-0{padding-top:0!important}.pr-lg-0,.px-lg-0{padding-right:0!important}.pb-lg-0,.py-lg-0{padding-bottom:0!important}.pl-lg-0,.px-lg-0{padding-left:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1,.py-lg-1{padding-top:.25rem!important}.pr-lg-1,.px-lg-1{padding-right:.25rem!important}.pb-lg-1,.py-lg-1{padding-bottom:.25rem!important}.pl-lg-1,.px-lg-1{padding-left:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2,.py-lg-2{padding-top:.5rem!important}.pr-lg-2,.px-lg-2{padding-right:.5rem!important}.pb-lg-2,.py-lg-2{padding-bottom:.5rem!important}.pl-lg-2,.px-lg-2{padding-left:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3,.py-lg-3{padding-top:1rem!important}.pr-lg-3,.px-lg-3{padding-right:1rem!important}.pb-lg-3,.py-lg-3{padding-bottom:1rem!important}.pl-lg-3,.px-lg-3{padding-left:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4,.py-lg-4{padding-top:1.5rem!important}.pr-lg-4,.px-lg-4{padding-right:1.5rem!important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem!important}.pl-lg-4,.px-lg-4{padding-left:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5,.py-lg-5{padding-top:3rem!important}.pr-lg-5,.px-lg-5{padding-right:3rem!important}.pb-lg-5,.py-lg-5{padding-bottom:3rem!important}.pl-lg-5,.px-lg-5{padding-left:3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto,.my-lg-auto{margin-top:auto!important}.mr-lg-auto,.mx-lg-auto{margin-right:auto!important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto!important}.ml-lg-auto,.mx-lg-auto{margin-left:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0,.my-xl-0{margin-top:0!important}.mr-xl-0,.mx-xl-0{margin-right:0!important}.mb-xl-0,.my-xl-0{margin-bottom:0!important}.ml-xl-0,.mx-xl-0{margin-left:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1,.my-xl-1{margin-top:.25rem!important}.mr-xl-1,.mx-xl-1{margin-right:.25rem!important}.mb-xl-1,.my-xl-1{margin-bottom:.25rem!important}.ml-xl-1,.mx-xl-1{margin-left:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2,.my-xl-2{margin-top:.5rem!important}.mr-xl-2,.mx-xl-2{margin-right:.5rem!important}.mb-xl-2,.my-xl-2{margin-bottom:.5rem!important}.ml-xl-2,.mx-xl-2{margin-left:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3,.my-xl-3{margin-top:1rem!important}.mr-xl-3,.mx-xl-3{margin-right:1rem!important}.mb-xl-3,.my-xl-3{margin-bottom:1rem!important}.ml-xl-3,.mx-xl-3{margin-left:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4,.my-xl-4{margin-top:1.5rem!important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem!important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem!important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5,.my-xl-5{margin-top:3rem!important}.mr-xl-5,.mx-xl-5{margin-right:3rem!important}.mb-xl-5,.my-xl-5{margin-bottom:3rem!important}.ml-xl-5,.mx-xl-5{margin-left:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0,.py-xl-0{padding-top:0!important}.pr-xl-0,.px-xl-0{padding-right:0!important}.pb-xl-0,.py-xl-0{padding-bottom:0!important}.pl-xl-0,.px-xl-0{padding-left:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1,.py-xl-1{padding-top:.25rem!important}.pr-xl-1,.px-xl-1{padding-right:.25rem!important}.pb-xl-1,.py-xl-1{padding-bottom:.25rem!important}.pl-xl-1,.px-xl-1{padding-left:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2,.py-xl-2{padding-top:.5rem!important}.pr-xl-2,.px-xl-2{padding-right:.5rem!important}.pb-xl-2,.py-xl-2{padding-bottom:.5rem!important}.pl-xl-2,.px-xl-2{padding-left:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3,.py-xl-3{padding-top:1rem!important}.pr-xl-3,.px-xl-3{padding-right:1rem!important}.pb-xl-3,.py-xl-3{padding-bottom:1rem!important}.pl-xl-3,.px-xl-3{padding-left:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4,.py-xl-4{padding-top:1.5rem!important}.pr-xl-4,.px-xl-4{padding-right:1.5rem!important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem!important}.pl-xl-4,.px-xl-4{padding-left:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5,.py-xl-5{padding-top:3rem!important}.pr-xl-5,.px-xl-5{padding-right:3rem!important}.pb-xl-5,.py-xl-5{padding-bottom:3rem!important}.pl-xl-5,.px-xl-5{padding-left:3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto,.my-xl-auto{margin-top:auto!important}.mr-xl-auto,.mx-xl-auto{margin-right:auto!important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto!important}.ml-xl-auto,.mx-xl-auto{margin-left:auto!important}}.text-justify{text-align:justify!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-light{font-weight:300!important}.font-weight-normal{font-weight:400!important}.font-weight-bold{font-weight:700!important}.font-italic{font-style:italic!important}.text-white{color:#fff!important}.text-primary{color:#007bff!important}a.text-primary:focus,a.text-primary:hover{color:#0062cc!important}.text-secondary{color:#868e96!important}a.text-secondary:focus,a.text-secondary:hover{color:#6c757d!important}.text-success{color:#28a745!important}a.text-success:focus,a.text-success:hover{color:#1e7e34!important}.text-info{color:#17a2b8!important}a.text-info:focus,a.text-info:hover{color:#117a8b!important}.text-warning{color:#ffc107!important}a.text-warning:focus,a.text-warning:hover{color:#d39e00!important}.text-danger{color:#dc3545!important}a.text-danger:focus,a.text-danger:hover{color:#bd2130!important}.text-light{color:#f8f9fa!important}a.text-light:focus,a.text-light:hover{color:#dae0e5!important}.text-dark{color:#343a40!important}a.text-dark:focus,a.text-dark:hover{color:#1d2124!important}.text-muted{color:#868e96!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.visible{visibility:visible!important}.invisible{visibility:hidden!important}@media print{*,::after,::before{text-shadow:none!important;box-shadow:none!important}a,a:visited{text-decoration:underline}abbr[title]::after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}", ""]);

// exports


/***/ }),
/* 94 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 95 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/18www.css\\\">\\n    <link href=\\\"open-iconic/font/css/open-iconic-bootstrap.css\\\" rel=\\\"stylesheet\\\">\\n</head>\\n<body style=\\\"background-color:#FFF\\\" data-bind=\\\"event: {mouseup: onMouseUp, mouseout: onMouseOut}\\\">\\n<!-- ko if: $root.game() -->\\n<div data-bind=\\\"template: { name: 'views/game/game' }\\\"></div>\\n<!-- /ko -->\\n<!-- ko if: !$root.game() -->\\n<div data-bind=\\\"template: { name: 'views/dashboard/dashboard' }\\\"></div>\\n<!-- /ko -->\\n\\n<script src=\\\"frontend.js\\\"></script>\\n</body>\\n</html>\";";

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<style>\\n  body {\\n    font-family: 'Helvetica', sans-serif;\\n    margin: 50px 0;\\n  }\\n\\n  .container {\\n    width: 600px;\\n    text-align: center;\\n    margin: 20px auto;\\n  }\\n\\n  .intro {\\n    text-align: left;\\n  }\\n\\n  .icon {\\n\\n    margin: 10px;\\n    width: 16px;\\n    height: 16px;\\n  }\\n</style>\\n</head>\\n<body>\\n\\n<div class=\\\"container\\\">\\n  <p class='intro'>\\n    Make sure to run this through a web server otherwise you won&rsquo;t see any icons. You can use <a href=\\\"https://github.com/visionmedia/serve\\\">Serve</a> for local testing.\\n  </p>\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#account-login\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#account-logout\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#action-redo\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#action-undo\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#align-center\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#align-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#align-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#aperture\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-bottom\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-circle-bottom\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-circle-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-circle-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-circle-top\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-thick-bottom\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-thick-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-thick-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-thick-top\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#arrow-top\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#audio-spectrum\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#audio\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#badge\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#ban\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bar-chart\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#basket\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#battery-empty\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#battery-full\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#beaker\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bell\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bluetooth\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bold\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bolt\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#book\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bookmark\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#box\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#briefcase\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#british-pound\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#browser\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#brush\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bug\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#bullhorn\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#calculator\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#calendar\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#camera-slr\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#caret-bottom\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#caret-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#caret-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#caret-top\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#cart\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#chat\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#check\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#chevron-bottom\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#chevron-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#chevron-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#chevron-top\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#circle-check\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#circle-x\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#clipboard\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#clock\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#cloud-download\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#cloud-upload\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#cloud\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#cloudy\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#code\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#cog\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#collapse-down\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#collapse-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#collapse-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#collapse-up\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#command\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#comment-square\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#compass\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#contrast\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#copywriting\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#credit-card\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#crop\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#dashboard\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#data-transfer-download\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#data-transfer-upload\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#delete\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#dial\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#document\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#dollar\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#double-quote-sans-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#double-quote-sans-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#double-quote-serif-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#double-quote-serif-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#droplet\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#eject\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#elevator\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#ellipses\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#envelope-closed\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#envelope-open\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#euro\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#excerpt\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#expand-down\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#expand-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#expand-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#expand-up\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#external-link\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#eye\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#eyedropper\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#file\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#fire\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#flag\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#flash\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#folder\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#fork\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#fullscreen-enter\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#fullscreen-exit\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#globe\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#graph\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#grid-four-up\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#grid-three-up\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#grid-two-up\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#hard-drive\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#header\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#headphones\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#heart\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#home\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#image\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#inbox\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#infinity\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#info\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#italic\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#justify-center\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#justify-left\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#justify-right\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#key\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#laptop\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#layers\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#lightbulb\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#link-broken\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#link-intact\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#list-rich\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#list\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#location\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#lock-locked\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#lock-unlocked\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#loop-circular\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#loop-square\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#loop\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#magnifying-glass\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#map-marker\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#map\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-pause\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-play\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-record\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-skip-backward\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-skip-forward\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-step-backward\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-step-forward\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#media-stop\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#medical-cross\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#menu\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#microphone\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#minus\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#monitor\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#moon\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#move\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#musical-note\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#paperclip\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#pencil\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#people\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#person\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#phone\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#pie-chart\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#pin\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#play-circle\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#plus\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#power-standby\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#print\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#project\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#pulse\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#puzzle-piece\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#question-mark\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#rain\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#random\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#reload\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#resize-both\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#resize-height\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#resize-width\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#rss-alt\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#rss\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#script\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#share-boxed\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#share\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#shield\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#signal\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#signpost\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#sort-ascending\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#sort-descending\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#spreadsheet\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#star\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#sun\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#tablet\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#tag\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#tags\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#target\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#task\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#terminal\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#text\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#thumb-down\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#thumb-up\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#timer\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#transfer\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#trash\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#underline\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#vertical-align-bottom\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#vertical-align-center\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#vertical-align-top\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#video\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#volume-high\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#volume-low\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#volume-off\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#warning\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#wifi\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#wrench\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#x\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#yen\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#zoom-in\\\"></use>\\n  </svg>\\n\\n  <svg viewBox=\\\"0 0 8 8\\\" class=\\\"icon\\\">\\n    <use xlink:href=\\\"open-iconic.svg#zoom-out\\\"></use>\\n  </svg>\\n\\n</div>\\n</body>\\n</html>\";";

/***/ }),
/* 98 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<style>\\n  body {\\n    font-family: Helvetica, sans-serif;\\n  }\\n\\n  .container {\\n    width: 600px;\\n    text-align: center;\\n    margin: 20px auto;\\n  }\\n\\n  .message {\\n    text-align: left;\\n  }\\n\\n  .icon {\\n    display: inline-block;\\n    margin: 10px;\\n    width: 16px;\\n    height: 16px;\\n  }\\n</style>\\n</head>\\n<body>\\n\\n<div class=\\\"container\\\">\\n  <p class=\\\"message\\\">Make sure to run this through a web server otherwise you won&rsquo;t see any icons. You can use <a href=\\\"https://github.com/visionmedia/serve\\\">Serve</a> for local testing.</p>\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#account-login\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#account-logout\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#action-redo\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#action-undo\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#align-center\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#align-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#align-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#aperture\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-bottom\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-circle-bottom\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-circle-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-circle-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-circle-top\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-thick-bottom\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-thick-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-thick-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-thick-top\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#arrow-top\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#audio-spectrum\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#audio\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#badge\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#ban\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bar-chart\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#basket\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#battery-empty\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#battery-full\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#beaker\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bell\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bluetooth\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bold\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bolt\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#book\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bookmark\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#box\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#briefcase\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#british-pound\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#browser\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#brush\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bug\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#bullhorn\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#calculator\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#calendar\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#camera-slr\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#caret-bottom\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#caret-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#caret-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#caret-top\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#cart\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#chat\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#check\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#chevron-bottom\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#chevron-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#chevron-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#chevron-top\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#circle-check\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#circle-x\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#clipboard\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#clock\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#cloud-download\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#cloud-upload\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#cloud\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#cloudy\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#code\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#cog\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#collapse-down\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#collapse-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#collapse-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#collapse-up\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#command\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#comment-square\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#compass\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#contrast\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#copywriting\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#credit-card\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#crop\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#dashboard\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#data-transfer-download\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#data-transfer-upload\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#delete\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#dial\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#document\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#dollar\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#double-quote-sans-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#double-quote-sans-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#double-quote-serif-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#double-quote-serif-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#droplet\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#eject\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#elevator\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#ellipses\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#envelope-closed\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#envelope-open\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#euro\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#excerpt\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#expand-down\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#expand-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#expand-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#expand-up\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#external-link\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#eye\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#eyedropper\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#file\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#fire\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#flag\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#flash\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#folder\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#fork\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#fullscreen-enter\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#fullscreen-exit\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#globe\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#graph\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#grid-four-up\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#grid-three-up\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#grid-two-up\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#hard-drive\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#header\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#headphones\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#heart\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#home\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#image\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#inbox\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#infinity\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#info\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#italic\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#justify-center\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#justify-left\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#justify-right\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#key\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#laptop\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#layers\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#lightbulb\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#link-broken\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#link-intact\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#list-rich\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#list\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#location\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#lock-locked\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#lock-unlocked\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#loop-circular\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#loop-square\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#loop\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#magnifying-glass\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#map-marker\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#map\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-pause\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-play\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-record\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-skip-backward\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-skip-forward\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-step-backward\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-step-forward\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#media-stop\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#medical-cross\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#menu\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#microphone\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#minus\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#monitor\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#moon\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#move\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#musical-note\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#paperclip\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#pencil\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#people\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#person\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#phone\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#pie-chart\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#pin\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#play-circle\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#plus\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#power-standby\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#print\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#project\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#pulse\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#puzzle-piece\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#question-mark\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#rain\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#random\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#reload\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#resize-both\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#resize-height\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#resize-width\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#rss-alt\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#rss\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#script\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#share-boxed\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#share\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#shield\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#signal\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#signpost\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#sort-ascending\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#sort-descending\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#spreadsheet\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#star\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#sun\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#tablet\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#tag\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#tags\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#target\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#task\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#terminal\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#text\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#thumb-down\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#thumb-up\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#timer\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#transfer\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#trash\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#underline\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#vertical-align-bottom\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#vertical-align-center\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#vertical-align-top\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#video\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#volume-high\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#volume-low\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#volume-off\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#warning\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#wifi\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#wrench\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#x\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#yen\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#zoom-in\\\"></use>\\n  </svg>\\n\\n  <svg class=\\\"icon\\\">\\n    <use xlink:href=\\\"sprite.svg#zoom-out\\\"></use>\\n  </svg>\\n\\n</div>\\n</body>\\n</html>\\n\";";

/***/ }),
/* 99 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"d-flex justify-content-center mt-3\\\">\\n    <div><h2 class=\\\"font-weight-light\\\">To report a bug please do the following:</h2>\\n<ul class=\\\"list-unstyled mt-2\\\">\\n    <li>\\n        <div class=\\\"d-flex align-items-center\\\">\\n            <h4 class=\\\"m-0\\\">1.</h4>&nbsp;Click&nbsp;<button class=\\\"btn btn-sm btn-warning\\\" data-bind=\\\"click: $root.downloadState\\\">Download State</button>&nbsp;to download and save the current state for this game.\\n        </div>\\n    </li>\\n    <li class=\\\"mt-2\\\">\\n        <div class=\\\"d-flex align-items-center\\\">\\n            <h4 class=\\\"m-0\\\">2.</h4>&nbsp;Click&nbsp;<button class=\\\"btn btn-sm btn-info\\\" data-bind=\\\"click: $root.sendBugEmail\\\">Send Email</button>&nbsp;to open a new email. Please describe the problem and&nbsp;<strong>attach the file you downloaded.</strong>\\n        </div>\\n    </li>\\n</ul>\\n    </div>\\n</div>\";";

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div style=\\\"pointer-events:none;position:absolute;\\\"\\n     data-bind=\\\"style: { top: $data.top +'px', left: $data.left + 'px'}, css: {editable: $data.canEdit()}\\\">\\n    <!-- ko if: $data.visibleTile() -->\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" pointer-events=\\\"none\\\"\\n         data-bind=\\\"style: { width: $data.width +'px', height: $data.height + 'px'}\\\">\\n        <defs>\\n            <clipPath id=\\\"\\\" data-bind=\\\"attr: { id: 'tile-clip' + $data.id }\\\">\\n                <polygon stroke=\\\"black\\\"\\n                         points=\\\"\\\" data-bind=\\\"attr: { points: $data.outline }\\\"></polygon>\\n            </clipPath>\\n        </defs>\\n        <g clip-path=\\\"url(#tile-clip)\\\" pointer-events=\\\"all\\\" class=\\\"tile\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n           fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\"\\n           data-bind=\\\"attr: { 'clip-path': 'url(#tile-clip' + $data.id + ')', transform: 'translate(' + Math.floor($data.width/2) + ', ' + Math.floor($data.height/2)+')' }, popover: $data.popoverParams, css: $data.offboard ? '' : 'pos' + ($data.visibleTile().position ? $data.visibleTile().position() : 0)\\\">\\n\\n            <g pointer-events=\\\"all\\\" transform=\\\"\\\"\\n               data-bind=\\\"attr: { transform: 'translate(-' + Math.floor($data.width/2) + ', -' + Math.floor($data.height/2)+')'  }, template: { name: 'views/tiles/' + $root.game().state().manifest.getTemplateName($data.visibleTile().id), data: $data.visibleTile() }\\\"></g>\\n            <!-- ko if: $data.canEdit() || $data.canRoute() -->\\n            <polygon pointer-events=\\\"all\\\" class=\\\"tile-border\\\" fill=\\\"none\\\" stroke=\\\"none\\\" stroke-width=\\\"0\\\"\\n                     points=\\\"\\\" data-bind=\\\"attr: { points: $data.outline }\\\" data-mouseover=\\\"onMouseOver\\\"\\n                     data-mousedown=\\\"onMouseDown\\\" data-mouseout=\\\"onMouseOut\\\" data-touchstart=\\\"onTouchStart\\\"\\n                     data-touchmove=\\\"onTouchMove\\\" data-touchend=\\\"onTouchEnd\\\"></polygon>\\n            <!-- /ko -->\\n        </g>\\n    </svg>\\n    <!-- /ko -->\\n</div>\\n\\n<!-- ko if: $data.preview() -->\\n<div class=\\\"position-fixed\\\" style=\\\"height:100%;width:100%;left:0;top:0;overflow:hidden;z-index:99\\\"></div>\\n<div class=\\\"d-flex position-absolute justify-content-between\\\" style=\\\"width:132px;z-index:100\\\"\\n     data-bind=\\\"style: { top: ($data.top-35) + 'px', left: ($data.left-3) + 'px'}\\\">\\n    <button type=\\\"button\\\" style=\\\"min-width:35px;\\\" class=\\\"btn btn-sm btn-danger font-weight-bold\\\"\\n            data-bind=\\\"click: $data.cancelPreview\\\"><span class=\\\"oi oi-x\\\" title=\\\"icon name\\\" aria-hidden=\\\"true\\\"></span>\\n    </button>\\n    <button type=\\\"button\\\" style=\\\"min-width:35px;\\\" class=\\\"btn btn-sm btn-light font-weight-bold\\\"\\n            data-bind=\\\"visible: $data.allowedPreviewPositions().length > 1, click: $data.nextPreviewPosition\\\"><img\\n            alt=\\\"rotate\\\" style=\\\"width:16px; height:16px;\\\"\\n            data-bind=\\\"attr: { src: $root.rootPath + 'open-iconic/svg/reload.svg' }\\\"/>\\n    </button>\\n    <button type=\\\"button\\\" style=\\\"min-width:35px;\\\" class=\\\"btn btn-sm btn-success\\\"\\n            data-bind=\\\"click: function() { $data.commitPreview($root.game().state());}\\\">OK\\n    </button>\\n</div>\\n\\n<div style=\\\"pointer-events:none;position:absolute;z-index:99\\\" data-bind=\\\"style: { top: $data.top +'px', left: $data.left + 'px'}\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" pointer-events=\\\"none\\\"\\n         data-bind=\\\"style: { width: $data.width +'px', height: $data.height + 'px'}\\\">\\n        <defs>\\n            <clipPath id=\\\"\\\" data-bind=\\\"attr: { id: 'tile-clip' + $data.id }\\\">\\n                <polygon stroke=\\\"black\\\"\\n                         points=\\\"\\\" data-bind=\\\"attr: { points: $data.outline }\\\"></polygon>\\n            </clipPath>\\n        </defs>\\n        <g clip-path=\\\"url(#tile-clip)\\\" pointer-events=\\\"all\\\" class=\\\"tile\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n           fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\"\\n           data-bind=\\\"attr: { 'clip-path': 'url(#tile-clip' + $data.id + ')', transform: 'translate(' + Math.floor($data.width/2) + ', ' + Math.floor($data.height/2)+')' }\\\">\\n\\n            <polygon pointer-events=\\\"all\\\" class=\\\"tile-border\\\" fill=\\\"none\\\" stroke=\\\"none\\\" stroke-width=\\\"0\\\"\\n                     points=\\\"\\\" data-bind=\\\"attr: { points: $data.outline }, click: $data.nextPreviewPosition\\\" ></polygon>\\n        </g>\\n    </svg>\\n    <!-- /ko -->\\n</div>\\n<!-- /ko -->\\n\";";

/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data.tile() -->\\n<div data-bind=\\\"style: { 'width': $data.upgradeTiles().length < 2 ? '126px' : '256px'} \\\">\\n    <!-- ko if: $data.canToken() -->\\n    <div class=\\\"d-flex flex-column align-items-center justify-content-center\\\" data-bind=\\\"css: $data.canToken() && $data.tokenableCities() && $data.upgradeTiles().length > 0 ? 'mt-2' : ''\\\">\\n        <!-- ko foreach: $data.tokenableCities() -->\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" data-bind=\\\"css: $index() > 0 ? 'mt-2' : '', click: function() { $parent.tokenCity($data); }, text: 'Add ' + ($parent.tokenableCities().length > 1 ? $parent.tile().getCityName($data) + ' ' : '') + 'Token' \\\"></button>\\n        <!-- /ko -->\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.canToken() && $data.tokenableCities() && $data.upgradeTiles().length > 0 -->\\n    <hr>\\n    <!-- /ko -->\\n    <div class=\\\"d-flex flex-wrap mx-auto\\\" data-bind=\\\"css: $data.canToken() && $data.tokenableCities() && $data.upgradeTiles().length > 0 ? 'mt-2' : ''\\\">\\n        <!-- ko foreach: $data.upgradeTiles() -->\\n        <div class=\\\"position-relative\\\" style=\\\"cursor:pointer\\\" data-bind=\\\"click: function() { $parent.previewTile($data.tile.id); }\\\">\\n            <h5 class=\\\"position-absolute\\\" style=\\\"top:0;left:10px;\\\"\\n                data-bind=\\\"text: $data.remaining === -1 ? '&#x221e;' : $data.remaining \\\"></h5>\\n            <div class=\\\"mr-1 mb-1\\\" style=\\\"width:124px;height:144px;\\\"\\n                 data-bind=\\\"style: { opacity : $data.remaining === 0 ? .5 : 1 }, template: { name: 'views/tiles/' + $root.game().state().manifest.getTemplateName($data.tile.id), data: $data.tile }\\\"></div>\\n        </div>\\n        <!-- /ko -->\\n    </div>\\n    <!-- ko if: $data.canPlaceMeat() -->\\n    <div class=\\\"d-flex justify-content-center bg-light\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" data-bind=\\\"click: function() { $data.placeMeat(); }\\\">Place Meat</button>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.canPlaceSteamboat() -->\\n    <div class=\\\"d-flex justify-content-center bg-light\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" data-bind=\\\"click: function() { $data.placeSteamboat();}\\\">Place Steamboat</button>\\n    </div>\\n    <!-- /ko -->\\n</div>\\n\\n<!-- /ko -->\";";

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"text-center pt-2\\\">\\n    <h4 class=\\\"text-white font-weight-light\\\">Operating Order</h4>\\n</div>\\n<!-- ko foreach: $data.getOperatingCompanies() -->\\n<div class=\\\" text-center pr-3 pl-3 pt-1 pb-1 m-0 mt-2 mr-2 ml-2 border-0 font-weight-light\\\"\\n     style=\\\"min-width:10rem;cursor:pointer;\\\"\\n     data-bind=\\\"click: function() { $root.game().selectCompany($data.id); },css: 'bg-' + $data.id + ' text-' + $data.id + ($root.game().selectedCompany() === $data.id || $root.game().state().currentCompanyId() === $data.id ? ' mr-0 ml-0' : ' mr-0 ml-0')\\\">\\n\\n    <!-- ko if: $root.game().selectedCompany() !== $data.id -->\\n    <h6 class=\\\"mb-0\\\" data-bind=\\\"text: $data.name\\\"></h6>\\n    <div class=\\\"d-flex justify-content-between text-center mt-1\\\">\\n        <div class=\\\"mr-3\\\">\\n            <div style=\\\"font-size:10px;margin-bottom:-5px;\\\">cash</div>\\n            <div style=\\\"font-size:.9rem\\\" data-bind=\\\"text: '$' + cash()\\\"></div>\\n        </div>\\n        <div class=\\\"mr-3\\\">\\n            <div style=\\\"font-size:10px;margin-bottom:-5px;\\\">shares</div>\\n            <div style=\\\"font-size:.9rem\\\" data-bind=\\\"text: shares()\\\"></div>\\n        </div>\\n        <div>\\n            <div style=\\\"font-size:10px;margin-bottom:-5px;\\\">last run</div>\\n            <div style=\\\"font-size:.9rem\\\" data-bind=\\\"text: '$' + lastRun()\\\"></div>\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $root.game().selectedCompany() === $data.id  -->\\n    <div class=\\\"d-flex justify-content-center align-items-center\\\" style=\\\"height:43px;\\\">\\n        <h5 class=\\\"font-weight-normal mb-0\\\" data-bind=\\\"text:$data.name\\\"></h5>\\n    </div>\\n    <!-- /ko -->\\n</div>\\n<!-- ko if: $root.game().selectedCompany() === $data.id  -->\\n<div data-bind=\\\"template: {name:'views/operatingCompany', data: $data }\\\"></div>\\n<!-- /ko -->\\n<!-- /ko -->\";";

/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<header>\\n    <nav class=\\\"navbar navbar-expand-lg navbar-light border border-0 m-0 p-0\\\">\\n        <span class=\\\"navbar-brand ml-3\\\">\\n            <a href=\\\"/\\\" class=\\\"h1 text-secondary\\\">18WWW</a>\\n        </span>\\n    </nav>\\n\\n<div class=\\\"border border-right-0 border-left-0 pl-3 pr-3 bg-light\\\">\\n    <ul class=\\\"nav\\\">\\n<li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: activePanel() === ActivePanelIDs.ACTIVE_GAMES ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link \\\"\\n                        data-bind=\\\"click: function() {setActivePanel(ActivePanelIDs.ACTIVE_GAMES)}, css: activePanel() === ActivePanelIDs.ACTIVE_GAMES ? 'active text-white font-weight-bold' : 'text-secondary' \\\">Active Games</a>\\n            </li>\\n            <li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: activePanel() === ActivePanelIDs.COMPLETED_GAMES ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link\\\"\\n                        data-bind=\\\"click: function() {setActivePanel(ActivePanelIDs.COMPLETED_GAMES)}, css: activePanel() === ActivePanelIDs.COMPLETED_GAMES ? 'active text-white font-weight-bold' : 'text-secondary' \\\">Completed Games</a>\\n            </li>\\n            <li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: activePanel() === ActivePanelIDs.NEW_GAME ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link\\\"\\n                        data-bind=\\\"click: function() {setActivePanel(ActivePanelIDs.NEW_GAME)}, css: activePanel() === ActivePanelIDs.NEW_GAME ? 'active text-white font-weight-bold' : 'text-secondary' \\\">New Game</a>\\n            </li>\\n    </ul>\\n</div>\\n</header>\\n\\n<div class=\\\"container-fluid px-0\\\">\\n    <div data-bind=\\\"template: { name: 'views/dashboard/games' }, visible: activePanel() === ActivePanelIDs.ACTIVE_GAMES\\\"></div>\\n    <div data-bind=\\\"template: { name: 'views/dashboard/newGame', data: $data.newGameForm }, visible: activePanel() === ActivePanelIDs.NEW_GAME\\\"></div>\\n</div>\\n\\n<!--<div>-->\\n      <!--Select a text file:-->\\n      <!--<input type=\\\"file\\\" id=\\\"fileInput\\\">-->\\n    <!--</div>-->\";";

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"text-center pt-3 bg-dark\\\">\\n    <h2 class=\\\"text-white font-weight-light\\\">Active Games</h2>\\n    <div class=\\\"bg-light mt-3\\\" style=\\\"width:100%\\\">\\n        <table class=\\\"table text-center bg-light m-0\\\">\\n            <thead>\\n            <tr class=\\\"text-white bg-info\\\">\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-light\\\" style=\\\"font-size:18px;\\\">Game</th>\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-light\\\" style=\\\"font-size:18px;\\\">Name</th>\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-light\\\" style=\\\"font-size:18px;\\\">Num Players</th>\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-light\\\" style=\\\"font-size:18px;\\\">Start Date</th>\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-light\\\" style=\\\"font-size:18px;\\\">Round</th>\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-light\\\" style=\\\"font-size:18px;\\\">Turn</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <!-- ko foreach: $data.availableGames() -->\\n            <tr style=\\\"cursor:pointer\\\" data-bind=\\\"css: $index() % 2 === 0? 'bg-light' : 'bg-table-row-medium', click: function() { $root.launchGame($data);}\\\">\\n                <td class=\\\"table-col-spacer p-3 border-0\\\" data-bind=\\\"text: type\\\"></td>\\n                <td class=\\\"table-col-spacer p-3 border-0 \\\" data-bind=\\\"text: name\\\"></td>\\n                <td class=\\\"table-col-spacer p-3 border-0\\\" data-bind=\\\"text: players\\\"></td>\\n                <td class=\\\"table-col-spacer p-3 border-0\\\" data-bind=\\\"text: startDate\\\"></td>\\n                <td class=\\\"table-col-spacer p-3 border-0\\\" data-bind=\\\"text: round\\\"></td>\\n                <td class=\\\"table-col-spacer p-3 border-0\\\" data-bind=\\\"text: turn\\\"></td>\\n            </tr>\\n            <!-- /ko -->\\n            </tbody>\\n        </table>\\n    </div>\\n</div>\";";

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"d-flex justify-content-center mt-3\\\" style=\\\"height:100%\\\">\\n    <div class=\\\"card\\\" style=\\\"width:600px;box-shadow:3px 3px 10px #ccc\\\">\\n        <div class=\\\"card-body\\\">\\n            <h5 class=\\\"card-title\\\">New Local Game</h5>\\n\\n            <form>\\n                <div class=\\\"form-group\\\">\\n                    <label>Game</label>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"1846\\\" readonly data-bind=\\\"value: type\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label>Name</label>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Game Name...\\\" data-bind=\\\"value: name\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label>Number of Players</label>\\n                    <div>\\n                    <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n                        <!-- ko foreach: _.range(3, 6) -->\\n                        <button type=\\\"button\\\" class=\\\"btn\\\"\\n                                data-bind=\\\"text: $data, css: $parent.numPlayers() === $data ? 'btn-warning' : 'btn-secondary', click: function() { $parent.setNumPlayers($data); }\\\"></button>\\n                        <!-- /ko -->\\n                    </div>\\n                        </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label>Players</label>\\n                    <input class=\\\"form-control mb-1\\\" type=\\\"text\\\" placeholder=\\\"Player Name...\\\" data-bind=\\\"value: player1\\\">\\n                    <input class=\\\"form-control mb-1\\\" type=\\\"text\\\" placeholder=\\\"Player Name...\\\" data-bind=\\\"value: player2\\\">\\n                    <input class=\\\"form-control mb-1\\\" type=\\\"text\\\" placeholder=\\\"Player Name...\\\" data-bind=\\\"value: player4, visible: numPlayers() === 4 || numPlayers() === 5\\\">\\n                    <input class=\\\"form-control mb-1\\\" type=\\\"text\\\" placeholder=\\\"Player Name...\\\" data-bind=\\\"value: player5, visible: numPlayers() === 5\\\">\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Player Name...\\\" data-bind=\\\"value: player3\\\">\\n                </div>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary mb-2\\\" data-bind=\\\"click: createLocalGame\\\">Create Game\\n                </button>\\n            </form>\\n        </div>\\n    </div>\\n</div>\";";

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"\";";

/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<header>\\n    <nav class=\\\"navbar navbar-expand-lg navbar-light border border-0 m-0 p-0\\\">\\n        <span class=\\\"navbar-brand ml-3\\\">\\n            <a href=\\\"#\\\" class=\\\"h1 text-secondary\\\" data-bind=\\\"click:$root.showDashboard \\\">1846</a>\\n        </span>\\n        <div class=\\\"navbar-nav mr-auto d-flex\\\">\\n            <h2 class=\\\"mb-0 mr-3 text-dark font-weight-light\\\"\\n                data-bind=\\\"text: $data.game().state().roundName()\\\"></h2>\\n            <!-- ko if: $data.game().state().currentCompanyId() -->\\n            <h2 class=\\\"mb-0 pl-2 pr-2 font-weight-light\\\" style=\\\"border-radius:.7rem\\\"\\n                data-bind=\\\"css: 'bg-' + $root.game().state().currentCompanyId() + ' text-' + $root.game().state().currentCompanyId() , text: $data.game().state().getCompany($root.game().state().currentCompanyId()).nickname\\\"></h2>\\n            <!-- /ko -->\\n            <!--<h2 class=\\\"mb-0 text-dark font-weight-light\\\"-->\\n            <!--data-bind=\\\"text:($data.game().state().currentCompanyId() ? '&nbsp;' : '') + $data.game().state().currentPlayer().user().username\\\"></h2>-->\\n        </div>\\n        <div data-bind=\\\"template: { name: 'views/players', data: $data.game().state()}\\\"></div>\\n    </nav>\\n    <div class=\\\"border border-right-0 border-left-0 pl-3 pr-3 bg-light\\\"\\n         data-bind=\\\"visible:!$data.game().privateDraft()\\\">\\n        <ul class=\\\"nav\\\">\\n            <li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: $data.game().activePanel() === $data.game().ActivePanelIDs.MAP ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link \\\"\\n                        data-bind=\\\"click: function() {$data.game().setActivePanel($data.game().ActivePanelIDs.MAP)}, css: $data.game().activePanel() === $data.game().ActivePanelIDs.MAP ? 'active text-white font-weight-bold' : 'text-secondary' \\\">Map</a>\\n            </li>\\n            <li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: $data.game().activePanel() === $data.game().ActivePanelIDs.OWNERSHIP ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link\\\"\\n                        data-bind=\\\"click: function() {$data.game().setActivePanel($data.game().ActivePanelIDs.OWNERSHIP)}, css: $data.game().activePanel() === $data.game().ActivePanelIDs.OWNERSHIP ? 'active text-white font-weight-bold' : 'text-secondary' \\\">Ownership</a>\\n            </li>\\n            <li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: $data.game().activePanel() === $data.game().ActivePanelIDs.TILE_MANIFEST ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link\\\"\\n                        data-bind=\\\"click: function() {$data.game().setActivePanel($data.game().ActivePanelIDs.TILE_MANIFEST)}, css: $data.game().activePanel() === $data.game().ActivePanelIDs.TILE_MANIFEST ? 'active text-white font-weight-bold' : 'text-secondary' \\\">Tile\\n                    Manifest</a>\\n            </li>\\n            <li class=\\\"nav-item\\\"\\n                data-bind=\\\"css: $data.game().activePanel() === $data.game().ActivePanelIDs.HISTORY ? 'bg-active-nav' : ''\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link\\\"\\n                        data-bind=\\\"click: function() {$data.game().setActivePanel($data.game().ActivePanelIDs.HISTORY)}, css: $data.game().activePanel() === $data.game().ActivePanelIDs.HISTORY ? 'active text-white font-weight-bold' : 'text-secondary' \\\">History</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a\\n                        href=\\\"#\\\" class=\\\"nav-link text-danger\\\"\\n                        data-bind=\\\"click: function() {$data.game().setActivePanel($data.game().ActivePanelIDs.REPORT_BUG)}, css: $data.game().activePanel() === $data.game().ActivePanelIDs.REPORT_BUG ? 'active text-white font-weight-bold' : 'text-secondary' \\\">Report Bug</a>\\n            </li>\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.game().state().winner() -->\\n    <div data-bind=\\\"template: { name: 'views/winner', data: $data.game().state() }\\\"></div>\\n    <!-- /ko -->\\n    <div data-bind=\\\"template: { name: 'views/turnsummary', data: $data.game().state() }, visible:!$data.game().privateDraft()\\\"></div>\\n    <div data-bind=\\\"template: { name: 'views/stockRound', data: $data.game().stockRound() }, visible:!$data.game().privateDraft()\\\"></div>\\n    <div data-bind=\\\"template: { name: 'views/operatingRound', data: $data.game().operatingRound() }, visible:$data.game().state().isOperatingRound()\\\"></div>\\n</header>\\n<div class=\\\"container-fluid px-0\\\">\\n\\n    <div data-bind=\\\"template: { name: 'views/privateDraft', data: $data.game().privateDraft() }, visible:$data.game().privateDraft()\\\"></div>\\n    <div data-bind=\\\"visible:!$data.game().privateDraft()\\\">\\n        <div data-bind=\\\"template: { name: 'views/bugReport' }, visible:$data.game().activePanel() === $data.game().ActivePanelIDs.REPORT_BUG\\\"></div>\\n        <div class=\\\"row\\\"\\n             data-bind=\\\"visible: $data.game().activePanel() === $data.game().ActivePanelIDs.OWNERSHIP || $data.game().activePanel() === $data.game().ActivePanelIDs.MAP\\\">\\n            <div class=\\\"col\\\">\\n                <div data-bind=\\\"template: { name: 'views/priceTrack', data: $data.game().state() }\\\"></div>\\n            </div>\\n        </div>\\n        <div data-bind=\\\"visible: $data.game().activePanel() === $data.game().ActivePanelIDs.OWNERSHIP\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <div data-bind=\\\"template: { name: 'views/ownership', data: $data.game().state() }\\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div data-bind=\\\"visible: $data.game().activePanel() === $data.game().ActivePanelIDs.MAP\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col bg-dark\\\">\\n                    <div class=\\\"d-flex\\\">\\n                        <div>\\n                            <div style=\\\"min-width:220px;\\\"\\n                                 data-bind=\\\"template: { name: 'views/companies', data: $data.game().state() }\\\"></div>\\n                        </div>\\n                        <div style=\\\"position:relative;width:100%; overflow:scroll;\\\">\\n\\n                            <div class=\\\"mt-2\\\"\\n                                 style=\\\"position:relative;transform-origin:0 0;transform:scale(.817);width:1836px;height:1186px;\\\"\\n                                 data-bind=\\\"style: { transform: 'scale(' + $data.game().zoom() + ')' }\\\">\\n                                <img style=\\\"width:1836px;height:1186px;\\\"\\n                                     data-bind=\\\"attr: { src: $root.rootPath + 'images/1846-map.jpg' }\\\"/>\\n                                <div style=\\\"position:absolute;top:0px;left:36px;height:1083px;width:1370px;\\\"\\n                                     data-bind=\\\"template: {name:'views/grid', data: $data.game().grid()}\\\"></div>\\n                                <div style=\\\"position:absolute;top:358px;left:1411px;height:437px;width:397px;\\\"\\n                                     data-bind=\\\"template: {name:'views/market', data: $data.game().state()}\\\"></div>\\n                                <div style=\\\"position:absolute;top:39px;left:47px;height:124px;width:257px;\\\"\\n                                     data-bind=\\\"template: {name:'views/limits', data: $data.game().state()}\\\"></div>\\n                                <div style=\\\"position:absolute;top:934px;left:953px;height:212px;width:855px;\\\"\\n                                     data-bind=\\\"template: {name:'views/trains', data: $data.game().state()}\\\"></div>\\n                                <div style=\\\"position:absolute;top:898px;left:723px;height:175px; width:175px;\\\"\\n                                     data-bind=\\\"template: { name: 'views/rounds', data: $data.game().state() }\\\"></div>\\n                            </div>\\n                            <div class=\\\"zoom btn-group\\\" role=\\\"group\\\" style=\\\"position: absolute; top:10px; left:2px;\\\">\\n                                <button type=\\\"button\\\"\\n                                        class=\\\"btn btn-sm btn-dark font-weight-bold \\\"\\n                                        data-bind=\\\"click: function() { $data.game().zoomOut(); }\\\"><span\\n                                        class=\\\"oi oi-zoom-out\\\"></span>\\n                                </button>\\n                                <button type=\\\"button\\\"\\n                                        class=\\\"btn btn-sm btn-dark font-weight-bold\\\"\\n                                        data-bind=\\\"click: function() { $data.game().zoomIn(); }\\\"><span\\n                                        class=\\\"oi oi-zoom-in\\\"></span>\\n                                </button>\\n                            </div>\\n\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div data-bind=\\\"if: $data.game().activePanel() === $data.game().ActivePanelIDs.HISTORY\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <div data-bind=\\\"template: { name: 'views/turnHistory', data: $data.game().state() }\\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n        <div data-bind=\\\"if: $data.game().activePanel() === $data.game().ActivePanelIDs.TILE_MANIFEST\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <div data-bind=\\\"template: { name: 'views/tileManifest', data: $data.game().state() }\\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\";";

/***/ }),
/* 108 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div style=\\\"width:100%;height:100%;\\\"><div data-bind=\\\"template: {name: 'views/cell', foreach: cells()}, delegatedHandler: ['mousedown', 'mouseover', 'mouseout', 'touchstart', 'touchmove', 'touchend']\\\"></div></div>\";";

/***/ }),
/* 109 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div style=\\\"color:#555;background-color:#fdfdf3;height:100%;overflow:hidden;\\\">\\n    <table class=\\\"table text-center m-0 border-0\\\" style=\\\"width:100%;\\\">\\n        <tr class=\\\"bg-dark border-0\\\" style=\\\"color:#fdfdf3;\\\">\\n            <td class=\\\"p-1 border-0\\\" colspan=\\\"2\\\">\\n                <div class=\\\"d-inline-flex\\\">\\n                    <div><span style=\\\"font-size:26px;\\\">Bank</span></div>\\n                    <div style=\\\"width:10px;\\\"></div>\\n                    <div><span style=\\\"font-size:26px;\\\"\\n                               data-bind=\\\"text: '$' + $data.bank.cash()\\\"></span></div>\\n                </div>\\n            </td>\\n        </tr>\\n        <tr class=\\\"border-0\\\">\\n            <td class=\\\"p-0 pt-1 border-bottom-0 border-top-0\\\" style=\\\"border-right:2px solid #CCC;width:50%;\\\"><span\\n                    style=\\\"font-size:16px;font-weight:bold\\\">Cert Limit</span></td>\\n            <td class=\\\"p-0 pt-1 border-bottom-0 border-top-0\\\"><span\\n                    style=\\\"font-size:16px;font-weight:bold\\\">Train Limit</span></td>\\n        </tr>\\n        <tr>\\n            <td class=\\\"p-0 border-bottom-0 border-top-0\\\" style=\\\"border-right:2px solid #CCC;width:50%;\\\">\\n                <div style=\\\"margin-top:-5px;\\\"><span style=\\\"font-size:36px;font-weight:300\\\"\\n                                                    data-bind=\\\"text: $data.certLimit()\\\"></span></div>\\n            </td>\\n            <td class=\\\"p-0 border-bottom-0 border-top-0\\\">\\n                <div style=\\\"margin-top:-5px;\\\"><span style=\\\"font-size:36px;font-weight:300\\\"\\n                                                    data-bind=\\\"text: $data.trainLimit()\\\"></span></div>\\n            </td>\\n        </tr>\\n        </tr>\\n    </table>\\n\\n</div>\";";

/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"d-flex flex-wrap text-center\\\" style=\\\"width:100%;margin-left:25px;margin-top:25px;color:#333\\\">\\n    <!-- ko foreach: _.keys($data.bank.certificatesById()) -->\\n    <div class=\\\"card\\\" style=\\\"overflow:hidden;min-width:100px;height:100px;margin-right:25px;margin-bottom:25px;border-radius:.7rem\\\">\\n        <h5 class=\\\"card-title mb-0\\\" data-bind=\\\"css: 'bg-' + $data + ' text-' + $data, text: $parent.getCompany($data).nickname\\\"></h5>\\n        <div class=\\\"m-auto\\\">\\n            <h1 class=\\\"font-weight-light mb-0\\\" data-bind=\\\"text:$parent.bank.certificatesById()[$data].length\\\"></h1>\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n</div>\";";

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"text-center pl-2 pr-2\\\">\\n    <div class=\\\"pb-2 pr-2 pl-2 pt-0 \\\" style=\\\"width:100%\\\" data-bind=\\\"css: 'bg-' + $data.id\\\">\\n        <div class=\\\"card mb-2\\\" style=\\\"overflow:hidden;border-radius:.7rem;border:3px solid #f8f9fa;\\\">\\n            <table class=\\\"table text-center m-0\\\">\\n                <tbody>\\n                <tr>\\n                    <th colspan=\\\"2\\\" scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                        data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Player Shares\\n                    </th>\\n                </tr>\\n                <!-- ko foreach: $root.game().state().players() -->\\n                <tr>\\n                    <td class=\\\"border-0 font-weight-normal  p-0 text-right\\\" scope=\\\"row\\\"\\n                        data-bind=\\\"css: $root.game().state().currentPlayerId() === $data.id ? 'bg-warning': $index() %2 ? 'bg-table-row' : 'bg-light'\\\">\\n                        <div class=\\\"p-1 pl-2 pr-2\\\">\\n                            <div data-bind=\\\"text:$data.user().username\\\">Price</div>\\n                        </div>\\n                    </td>\\n                    <td class=\\\"pt-1 pb-1 border-0 \\\"\\n                        data-bind=\\\"css: $root.game().state().currentPlayerId() === $data.id ? 'bg-warning' : $index() % 2 ? 'bg-table-row' : 'bg-light'\\\">\\n                        <div data-bind=\\\"text:$data.numSharesOwnedOfCompany($parent.id)\\\"></div>\\n                    </td>\\n                </tr>\\n                <!-- /ko -->\\n                </tbody>\\n            </table>\\n        </div>\\n        <div class=\\\"card mb-2\\\" style=\\\"overflow:hidden;border-radius:.7rem;border:3px solid #f8f9fa;\\\">\\n            <table class=\\\"table text-center m-0\\\">\\n                <tbody>\\n                <tr>\\n                    <th colspan=\\\"2\\\" scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                        data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Avail. Shares\\n                    </th>\\n                </tr>\\n                <tr>\\n                    <td class=\\\"border-0 bg-light font-weight-normal p-0 text-right \\\" scope=\\\"row\\\">\\n                        <div class=\\\" p-1 pl-2 pr-2\\\">\\n                            <div>Price</div>\\n                        </div>\\n                    </td>\\n                    <td class=\\\"bg-light pt-1 pb-1 border-0 \\\">\\n                        <div data-bind=\\\"text: '$' + $data.price()\\\"></div>\\n                    </td>\\n                </tr>\\n                <tr>\\n                    <td class=\\\"border-0 bg-table-row font-weight-normal p-0 text-right \\\" scope=\\\"row\\\">\\n                        <div class=\\\"p-1 pl-2 pr-2\\\">\\n                            <div>Market</div>\\n                        </div>\\n                    </td>\\n                    <td class=\\\"bg-table-row pt-1 pb-1 border-0 \\\">\\n                        <div data-bind=\\\"text: $root.game().state().bank.numSharesOwnedOfCompany($data.id)\\\"></div>\\n                    </td>\\n                </tr>\\n                <tr>\\n                    <td class=\\\"border-0 bg-light font-weight-normal p-0 text-right \\\" scope=\\\"row\\\">\\n                        <div class=\\\"p-1 pl-2 pr-2\\\">\\n                            <div>Treas.</div>\\n                        </div>\\n                    </td>\\n                    <td class=\\\"bg-light pt-1 pb-1 border-0 \\\">\\n                        <div class=\\\"\\\"\\n                             data-bind=\\\"text: $data.shares()\\\"></div>\\n                    </td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n        <div class=\\\"card mb-2\\\" style=\\\"overflow:hidden;border-radius:.7rem;border:3px solid #f8f9fa;\\\">\\n            <table class=\\\"table text-center m-0\\\">\\n                <tbody>\\n                <tr>\\n                    <th colspan=\\\"2\\\" scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                        data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Assets\\n                    </th>\\n                </tr>\\n                <tr>\\n                    <th class=\\\"border-0 bg-light font-weight-normal p-0 text-right \\\" scope=\\\"row\\\">\\n                        <div class=\\\"p-1 pl-2 pr-2\\\">\\n                            Trains\\n                        </div>\\n                    </th>\\n                    <td class=\\\"pt-1 pb-1 bg-light border-0\\\" data-bind=\\\"\\\">\\n                    <span style=\\\"color:red\\\"\\n                          data-bind=\\\"text: _.join(_.map($data.getPhasedOutTrains(), train=>train.getName()).sort(), ' ')\\\"></span>&nbsp;<span\\n                            data-bind=\\\"text: _.join(_.map($data.getNonPhasedOutTrains(), train=>train.getName()).sort(), ' ')\\\"></span>\\n                    </td>\\n                </tr>\\n                <tr>\\n                    <th class=\\\"border-0 bg-table-row font-weight-normal p-0 text-right \\\" scope=\\\"row\\\">\\n                        <div class=\\\"p-1 pl-2 pr-2\\\">Cash</div>\\n                    </th>\\n                    <td class=\\\"pt-1 pb-1 bg-table-row border-0\\\">\\n                        <div data-bind=\\\"text: '$' + $data.cash()\\\"></div>\\n                    </td>\\n                </tr>\\n                <tr>\\n                    <th class=\\\"border-0 bg-light font-weight-normal p-0 text-right \\\" scope=\\\"row\\\">\\n                        <div class=\\\"p-1 pl-2 pr-2 \\\">\\n                            Tokens\\n                        </div>\\n                    </th>\\n                    <td class=\\\"pt-1 pb-1 bg-light border-0\\\"\\n                        data-bind=\\\"text:$data.tokens() + '/' + $data.startTokens\\\"></td>\\n                </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n        <!-- ko if: $data.getPrivates().length > 0 -->\\n        <div class=\\\"card mb-1\\\" style=\\\"overflow:hidden;border-radius:.7rem;border:3px solid #f8f9fa;\\\">\\n            <table class=\\\"table text-center m-0\\\">\\n                <tbody>\\n                <tr>\\n                    <th colspan=\\\"2\\\" scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                        data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Privates\\n                    </th>\\n                </tr>\\n                <!-- ko foreach: $data.getPrivates() -->\\n                <tr>\\n                    <td colspan=\\\"2\\\" class=\\\"pt-1 pb-1 border-0\\\"\\n                        data-bind=\\\"css: $index() % 2 ? 'bg-table-row' : 'bg-light', text:$data.name\\\"></td>\\n                </tr>\\n                <!-- /ko -->\\n                </tbody>\\n            </table>\\n        </div>\\n        <!-- /ko -->\\n    </div>\\n</div>\";";

/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $root.game() && $root.game().state().isOperatingRound() && $data && $data.canDoAnything() -->\\n<div class=\\\"alert alert-dark rounded-0 border-top-0 border-right-0 border-left-0 m-0 p-3 d-flex flex-column justify-content-center\\\"\\n     role=\\\"alert\\\">\\n\\n    <!-- ko if: $data.interruptionNeeded() -->\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\n            <h3 class=\\\"text-center font-weight-light alert-heading\\\">Warning</h3>\\n            <h5 class=\\\"mb-1 text-center font-weight-light\\\">This company's turn must be interrupted so other companies\\n                can remove trains.</h5>\\n            <div class=\\\" text-center font-weight-light\\\">\\n                (When they are done this turn\\n                will resume but you will not be able to undo your previous actions)\\n            </div>\\n            <div class=\\\"d-flex justify-content-center mt-3\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\"\\n                        data-bind=\\\"click: function() { $root.game().sequence.interruptTurn($data.interruptionNeeded()); }\\\">\\n                    Interrupt Turn\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n\\n    <!-- ko if: !$data.interruptionNeeded() -->\\n    <!-- ko if: !$data.isMiddleOfPrivateLays() -->\\n    <h5 class=\\\"text-center font-weight-light alert-heading\\\">Choose an action</h5>\\n    <!-- /ko -->\\n\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <!-- ko if: $data.canDoPlayerSteamboat() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.PLAYER_STEAMBOAT); }, css: $data.selectedAction() === $data.Actions.PLAYER_STEAMBOAT ? 'active btn-secondary' : 'btn-light' \\\">\\n            Place / Move Steamboat\\n        </button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger mr-1\\\"\\n                data-bind=\\\"click: function() {$root.game().sequence.finishTurn();}\\\">Skip\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canBuyPrivates() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.BUY_PRIVATES); }, css: $data.selectedAction() === $data.Actions.BUY_PRIVATES ? 'active btn-secondary' : 'btn-light' \\\">\\n            Buy Private\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canUsePrivates() && ! $data.isMiddleOfPrivateLays() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.USE_PRIVATES); }, css: $data.selectedAction() === $data.Actions.USE_PRIVATES ? 'active btn-secondary' : 'btn-light' \\\">\\n            Use Private Ability\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canIssue() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.ISSUE_SHARES); }, css: $data.selectedAction() === $data.Actions.ISSUE_SHARES ? 'active btn-secondary' : 'btn-light' \\\">\\n            Issue Shares\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canRedeem() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.REDEEM_SHARES); },css: $data.selectedAction() === $data.Actions.REDEEM_SHARES ? 'active btn-secondary' : 'btn-light' \\\">\\n            Redeem Shares\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canLayTrackOrToken() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.LAY_TRACK); },css: $data.selectedAction() === $data.Actions.LAY_TRACK ? 'active btn-secondary' : 'btn-light' \\\">\\n            Lay Track / Token\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canRunRoutes() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.RUN_ROUTES); },css: $data.selectedAction() === $data.Actions.RUN_ROUTES ? 'active btn-secondary' : 'btn-light' \\\">\\n            Run Routes\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canBuyTrains() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.BUY_TRAINS); },css: $data.selectedAction() === $data.Actions.BUY_TRAINS ? 'active btn-secondary' : 'btn-light' \\\">\\n            Buy Trains\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canCloseCompany() -->\\n        <button class=\\\"btn btn-sm \\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.CLOSE_COMPANY); },css: $data.selectedAction() === $data.Actions.CLOSE_COMPANY ? 'active btn-secondary' : 'btn-light' \\\">\\n            Close Company\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.canGoBankrupt() -->\\n        <button class=\\\"btn btn-sm \\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.BANKRUPT); },css: $data.selectedAction() === $data.Actions.BANKRUPT ? 'active btn-danger' : 'btn-danger' \\\">\\n            Declare Bankruptcy\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $data.mustReturnTrain() -->\\n        <button class=\\\"btn btn-sm \\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.RETURN_TRAIN); },css: $data.selectedAction() === $data.Actions.RETURN_TRAIN ? 'active btn-warning' : 'btn-warning' \\\">\\n            Return Train\\n        </button>\\n        <!-- /ko -->\\n    </div>\\n\\n    <!-- ko if: $data.selectedAction() === $data.Actions.PLAYER_STEAMBOAT -->\\n    <h5 class=\\\"mt-3 mb-2 text-center font-weight-light alert-heading\\\">Choose a company</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $data.getSteamboatCompanies() -->\\n            <li class=\\\"rounded pl-3 pr-3 pt-1 pb-1 m-0 mr-1\\\" style=\\\"cursor:pointer;\\\"\\n                data-bind=\\\"click: function() {$parent.selectedSteamboatCompany($data.id); },style: { opacity: !$parent.selectedSteamboatCompany() || $parent.selectedSteamboatCompany() === $data.id ? 1 : 0.2}, css: 'bg-' + $data.id + ' text-' + $data.id \\\">\\n                <strong class=\\\"h5\\\" data-bind=\\\"text: $data.nickname\\\"></strong>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.selectedSteamboatCompany() -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to place the Steamboat token in\\n        Holland, Chicago Connections, St Louis, Toledo (D14) or Wheeling (G19)</h4>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.selectedAction() === $data.Actions.RETURN_TRAIN -->\\n    <h5 class=\\\"mt-3 mb-2 text-center font-weight-light alert-heading\\\">Choose Trains</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $data.currentCompanyTrains() -->\\n            <li>\\n                <div class=\\\"card d-inline-flex bg-route-train\\\"\\n                     data-bind=\\\"click: function() {$parent.selectTrainToReturn($data); }, style: { 'margin-left': $index() === 0 ? '0' : '10px', backgroundImage: 'url(' + $root.rootPath + 'images/trains/' + $data.type + '.png)' }\\\">\\n\\n                    <div class=\\\"bg-route-train-border\\\"\\n                         data-bind=\\\"css: 'bg-route-border-' + ($parent.selectedTrainToReturn() === $data.id  ? '1' : '0')+ ' ' + ($parent.selectedTrainToReturn() === $data.id ? 'bg-route-train-big-border' : 'bg-route-train-small-border')\\\"></div>\\n                </div>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.selectedAction() === $data.Actions.BUY_PRIVATES -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Choose a private:</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $root.game().state().currentPlayer().getPrivates() -->\\n            <button class=\\\"btn btn-sm mr-2\\\"\\n                    data-bind=\\\"click: function() {$parent.selectPrivate($data.id); },style: { opacity: !$parent.selectedPrivateId() || $parent.selectedPrivateId() === $data.id ? 1 : 0.2}, css: ($parent.selectedPrivateId() === $data.id  ? 'btn-warning text-dark' : 'btn-secondary text-white') \\\">\\n                <span class=\\\"h6\\\" data-bind=\\\"text: $data.name\\\"></span>\\n            </button>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.selectedPrivateId() -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">For how much?</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"input-group justify-content-center\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text\\\" data-bind=\\\"text: '$'\\\"></span>\\n            </div>\\n            <input type=\\\"number\\\" maxlength=\\\"3\\\" pattern=\\\"[0-9]*\\\" min=\\\"1\\\" max=\\\"60\\\" inputmode=\\\"numeric\\\"\\n                   style=\\\"max-width: 72px;\\\" class=\\\"form-control no-spinners\\\"\\n                   data-bind=\\\"value: privatePrice, valueUpdate: 'keyup', attr: { placeholder: '1-' + maxPrivateCost()}\\\">\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedPrivateId() === 'cwi' && $data.privatePrice() -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Take over the token?</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"css: $data.useCWIToken() ? 'btn-warning' : 'btn-secondary', click: function() { $data.useCWIToken(true) }\\\">\\n                Yes\\n            </button>\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"css: !$data.useCWIToken() ? 'btn-warning' : 'btn-secondary', click: function() { $data.useCWIToken(false) }\\\">\\n                No\\n            </button>\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n\\n\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.selectedAction() === $data.Actions.USE_PRIVATES -->\\n    <!-- ko if: $data.useablePrivates().length > 1 && !$data.isMiddleOfPrivateLays() -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\"\\n        data-bind=\\\"html: $data.useablePrivates().length > 1 ? 'Choose a private:' : '&nbsp;'\\\"></h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $data.useablePrivates() -->\\n            <button class=\\\"btn btn-sm mr-2\\\"\\n                    data-bind=\\\"click: function() {$parent.selectPrivate($data.id); },style: { opacity: !$parent.selectedPrivateId() || $parent.selectedPrivateId() === $data.id ? 1 : 0.2}, css: ($parent.selectedPrivateId() === $data.id  ? 'btn-warning text-dark' : 'btn-secondary text-white') \\\">\\n                <span class=\\\"h6\\\" data-bind=\\\"text: $data.name\\\"></span>\\n            </button>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedPrivateId() === 'oandi' -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to lay up to two O&I tiles (F14\\n        and/or F16)</h4>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedPrivateId() === 'mc' -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to lay up to two MC tiles (B10\\n        and/or B12)</h4>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedPrivateId() === 'lsl' -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to upgrade Toledo (D14) or Cleveland\\n        (E17)</h4>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedPrivateId() === 'meat' -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to place the Meat Packing token in\\n        Chicago (D6) or St Louis</h4>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedPrivateId() === 'boat' -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to place the Steamboat token in\\n        Holland, Chicago Connections, St Louis, Toledo (D14) or Wheeling (G19)</h4>\\n    <!-- /ko -->\\n    <!-- ko if: $data.isMiddleOfPrivateLays() -->\\n    <div class=\\\"d-flex justify-content-center mt-3\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger mr-1\\\"\\n                data-bind=\\\"click: function() {$data.skipSecondPrivateLay();}\\\">Skip Second Tile\\n        </button>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedAction() === $data.Actions.ISSUE_SHARES -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">How many shares?</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <!-- ko foreach: _.range(1, $data.getNumCanIssue()+1) -->\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"text: $data, css: $parent.numberOfShares() === $index()+1 ? 'btn-warning' : 'btn-secondary', click: function() { $parent.numberOfShares($index()+1); }\\\"></button>\\n            <!-- /ko -->\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedAction() === $data.Actions.REDEEM_SHARES -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">How many shares?</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <!-- ko foreach: _.range(1, $data.getNumCanRedeem()+1) -->\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"text: $data, css: $parent.numberOfShares() === $index()+1 ? 'btn-warning' : 'btn-secondary', click: function() { $parent.numberOfShares($index()+1); }\\\"></button>\\n            <!-- /ko -->\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedAction() === $data.Actions.LAY_TRACK -->\\n    <h4 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Use the map below to lay track or add a token</h4>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedAction() === $data.Actions.RUN_ROUTES -->\\n    <!-- ko if: $data.companyTrains().length > 0 -->\\n    <h5 class=\\\"mt-3 mb-0 text-center font-weight-light alert-heading\\\">Operate Trains</h5>\\n    <div style=\\\"font-size:14px;\\\" class=\\\"mt-0 mb-3 text-center alert-heading\\\">(Choose trains and draw routes on map\\n        below)\\n    </div>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $data.companyTrains() -->\\n            <li>\\n                <div class=\\\"card d-inline-flex bg-route-train\\\"\\n                     data-bind=\\\"style: { 'margin-left': $index() === 0 ? '0' : '10px', backgroundImage: 'url(' + $root.rootPath + 'images/trains/' + $data.type + '.png)' },click: function() { $parent.selectTrain($data)} \\\">\\n                    <div class=\\\"bg-route-train-border\\\"\\n                         data-bind=\\\"css: 'bg-route-border-' + $data.route.color + ' ' + ($parent.selectedTrain() === $data.id ? 'bg-route-train-big-border' : 'bg-route-train-small-border')\\\"></div>\\n                    <div style=\\\"border-radius:4px; padding:0 5px;position:absolute;top:-5px;right:-5px;color:white\\\"\\n                         data-bind=\\\"css: 'bg-route-' + $data.route.color\\\"><span style=\\\"font-size:16px;font-weight:600\\\"\\n                                                                                data-bind=\\\"text: '$' + $data.route.revenue()\\\"></span>\\n                    </div>\\n                </div>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.selectedTrain() && $data.canAllocateRevenue()-->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\"\\n        data-bind=\\\"text: 'Allocate $' + $data.runRevenue() + ' revenue'\\\"></h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"css: $data.selectedAllocation() === $data.Allocations.NONE ? 'btn-warning' : 'btn-secondary', click: function() {  $data.selectAllocation($data.Allocations.NONE); }\\\">\\n                <div>Withhold</div>\\n                <div style=\\\"font-size:12px;\\\" data-bind=\\\"html: '&#x21E0; price'\\\"></div>\\n            </button>\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"css: $data.selectedAllocation() === $data.Allocations.HALF ? 'btn-warning' : 'btn-secondary', click: function() { $data.selectAllocation($data.Allocations.HALF); }\\\">\\n                <div>Pay Half</div>\\n                <div style=\\\"font-size:12px;\\\" data-bind=\\\"text: $data.halfPayResult()\\\"></div>\\n            </button>\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"css: $data.selectedAllocation() === $data.Allocations.FULL ? 'btn-warning' : 'btn-secondary', click: function() { $data.selectAllocation($data.Allocations.FULL); }\\\">\\n                <div>Pay Full</div>\\n                <div style=\\\"font-size:12px;\\\" data-bind=\\\"text: $data.fullPayResult()\\\"></div>\\n            </button>\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.selectedAction() === $data.Actions.BUY_TRAINS -->\\n    <!-- ko if: $data.canBuyTrainFromCompany() -->\\n    <h5 class=\\\"mt-3 mb-2 text-center font-weight-light alert-heading\\\">Buy from</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko if: $data.canBuyTrainFromBank() || $data.canEmergencyBuy()-->\\n            <li class=\\\"rounded pl-3 pr-3 pt-1 pb-1 m-0 mr-1\\\" style=\\\"cursor:pointer;\\\"\\n                data-bind=\\\"click: function() {$data.selectedTrainSource('bank'); },style: { opacity: !$data.selectedTrainSource() || $data.selectedTrainSource() === 'bank' ? 1 : 0.2}, css: 'bg-secondary'+ ' text-white'\\\">\\n                <strong class=\\\"h5\\\">Bank</strong>\\n            </li>\\n            <!-- /ko -->\\n            <!-- ko foreach: $data.getCompaniesWithTrains() -->\\n            <li class=\\\"rounded pl-3 pr-3 pt-1 pb-1 m-0 mr-1\\\" style=\\\"cursor:pointer;\\\"\\n                data-bind=\\\"click: function() {$parent.selectedTrainSource($data.id); },style: { opacity: !$parent.selectedTrainSource() || $parent.selectedTrainSource() === $data.id ? 1 : 0.2}, css: 'bg-' + $data.id + ' text-' + $data.id \\\">\\n                <strong class=\\\"h5\\\" data-bind=\\\"text: $data.nickname\\\"></strong>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedTrainSource() && $data.selectedTrainSource() === 'bank'-->\\n    <h5 class=\\\"mt-3 mb-2 text-center font-weight-light alert-heading\\\">Choose Trains</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko if: !$data.canEmergencyBuy() -->\\n            <!-- ko foreach: $data.availableBankTrains() -->\\n            <li>\\n                <div data-bind=\\\"style: { opacity: num <= 0 ? .2 : 1 }\\\">\\n                    <div class=\\\"card mb-0 d-inline-flex bg-route-train\\\"\\n                         data-bind=\\\"style: { 'margin-left': $index() === 0 ? '0' : '10px', backgroundImage: 'url(' + $root.rootPath + 'images/trains/' + $data.type + '.png)' }\\\">\\n                        <div class=\\\"bg-route-train-border\\\"\\n                             data-bind=\\\"css: 'bg-route-border-0 bg-route-train-small-border'\\\"></div>\\n                        <div class=\\\"bg-route-0\\\"\\n                             style=\\\"border-radius:4px; padding:0 5px;position:absolute;top:-5px;right:-5px;color:white\\\"><span\\n                                style=\\\"font-size:16px;font-weight:600\\\"\\n                                data-bind=\\\"text: '$' + $data.cost\\\"></span>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"mb-2\\\">\\n                        <span style=\\\"font-size:14px\\\" data-bind=\\\"text: $data.available + ' remaining'\\\"></span>\\n                    </div>\\n                    <div>\\n                        <!-- ko foreach: _.range(1, $data.num+1) -->\\n                        <button type=\\\"button\\\" class=\\\"btn\\\"\\n                                data-bind=\\\"text: $data, css: $parents[1].isBankTrainSelectedForPurchase($parent.type, $data) ? 'btn-warning' : 'btn-secondary', click: function() { $parents[1].selectBankTrainForPurchase($parent.type, $data) }\\\"></button>\\n                        <!-- /ko -->\\n                    </div>\\n                </div>\\n            </li>\\n            <!-- /ko -->\\n            <!-- /ko -->\\n            <!-- ko if: $data.canEmergencyBuy() -->\\n            <!-- ko foreach: $data.getTrainsAvailableToForceBuy() -->\\n            <li>\\n                <div class=\\\"card d-inline-flex bg-route-train\\\"\\n                     data-bind=\\\"style: { 'margin-left': $index() === 0 ? '0' : '10px', backgroundImage: 'url(' + $root.rootPath + 'images/trains/' + $data.type + '.png)' },click: function() { $parent.selectForcedTrainForPurchase($data)} \\\">\\n                    <div class=\\\"bg-route-train-border\\\"\\n                         data-bind=\\\"css: 'bg-route-border-0 ' + ($parent.selectedForcedTrainForPurchase() === $data.type ? 'bg-route-train-big-border' : 'bg-route-train-small-border')\\\"></div>\\n                    <div class=\\\"bg-route-0\\\"\\n                         style=\\\"border-radius:4px; padding:0 5px;position:absolute;top:-5px;right:-5px;color:white\\\"><span\\n                            style=\\\"font-size:16px;font-weight:600\\\"\\n                            data-bind=\\\"text: '$' + $data.cost\\\"></span>\\n                    </div>\\n                </div>\\n            </li>\\n            <!-- /ko -->\\n\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.canEmergencyBuy() && $data.selectedForcedTrainForPurchase() && $data.needsStockSales() -->\\n    <h5 class=\\\"mt-3 mb-2 text-center font-weight-light alert-heading\\\"\\n        data-bind=\\\"text: 'Sell Shares' + ($data.moneyNeededAfterCurrentStockSales() > 0 ? ' - $' + $data.moneyNeededAfterCurrentStockSales() + ' needed' : '')\\\">\\n        Sell Shares</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $data.sharesForSale() -->\\n            <li>\\n                <div class=\\\"mr-2\\\" data-bind=\\\"style: { opacity: num <= 0 ? .2 : 1 }\\\">\\n                    <div class=\\\"rounded pl-3 pr-3 pt-1 pb-1 m-0 mb-2\\\" style=\\\"cursor:pointer;\\\"\\n                         data-bind=\\\"style: { opacity: 1 }, css: 'bg-' + $data.company.id + ' text-' + $data.company.id\\\">\\n                        <strong class=\\\"h5\\\" data-bind=\\\"text: $data.company.nickname\\\"></strong>\\n                        <div data-bind=\\\"text: '$' + $data.company.price()\\\"></div>\\n                    </div>\\n                    <div>\\n                        <!-- ko foreach: _.range(1, $data.num+1) -->\\n                        <button type=\\\"button\\\" class=\\\"btn\\\"\\n                                data-bind=\\\"text: $data, css: $parents[1].isStockSelectedForSale($parent.company.id, $data) ? 'btn-warning' : 'btn-secondary', click: function() { $parents[1].selectStockForSale($parent.company.id, $data)}\\\"></button>\\n                        <!-- /ko -->\\n                    </div>\\n                </div>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.selectedTrainSource() && $data.selectedTrainSource() !== 'bank'-->\\n    <h5 class=\\\"mt-3 mb-2 text-center font-weight-light alert-heading\\\">Choose Trains</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $data.availableCompanyTrains() -->\\n            <li>\\n                <div class=\\\"card d-inline-flex bg-route-train\\\"\\n                     data-bind=\\\"click: function() {$parent.selectCompanyTrainForPurchase($data); }, style: { 'margin-left': $index() === 0 ? '0' : '10px', backgroundImage: 'url(' + $root.rootPath + 'images/trains/' + $data.type + '.png)' }\\\">\\n\\n                    <div class=\\\"bg-route-train-border\\\"\\n                         data-bind=\\\"css: 'bg-route-border-' + ($parent.isCompanyTrainSelectedForPurchase($data.id) ? '1' : '0')+ ' ' + ($parent.isCompanyTrainSelectedForPurchase($data.id) ? 'bg-route-train-big-border' : 'bg-route-train-small-border')\\\"></div>\\n                </div>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.selectedCompanyTrainsForPurchase().length > 0 -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">For how much?</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"input-group justify-content-center\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text\\\" data-bind=\\\"text: '$'\\\"></span>\\n            </div>\\n            <input type=\\\"number\\\" maxlength=\\\"3\\\" pattern=\\\"[0-9]*\\\" min=\\\"1\\\" max=\\\"60\\\" inputmode=\\\"numeric\\\"\\n                   style=\\\"max-width: 72px;\\\" class=\\\"form-control no-spinners\\\"\\n                   data-bind=\\\"value: companyTrainPurchasePrice, valueUpdate: 'keyup', attr: { placeholder: $data.selectedCompanyTrainsForPurchase().length + '-' + $data.maxCompanyTrainPurchasePrice()}\\\">\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.action() -->\\n    <div class=\\\"d-flex justify-content-center mt-3\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary mr-1\\\"\\n                data-bind=\\\"click: $data.commit, text: $data.action().confirmation($root.game().state())\\\"></button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger mr-1\\\" data-bind=\\\"click: $data.reset\\\">Cancel</button>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n</div>\\n<!-- /ko -->\\n\";";

/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"text-center\\\">\\n    <div class=\\\"bg-dark\\\" style=\\\"padding:10px;width:100%\\\">\\n        <table class=\\\"table text-center bg-dark m-0\\\">\\n            <thead>\\n            <tr>\\n                <th colspan=\\\"3\\\" scope=\\\"col\\\" class=\\\"border-0\\\"></th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <th class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</th>\\n                <th scope=\\\"col\\\" class=\\\"border-0 font-weight-normal pt-2 pb-2\\\"\\n                    data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\"><h5 class=\\\"font-weight-normal mb-0\\\"\\n                                                                                data-bind=\\\"text:$data.nickname\\\"></h5>\\n                </th>\\n\\n                <!-- /ko -->\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr>\\n                <th scope=\\\"col\\\"class=\\\"border-0 font-weight-normal p-0 text-white text-center\\\"><div class=\\\"p-1\\\">\\n                        Player\\n                    </div></th>\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <th class=\\\"border-0 font-weight-normal p-0 text-center text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1\\\">\\n                        Cash\\n                    </div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <th scope=\\\"col\\\" class=\\\"table-col-spacer p-0 border-0\\\" style=\\\"height:10px;\\\"></th>\\n                <th scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                    data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Player Shares\\n                </th>\\n                <!-- /ko -->\\n            </tr>\\n            <!-- ko foreach: $data.players() -->\\n            <tr>\\n                <th class=\\\"border-0 font-weight-normal\\\" scope=\\\"row\\\"\\n                    data-bind=\\\"css: $parent.currentPlayerId() === $data.id ? 'bg-warning': $index() %2 ? 'bg-table-row' : 'bg-light'\\\">\\n                    <div class=\\\"d-inline-flex align-items-center\\\">\\n                        <!-- ko if: $data.id === $root.game().state().priorityDealPlayerId() -->\\n        <img style=\\\"height:20px;margin-right:10px;\\\" data-bind=\\\"attr: { src: $root.rootPath + 'images/pd.png' }\\\"/><!-- /ko -->\\n                        <h5 class=\\\"m-0 font-weight-normal \\\" data-bind=\\\"text:$data.name()\\\"></h5></div></th>\\n                <td class=\\\"table-col-spacer p-0 border-0\\\"\\n                    data-bind=\\\"css: $root.game().state().currentPlayerId() === $data.id ? 'bg-warning': 'bg-dark'\\\">\\n                    &nbsp;\\n                </td>\\n                <th class=\\\"border-0 font-weight-normal text-center\\\" style=\\\"width:1%;white-space:nowrap\\\" scope=\\\"row\\\"\\n                    data-bind=\\\"css: $parent.currentPlayerId() === $data.id ? 'bg-warning': $index() %2 ? 'bg-table-row' : 'bg-light'\\\">\\n                    <h5 class=\\\"m-0 font-weight-normal \\\" data-bind=\\\"text:'$' + $data.cash()\\\"></h5></th>\\n                <!-- ko foreach: $parent.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\"\\n                    data-bind=\\\"css: $root.game().state().currentPlayerId() === $parent.id ? 'bg-warning': 'bg-dark'\\\">\\n                    &nbsp;\\n                </td>\\n                <td class=\\\"border-0\\\"\\n                    data-bind=\\\"css: $root.game().state().currentPlayerId() === $parent.id ? 'bg-warning' : $parentContext.$index() % 2 ? 'bg-table-row' : 'bg-light'\\\">\\n                    <h5 class=\\\"m-0 font-weight-normal text-dark\\\"\\n                        data-bind=\\\"text:$parent.numSharesOwnedOfCompany($data.id)\\\"></h5></td>\\n                <!-- /ko -->\\n            </tr>\\n            <!-- /ko -->\\n            <tr>\\n                <th colspan=\\\"\\\" scope=\\\"col\\\" class=\\\"table-col-spacer p-0 border-0\\\" style=\\\"height:10px;\\\"\\n                    data-bind=\\\"attr: { 'colspan': ($data.openCompanies().length *2) + 3}\\\"></th>\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 p-0\\\"></th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <th scope=\\\"col\\\" class=\\\"table-col-spacer p-0 border-0\\\" style=\\\"height:10px;\\\"></th>\\n                <th scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                    data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Avail. Shares\\n                </th>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" class=\\\"border-0 font-weight-normal p-0 text-right text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1 pr-2\\\">\\n                        <div>Price</div>\\n                    </div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <td class=\\\"bg-light pt-1 pb-1 border-0 \\\">\\n                    <div data-bind=\\\"text: '$' + $data.price()\\\"></div>\\n                </td>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" class=\\\"border-0 font-weight-normal p-0 text-right text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1 pr-2\\\">\\n                        <div>Market</div>\\n                    </div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <td class=\\\"bg-table-row pt-1 pb-1 border-0 \\\">\\n                    <div data-bind=\\\"text: $root.game().state().bank.numSharesOwnedOfCompany($data.id)\\\"></div>\\n                </td>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" class=\\\"border-0 font-weight-normal p-0 text-right text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1\\\">\\n                        <div>Treasury</div>\\n                    </div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <td class=\\\"bg-light pt-1 pb-1 border-0 \\\">\\n                    <div class=\\\"\\\"\\n                         data-bind=\\\"text: $data.shares()\\\"></div>\\n                </td>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"\\\" scope=\\\"col\\\" class=\\\"table-col-spacer p-0 border-0\\\" style=\\\"height:10px;\\\"\\n                    data-bind=\\\"attr: { 'colspan': ($data.openCompanies().length *2) + 3}\\\"></th>\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 p-0\\\"></th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <th scope=\\\"col\\\" class=\\\"table-col-spacer p-0 border-0\\\" style=\\\"height:10px;\\\"></th>\\n                <th scope=\\\"col\\\" style=\\\"height:10px;\\\" class=\\\"border-0 font-weight-normal p-0\\\"\\n                    data-bind=\\\"css: 'bg-' + $data.id + ' text-' + $data.id\\\">Assets\\n                </th>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" class=\\\"border-0 font-weight-normal p-0 text-right text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1\\\">\\n                        Trains\\n                    </div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <td class=\\\"pt-1 pb-1 bg-light border-0\\\"\\n                    data-bind=\\\"text: _.join(_.map($data.getNonPhasedOutTrains(), train=>train.getName()).sort(), ' ')\\\"></td>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" class=\\\"border-0 font-weight-normal p-0 text-right text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1\\\">Cash</div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <td class=\\\"pt-1 pb-1 bg-table-row border-0\\\">\\n                    <div data-bind=\\\"text: '$' + $data.cash()\\\"></div>\\n                </td>\\n                <!-- /ko -->\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"3\\\" class=\\\"border-0 font-weight-normal p-0 text-right text-white\\\" scope=\\\"row\\\">\\n                    <div class=\\\"p-1\\\">\\n                        Tokens\\n                    </div>\\n                </th>\\n                <!-- ko foreach: $data.openCompanies() -->\\n                <td class=\\\"table-col-spacer p-0 border-0\\\">&nbsp;</td>\\n                <td class=\\\"pt-1 pb-1 bg-light border-0\\\" data-bind=\\\"text:$data.tokens() + '/' + $data.startTokens\\\"></td>\\n                <!-- /ko -->\\n            </tr>\\n            </tbody>\\n\\n        </table>\\n    </div>\\n\\n</div>\";";

/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div>\\n    <h3 data-bind=\\\"text: user().username\\\"></h3>\\n\\n    <ul class=\\\"nav nav-tabs\\\">\\n        <li class=\\\"nav-item\\\">\\n            <a class=\\\"nav-link active\\\" href=\\\"#\\\">Status</a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n            <a class=\\\"nav-link\\\" href=\\\"#\\\">Turn Summary</a>\\n        </li>\\n    </ul>\\n\\n</div>\";";

/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko foreach: $data.players() -->\\n<div class=\\\"card d-inline-flex text-center pr-3 pl-3 pt-1 pb-1 rounded-0 border-bottom-0 border-right-0\\\"\\n     style=\\\"min-width:10rem;cursor:pointer;height:100%;\\\"\\n     data-bind=\\\"css: $parent.currentPlayerId() !== $data.id ? 'bg-light text-dark' : 'bg-warning text-dark'\\\">\\n    <div class=\\\"d-inline-flex justify-content-center align-items-center\\\">\\n        <!-- ko if: $data.id === $root.game().state().priorityDealPlayerId() -->\\n        <img style=\\\"height:15px;margin-right:10px;\\\" data-bind=\\\"attr: { src: $root.rootPath + 'images/pd.png' }\\\"/><!-- /ko --><h5\\n            class=\\\"mb-0\\\" data-bind=\\\"text: user().username\\\"></h5>\\n    </div>\\n    <div class=\\\"d-flex justify-content-between text-center mt-1\\\">\\n        <div class=\\\"mr-3\\\">\\n            <div style=\\\"font-size:10px;margin-bottom:-5px;\\\">cash</div>\\n            <div style=\\\"font-size:.9rem\\\"\\n                 data-bind=\\\"text: (!$root.game().state().isPrivateDraft() || $root.game().isDraftRevealed() && $root.game().state().currentPlayerId() === $data.id) ? '$' + cash() : '&nbsp;'\\\"></div>\\n        </div>\\n        <div class=\\\"mr-3\\\">\\n            <div style=\\\"font-size:10px;margin-bottom:-5px;\\\">certs</div>\\n            <div style=\\\"font-size:.9rem\\\"\\n                 data-bind=\\\"text: (!$root.game().state().isPrivateDraft() || $root.game().isDraftRevealed() && $root.game().state().currentPlayerId() === $data.id) ? certificates().length + '/' + $parent.certLimit() : '&nbsp;'\\\"></div>\\n        </div>\\n        <div>\\n            <div style=\\\"font-size:10px;margin-bottom:-5px;\\\">worth</div>\\n            <div style=\\\"font-size:.9rem\\\"\\n                 data-bind=\\\"text: (!$root.game().state().isPrivateDraft() || $root.game().isDraftRevealed() && $root.game().state().currentPlayerId() === $data.id) ? '$' + getNetWorth() : '&nbsp;'\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n<!-- ko if: $index() !== $parent.players().length -1 -->\\n<div class=\\\"d-inline-flex\\\" style=\\\"width:0px\\\"></div>\\n<!-- /ko -->\\n<!-- /ko -->\\n\";";

/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"d-flex flex-nowrap\\\">\\n    <!-- ko foreach: _.values($data.stockBoard.stockBoard()) -->\\n    <div class=\\\"d-inline-flex card rounded-0 text-center text-secondary pb-3\\\"\\n         style=\\\"min-width:50px;width:100%;min-height:50px;\\\"\\n         data-bind=\\\"style: { backgroundColor: $index() % 2 == 0 ? '#f2f2f2' : '#FFF', 'border-left': $data.value === 40 ? '2px solid #ffe300' : '0', 'border-right': $data.value === 150 ? '2px solid #ffe300' : '0', 'border-top': $data.value >= 40 && $data.value <= 150 ? '2px solid #ffe300' : '0', 'border-bottom': $data.value >= 40 && $data.value <= 150 ? '2px solid #ffe300' : '0'  }\\\">\\n        <div class=\\\"card-title mb-0\\\">\\n            <h6 data-bind=\\\"text:$data.value\\\"></h6>\\n        </div>\\n        <!-- ko foreach: $data.companies() -->\\n            <div class=\\\"\\\" style=\\\"height:25px;font-size:1em;margin-bottom:2px;\\\" data-bind=\\\"text:$root.game().state().getCompany($data).nickname,css: 'bg-' + $data + ' text-' + $data\\\"></div>\\n        <!-- /ko -->\\n    </div>\\n    <!-- /ko -->\\n</div>\";";

/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data -->\\n<div class=\\\"row d-flex justify-content-center text-center align-items-center bg-light\\\" style=\\\"min-height:50vh;\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"col-lg-8 col-xl-7 mx-auto\\\">\\n            <div class=\\\"\\\"><h2 class=\\\"font-weight-light p-2 pb-0 m-0\\\">Choose a private company</h2>\\n                <!-- ko if: $data.revealed() -->\\n                <!-- ko if: $root.game().state().currentPlayer().getPrivateNames().length > 0 -->\\n                <div class=\\\"font-weight-light text-dark mb-3\\\" style=\\\"font-size:1.3rem\\\" data-bind=\\\"text: 'Already chosen: ' + _.join($root.game().state().currentPlayer().getPrivateNames(), ', ')\\\"></div>\\n                <!-- /ko -->\\n                <!-- ko foreach: $data.privatesOffered() -->\\n                <div class=\\\"card d-inline-flex mb-3 mr-3\\\"\\n                     style=\\\"overflow:hidden;background-size:contain;cursor:pointer;min-width:250px;min-height:160px;box-shadow:3px 3px 10px #ccc\\\"\\n                     data-bind=\\\"style: { backgroundImage: 'url(' + $root.rootPath + 'images/privates/' + $data.id + '.png)', borderWidth: $parent.selectedPrivateId() === $data.id ? '3px' : '1px' },click: $parent.selectPrivate.bind($parent, $data.id), css: {'border-warning': $parent.selectedPrivateId() === $data.id }\\\">\\n                    <!--<div data-bind=\\\"text: _.startsWith($data.id, 'pass') ? '' : $data.cost\\\"></div>-->\\n                </div>\\n                <!-- /ko -->\\n                <div>\\n                    <!-- ko if: $data.privatesOffered().length === 1 && $data.privatesOffered()[0].cost !== $data.privatesOffered()[0].baseCost -->\\n                        <h3 class=\\\"font-weight-light\\\" data-bind=\\\"text: 'Discounted to $' + $data.privatesOffered()[0].cost\\\"></h3>\\n                    <!-- /ko -->\\n                    <div class=\\\"d-inline-flex\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\"\\n                                data-bind=\\\"click: pass, visible: $data.privatesOffered().length === 1 && $data.privatesOffered()[0].cost !== 0\\\">\\n                            Pass\\n                        </button>\\n                    </div>\\n                    <div class=\\\"d-inline-flex\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\n                                data-bind=\\\"click: commit, visible: selectedPrivateId()\\\">Confirm\\n                        </button>\\n                    </div>\\n                </div>\\n                <!-- /ko -->\\n                <!-- ko if: !$data.revealed() -->\\n                <button class=\\\"btn btn-large\\\" data-bind=\\\"click: function() {$data.revealed(true)}\\\">Reveal Choices</button>\\n                <!-- /ko -->\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<!-- /ko -->\";";

/***/ }),
/* 118 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: isStockRound() -->\\n<img style=\\\"position:absolute;width:56px;height:56px;top:58px;left:13px;\\\" data-bind=\\\"attr: {'src': $root.rootPath + 'images/tokens/stockround.png' }\\\"/>\\n<!-- /ko -->\\n<!-- ko if: isOperatingRound1() -->\\n<img style=\\\"position:absolute;width:56px;height:56px;top:12px;left:93px;\\\" data-bind=\\\"attr: {'src': $root.rootPath + 'images/tokens/or1.png' }\\\"/>\\n<!-- /ko -->\\n<!-- ko if: isOperatingRound2() -->\\n<img style=\\\"position:absolute;width:56px;height:56px;top:105px;left:93px;\\\" data-bind=\\\"attr: {'src': $root.rootPath + 'images/tokens/or2.png' }\\\"/>\\n<!-- /ko -->\";";

/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data && ($root.game().state().currentPlayer().canSell() || $root.game().state().currentPlayer().canBuy() || $root.game().state().currentPlayer().canPass())-->\\n<div class=\\\"alert alert-dark rounded-0 border-top-0 border-right-0 border-left-0 m-0 p-3 d-flex flex-column justify-content-center\\\"\\n     role=\\\"alert\\\">\\n\\n\\n    <h5 class=\\\"text-center font-weight-light alert-heading\\\">Choose an action</h5>\\n\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <!-- ko if: $root.game().state().currentPlayer().canSell() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.SELL); }, css: $data.selectedAction() === $data.Actions.SELL ? 'active btn-danger' : 'btn-light' \\\">\\n            Sell\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $root.game().state().currentPlayer().canBuy() -->\\n        <button class=\\\"btn btn-sm mr-2\\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.BUY); },css: $data.selectedAction() === $data.Actions.BUY ? 'active btn-success' : 'btn-light' \\\">\\n            Buy\\n        </button>\\n        <!-- /ko -->\\n        <!-- ko if: $root.game().state().currentPlayer().canPass() -->\\n        <button class=\\\"btn btn-sm \\\"\\n                data-bind=\\\"click: function() { $data.selectAction($data.Actions.PASS); },css: $data.selectedAction() === $data.Actions.PASS ? 'active btn-secondary' : 'btn-light' \\\">\\n            Pass\\n        </button>\\n        <!-- /ko -->\\n    </div>\\n\\n    <!-- ko if: $data.selectedAction() === $data.Actions.SELL -->\\n    <!-- ko if: $root.game().state().currentPlayer().hasSharesToSell() -->\\n    <div class=\\\"mt-3 d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: _.values($root.game().state().currentPlayer().sharesCanSell()) -->\\n            <li class=\\\"rounded pl-3 pr-3 pt-1 pb-1 m-0 mr-1\\\" style=\\\"cursor:pointer;\\\"\\n                data-bind=\\\"click: function() {$parent.selectCompany($data.id); },style: { opacity: !$parent.selectedCompanyId() || $parent.selectedCompanyId() === $data.id ? 1 : 0.2}, css: 'bg-' + $data.id + ' text-' + $data.id \\\">\\n                <strong class=\\\"h5\\\" data-bind=\\\"text: $data.company.nickname\\\"></strong>\\n                <div data-bind=\\\"text: $data.shares + ' @ $' + $data.company.price()\\\"></div>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.selectedCompany() && $root.game().state().currentPlayer().sharesCanSell()[$data.selectedCompany().id] -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">How many shares?</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <!-- ko foreach: _.range(1, $root.game().state().currentPlayer().sharesCanSell()[$data.selectedCompany().id].shares + 1) -->\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"text: $data, css: $parent.numberOfShares() === $index()+1 ? 'btn-warning' : 'btn-secondary', click: function() { $parent.numberOfShares($index()+1); }\\\"></button>\\n            <!-- /ko -->\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedAction() === $data.Actions.BUY -->\\n    <div class=\\\"mt-3 d-flex justify-content-center\\\">\\n        <ul class=\\\"list-unstyled font-weight-light m-0 d-flex flex-wrap text-center\\\">\\n            <!-- ko foreach: $root.game().state().currentPlayer().companiesCanBuy() -->\\n            <li class=\\\"rounded pl-3 pr-3 pt-1 pb-1 m-0 mr-1\\\" style=\\\"cursor:pointer;\\\"\\n                data-bind=\\\"click: function() {$parent.selectedCompanyId($data.id); },style: { opacity: !$parent.selectedCompanyId() || $parent.selectedCompanyId() === $data.id ? 1 : 0.2}, css: 'bg-' + $data.id + ' text-' + $data.id \\\">\\n                <div data-bind=\\\"text: $data.opened() ? '' : 'open'\\\"></div>\\n                <strong class=\\\"h5\\\" data-bind=\\\"text: $data.nickname\\\"></strong>\\n                <div data-bind=\\\"text: $data.opened() ? '$' + $data.price() : ''\\\"></div>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n    </div>\\n    <!-- ko if: $data.selectedCompany() && !$data.selectedCompany().opened()-->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Choose an initial stock price</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <!-- ko foreach: $data.getParRange() -->\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"text: $data, css: $parent.openingPriceIndex() === $index()+4 ? 'btn-warning' : 'btn-secondary', click: function() { $parent.openingPriceIndex($index()+4); }\\\"></button>\\n            <!-- /ko -->\\n        </div>\\n    </div>\\n    <!-- /ko -->\\n    <!-- ko if: $data.selectedCompany() && $data.selectedCompany().opened() && $data.bankShares() && $data.treasuryShares() -->\\n    <h5 class=\\\"mt-3 text-center font-weight-light alert-heading\\\">Choose a share source</h5>\\n    <div class=\\\"d-flex justify-content-center\\\">\\n\\n            <button type=\\\"button\\\" class=\\\"btn mr-1\\\"\\n                    data-bind=\\\"css: $data.chosenShareSource() === $data.ShareSources.MARKET ? 'btn-warning' : 'btn-secondary', click: function() { $data.chosenShareSource($data.ShareSources.MARKET); }\\\"><strong class=\\\"h4 mr-2 align-middle\\\" data-bind=\\\"text: $data.bankShares()\\\"></strong><span class=\\\"align-middle\\\">market</span></button>\\n            <button type=\\\"button\\\" class=\\\"btn\\\"\\n                    data-bind=\\\"css: $data.chosenShareSource() === $data.ShareSources.TREASURY ? 'btn-warning' : 'btn-secondary', click: function() { $data.chosenShareSource($data.ShareSources.TREASURY); }\\\"><strong class=\\\"h4 mr-2 align-middle\\\" data-bind=\\\"text: $data.treasuryShares()\\\"></strong><span class=\\\"align-middle\\\">treasury</span></button>\\n    </div>\\n    <!-- /ko -->\\n    <!-- /ko -->\\n\\n    <!-- ko if: $data.action() -->\\n    <div class=\\\"d-flex justify-content-center mt-3\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary mr-1\\\" data-bind=\\\"click: $data.commit, text: $data.action().confirmation($root.game().state())\\\"></button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger mr-1\\\" data-bind=\\\"click: $data.reset\\\">Cancel</button>\\n    </div>\\n    <!-- /ko -->\\n\\n</div>\\n<!-- /ko -->\\n\";";

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"p-3\\\">\\n    <ul class=\\\"nav mb-3\\\">\\n        <li class=\\\"nav-item bg-phase1\\\" style=\\\"border-radius:.5rem;\\\">\\n            <a class=\\\"nav-link text-phase1\\\" href=\\\"#\\\"\\n               data-bind=\\\"css: { active : $data.manifest.activeTileSet() === $data.manifest.TileColorIDs.YELLOW}, click:function() { $data.manifest.setActiveTileSet($data.manifest.TileColorIDs.YELLOW); }\\\">Yellow</a>\\n        </li>\\n        <li class=\\\"nav-item bg-phase2 ml-2\\\" style=\\\"border-radius:.5rem;\\\">\\n            <a class=\\\"nav-link text-phase2\\\" href=\\\"#\\\"\\n               data-bind=\\\"css: { active : $data.manifest.activeTileSet() === $data.manifest.TileColorIDs.GREEN}, click:function() { $data.manifest.setActiveTileSet($data.manifest.TileColorIDs.GREEN); }\\\">Green</a>\\n        </li>\\n        <li class=\\\"nav-item bg-phase3 ml-2\\\" style=\\\"border-radius:.5rem;\\\">\\n            <a class=\\\"nav-link text-phase3\\\" href=\\\"#\\\"\\n               data-bind=\\\"css: { active : $data.manifest.activeTileSet() === $data.manifest.TileColorIDs.BROWN}, click:function() { $data.manifest.setActiveTileSet($data.manifest.TileColorIDs.BROWN); }\\\">Brown</a>\\n        </li>\\n        <li class=\\\"nav-item bg-phase4 ml-2\\\" style=\\\"border-radius:.5rem;\\\">\\n            <a class=\\\"nav-link text-phase4\\\" href=\\\"#\\\"\\n               data-bind=\\\"css: { active : $data.manifest.activeTileSet() === $data.manifest.TileColorIDs.GRAY}, click:function() { $data.manifest.setActiveTileSet($data.manifest.TileColorIDs.GRAY); }\\\">Gray</a>\\n        </li>\\n    </ul>\\n\\n    <div class=\\\"d-flex flex-wrap m-auto\\\">\\n        <!-- ko foreach: $data.manifest.activeTiles() -->\\n        <div class=\\\"position-relative\\\">\\n\\n            <h5 class=\\\"position-absolute\\\" style=\\\"top:0;left:10px;\\\"\\n                data-bind=\\\"text: $data.remaining === -1 ? '&#x221e;' : $data.remaining \\\"></h5>\\n\\n                <div class=\\\"mr-1 mb-1\\\" style=\\\"width:126px;height:144px;\\\"\\n                     data-bind=\\\"style: { opacity : $data.remaining === 0 ? .5 : 1 }, template: {name : 'views/tiles/' + $parent.manifest.getTemplateName($data.id), data: $data.tile }, popover: $parent.manifest.popoverParams\\\"></div>\\n        </div>\\n        <!-- /ko -->\\n    </div>\\n</div>\";";

/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div data-bind=\\\"style: { width: $parent.manifest.getUpgradesForTile($data.id).length === 1 ? '126px' : '256px'} \\\">\\n    <div class=\\\"d-flex flex-wrap m-auto\\\">\\n        <!-- ko foreach: $parent.manifest.getUpgradesForTile($data.id) -->\\n        <div class=\\\"position-relative\\\">\\n            <h5 class=\\\"position-absolute\\\" style=\\\"top:0;left:10px;\\\"\\n                data-bind=\\\"text: $data.remaining === -1 ? '&#x221e;' : $data.remaining \\\"></h5>\\n            <div class=\\\"mr-1 mb-1\\\" style=\\\"width:124px;height:144px;\\\"\\n                 data-bind=\\\"style: { opacity : $data.remaining === 0 ? .5 : 1 }, template: { name: 'views/tiles/' + $root.game().state().manifest.getTemplateName($data.tile.id), data: $data.tile }\\\"></div>\\n        </div>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $parent.manifest.getUpgradesForTile($data.id).length === 0 -->\\n        <h3 class=\\\"text-dark\\\">No Upgrades</h3>\\n        <!-- /ko -->\\n    </div>\\n\\n</div>\";";

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(0,-8)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n    </g>\\n</svg>\";";

/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:174px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(87,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-76,-21)\\\">\\n            <polygon transform=\\\"rotate(30)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\"\\n                     data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(30)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getRoutedConnection([-1,1]) -->\\n\\n        <g transform=\\\"translate(-39,29)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\"\\n                     data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,1]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n\\n    </g>\\n</svg>\";";

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 30 -54 L 12 -18\\\"></path>\\n\\n        <circle cx=\\\"4\\\" cy=\\\"-34\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n\\n        <!-- ko if: $data.hasRoutedConnection([0,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 30 -54 L 12 -18\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,7]), 'stroke-width': $data.getOuterStrokeWidth([0,7]) }\\\"></path>\\n        <!-- /ko -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 30 -54 L 12 -18\\\"></path>\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"4\\\" cy=\\\"-34\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n        data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <circle cx=\\\"4\\\" cy=\\\"-34\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-16\\\" y=\\\"-54\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-16\\\" y=\\\"-54\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:130px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,65)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-63,41)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\";";

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <defs>\\n        <clipPath id=\\\"298-clip\\\">\\n            <polygon stroke=\\\"black\\\"\\n                     points=\\\"0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796\\\"></polygon>\\n        </clipPath>\\n    </defs>\\n    <g xmlns=\\\"http://www.w3.org/2000/svg\\\" fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" pointer-events=\\\"all\\\"\\n       transform=\\\"translate(63,72)\\\" clip-path=\\\"url(#298-clip)\\\">\\n\\n        <polygon fill=\\\"#5fb479\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\"\\n                 points=\\\"0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796\\\"\\n                 data-bind=\\\"attr: { fill: $data.colorId === 'y' ? '#ffe300' : $data.colorId === 'g' ? '#5fb479' : $data.colorId === 'b' ? '#c18157' : '#d2d2d4'}  \\\"></polygon>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 C 17.22,-29.83 34.45,0 62,0\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 11.82,20.47 31,53.69\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 L -31,53.69\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 -23.64,0 -62,0\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 C 17.22,-29.83 34.45,0 62,0\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 11.82,20.47 31,53.69\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 L -31,53.69\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 -23.64,0 -62,0\\\"></path>\\n\\n\\n        <!-- ko if: $data.getRoutedConnection([0,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 C 17.22,-29.83 34.45,0 62,0\\\"\\n              data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,7]), 'stroke-width': $data.getOuterStrokeWidth([0,7]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 C 17.22,-29.83 34.45,0 62,0\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([0,8]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 11.82,20.47 31,53.69\\\"\\n              data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,8]), 'stroke-width': $data.getOuterStrokeWidth([0,8]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 11.82,20.47 31,53.69\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([0,9]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 L -31,53.69\\\"\\n              data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,9]), 'stroke-width': $data.getOuterStrokeWidth([0,9]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 L -31,53.69\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([0,10]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 -23.64,0 -62,0\\\"\\n              data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,10]), 'stroke-width': $data.getOuterStrokeWidth([0,10]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 31,-53.69 C 11.82,-20.47 -23.64,0 -62,0\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasMeat() -->\\n        <g transform=\\\"translate(-39, -50)\\\">\\n        <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"26px\\\" width=\\\"26px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/meat.png' }, css: 'pos-boat' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors(7) -->\\n        <circle cx=\\\"40\\\" cy=\\\"-6\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(7), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(7) }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- ko foreach: $data.getRoutedCityColors(8) -->\\n        <circle cx=\\\"40\\\" cy=\\\"-3\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\" transform=\\\"rotate(60 0 0)\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(8), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(8) }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors(9) -->\\n        <circle cx=\\\"40\\\" cy=\\\"0\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\" transform=\\\"rotate(120 0 0)\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(9), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(9) }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- ko foreach: $data.getRoutedCityColors(10) -->\\n        <circle cx=\\\"40\\\" cy=\\\"3\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\" transform=\\\"rotate(180 0 0)\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(10), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(10) }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <circle cx=\\\"40\\\" cy=\\\"-6\\\" r=\\\"21\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <circle cx=\\\"40\\\" cy=\\\"-3\\\" r=\\\"21\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\" transform=\\\"rotate(60 0 0)\\\"></circle>\\n        <circle cx=\\\"40\\\" cy=\\\"0\\\" r=\\\"21\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\" transform=\\\"rotate(120 0 0)\\\"></circle>\\n        <circle cx=\\\"40\\\" cy=\\\"3\\\" r=\\\"21\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\" transform=\\\"rotate(180 0 0)\\\"></circle>\\n\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n            <image xlink:href=\\\"\\\" x=\\\"-5\\\" y=\\\"-58\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(8).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"20\\\" y=\\\"-23\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(8)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if:  $data.getReservedTokensForCity(9).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"15\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(9)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(9).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"15\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(9)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(10).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-42\\\" y=\\\"13\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(10)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n\\n        <g transform=\\\"translate(0, -51)\\\">\\n            <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"13\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <text x=\\\"0\\\" y=\\\"2\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.4\\\"\\n                  font-size=\\\"16\\\" alignment-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\"\\n                  data-bind=\\\"text:$data.revenue, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\">\\n            </text>\\n        </g>\\n\\n        <!-- ko if: !$data.hasMeat() -->\\n        <text x=\\\"-33\\\" y=\\\"-26\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n              font-size=\\\"20\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\">CHI\\n        </text>\\n        <!-- /ko -->\\n        <polygon fill=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\"\\n                 points=\\\"0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796\\\"></polygon>\\n\\n    </g>\\n</svg>\";";

/***/ }),
/* 127 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:304px;height:110px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(152,55)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(113,40)\\\">\\n            <polygon transform=\\\"rotate(330)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(330)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasSteamboat() -->\\n        <image xlink:href=\\\"\\\" x=\\\"35\\\" y=\\\"-45\\\" height=\\\"45px\\\" width=\\\"45px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/boat.png' }\\\"></image>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <circle cx=\\\"25\\\" cy=\\\"20\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <circle cx=\\\"25\\\" cy=\\\"20\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"5\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"5\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data.colorId !== 'i' -->\\n<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n        <polygon fill=\\\"#ffe300\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n                 points=\\\"0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796\\\"\\n                 data-bind=\\\"attr: { fill: $data.colorId === 'y' ? '#ffe300' : $data.colorId === 'g' ? '#5fb479' : $data.colorId === 'b' ? '#c18157' : '#d2d2d4'}  \\\"></polygon>\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data),  stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-50\\\" y=\\\"-26\\\" width=\\\"100\\\" height=\\\"52\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"white\\\"></rect>\\n        </g>\\n        <!-- /ko -->\\n\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedConnections() -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data), stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-50\\\" y=\\\"-26\\\" width=\\\"100\\\" height=\\\"52\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                  data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></rect>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-23\\\" y=\\\"-23\\\" width=\\\"46\\\" height=\\\"46\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></rect>\\n            <circle cx=\\\"-23\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <circle cx=\\\"23\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        </g>\\n\\n        <!-- ko if: $data.getReservedTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(-40, -31)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- ko if: $data.getReservedTokensForCity(7).length > 1 -->\\n        <g transform=\\\"translate(0, -8)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[1] + '-r.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(0, -8)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getReservedTokensForCity(7).length === 0 -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(-40, -31)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(7).length > 1 -->\\n        <g transform=\\\"translate(0, -8)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[1] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n\\n        <!-- ko if: $data.getRevenue() -->\\n        <g transform=\\\"translate(0, -48)\\\">\\n            <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"13\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <text x=\\\"0\\\" y=\\\"2\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.4\\\"\\n                  font-size=\\\"16\\\" alignment-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\"\\n                  data-bind=\\\"css: 'pos-value' + ($data.position ? $data.position() : 0), text: $data.getRevenue()\\\">\\n            </text>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if:  $data.hasSteamboat() -->\\n        <g transform=\\\"translate(27, -38)\\\">\\n        <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"26px\\\" width=\\\"26px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/boat.png' }, css: 'pos-boat' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n\\n        <text x=\\\"0\\\" y=\\\"58\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.2\\\"\\n              font-size=\\\"12\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\" data-bind=\\\"text: $data.id\\\">\\n        </text>\\n    </g>\\n</svg>\\n<!-- /ko -->\\n\";";

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data.colorId !== 'i' -->\\n<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n        <polygon fill=\\\"#ffe300\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n                 points=\\\"0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796\\\"\\n                 data-bind=\\\"attr: { fill: $data.colorId === 'y' ? '#ffe300' : $data.colorId === 'g' ? '#5fb479' : $data.colorId === 'b' ? '#c18157' : '#d2d2d4'}  \\\"></polygon>\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data) }\\\"></path>\\n        <!-- /ko -->\\n\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedConnections() -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data), stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n        \\n        <text x=\\\"0\\\" y=\\\"58\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.2\\\"\\n              font-size=\\\"12\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\" data-bind=\\\"text: $data.id\\\">\\n        </text>\\n    </g>\\n</svg>\\n<!-- /ko -->\\n\";";

/***/ }),
/* 131 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:250px;height:122px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(125,61)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-85,-47)\\\">\\n            <polygon transform=\\\"rotate(150)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(150)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n\\n    </g>\\n</svg>\";";

/***/ }),
/* 132 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <circle cx=\\\"-2\\\" cy=\\\"-40\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <circle cx=\\\"-2\\\" cy=\\\"-40\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-22\\\" y=\\\"-60\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-22\\\" y=\\\"-60\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.hasSteamboat() -->\\n        <image xlink:href=\\\"\\\" x=\\\"-50\\\" y=\\\"8\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/boat.png' }\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(63,7)\\\">\\n            <polygon transform=\\\"rotate(270)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(270)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n    </g>\\n</svg>\";";

/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data),  stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedConnections() -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data), stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n    </g>\\n</svg>\";";

/***/ }),
/* 135 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 33 -54 L 12 -18\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 62 0 C 40,0 13,-12 13 -12\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -30 -54 C -26,-45 0,-15 0 -15\\\"></path>\\n\\n        <circle cx=\\\"3\\\" cy=\\\"-26\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n\\n        <!-- ko if: $data.hasRoutedConnection([0,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 33 -54 L 12 -18\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,7]), 'stroke-width': $data.getOuterStrokeWidth([0,7]) }\\\"></path>\\n        <!-- /ko -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 33 -54 L 12 -18\\\"></path>\\n\\n        <!-- ko if: $data.hasRoutedConnection([1,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 62 0 C 40,0 13,-12 13 -12\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([1,7]), 'stroke-width': $data.getOuterStrokeWidth([1,7]) }\\\"></path>\\n        <!-- /ko -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 62 0 C 40,0 13,-12 13 -12\\\"></path>\\n\\n        <!-- ko if: $data.hasRoutedConnection([5,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -30 -54 C -26,-45 0,-15 0 -15\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([5,7]), 'stroke-width': $data.getOuterStrokeWidth([5,7]) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M -30 -54 C -26,-45 0,-15 0 -15\\\"></path>\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"3\\\" cy=\\\"-26\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n        data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <circle cx=\\\"3\\\" cy=\\\"-26\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-17\\\" y=\\\"-46\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-17\\\" y=\\\"-46\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <circle cx=\\\"-7\\\" cy=\\\"4\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <circle cx=\\\"-7\\\" cy=\\\"4\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-27\\\" y=\\\"-17\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-24,-56)\\\">\\n            <polygon transform=\\\"rotate(150)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(150)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,1]) -->\\n        <g transform=\\\"translate(38,-48)\\\">\\n            <polygon transform=\\\"rotate(210)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,1]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(210)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\";";

/***/ }),
/* 138 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.hasRoutedConnection([0,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 15,-35 C 20,-40 23,-40  31,-53.69\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([0,7]), 'stroke-width': $data.getOuterStrokeWidth([0,7]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 15,-35 C 20,-40 23,-40  31,-53.69\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasRoutedConnection([1,8]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 50,0 L 62,0\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([1,8]), 'stroke-width': $data.getOuterStrokeWidth([1,8]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 50,0 L 62,0\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasRoutedConnection([2,9]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 25,43 L 31,53.69\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([2,9]), 'stroke-width': $data.getOuterStrokeWidth([2,9]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 25,43 L 31,53.69\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasRoutedConnection([3,10]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -33 30 C -21,40 -21, 40 -31 53.69\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([3,10]), 'stroke-width': $data.getOuterStrokeWidth([3,10]) }\\\"></path>\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M -33 30 C -21,40 -21, 40 -31 53.69\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors(7) -->\\n        <circle cx=\\\"-1\\\" cy=\\\"-43\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(7), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(7) }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors(8) -->\\n        <circle cx=\\\"35\\\" cy=\\\"-10\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(8), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(8) }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors(9) -->\\n        <circle cx=\\\"8\\\" cy=\\\"35\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(9), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(9) }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors(10) -->\\n        <circle cx=\\\"-38\\\" cy=\\\"21\\\" r=\\\"24\\\" fill=\\\"white\\\" stroke=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(10), 'stroke-dashoffset': $index()*$parent.getCityDashOffset(10) }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-21\\\" y=\\\"-63\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getTokensForCity(8).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"15\\\" y=\\\"-29\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(8)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if:  $data.getReservedTokensForCity(9).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-11\\\" y=\\\"16\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(9)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(9).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-11\\\" y=\\\"16\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(9)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getTokensForCity(10).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-58\\\" y=\\\"2\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(10)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasMeat() -->\\n        <image xlink:href=\\\"\\\" x=\\\"-22\\\" y=\\\"-20\\\" height=\\\"35px\\\" width=\\\"35px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/meat.png' }\\\"></image>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data),  stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <!-- /ko -->\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 140 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data),  stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(0 0 0)\\\">\\n            <rect x=\\\"-50\\\" y=\\\"-26\\\" width=\\\"100\\\" height=\\\"52\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                  data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></rect>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(0 0 0)\\\">\\n            <rect x=\\\"-23\\\" y=\\\"-23\\\" width=\\\"46\\\" height=\\\"46\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></rect>\\n            <circle cx=\\\"-23\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <circle cx=\\\"23\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n\\n            <!-- ko if: $data.getReservedTokensForCity(7).length > 0 -->\\n            <image xlink:href=\\\"\\\" x=\\\"-43\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n            <!-- ko if: $data.getReservedTokensForCity(7).length > 1 -->\\n            <image xlink:href=\\\"\\\" x=\\\"3\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[1] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n            <!-- /ko -->\\n            <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n            <image xlink:href=\\\"\\\" x=\\\"3\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n            <!-- /ko -->\\n            <!-- /ko -->\\n            <!-- ko if: $data.getReservedTokensForCity(7).length === 0 -->\\n            <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n            <image xlink:href=\\\"\\\" x=\\\"-43\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n            <!-- /ko -->\\n            <!-- ko if: $data.getTokensForCity(7).length > 1 -->\\n            <image xlink:href=\\\"\\\" x=\\\"3\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[1] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n            <!-- /ko -->\\n            <!-- /ko -->\\n        </g>\\n\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:188px;height:178px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(94,89)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-31,-62)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,1]) -->\\n        <g transform=\\\"translate(-54,-5)\\\">\\n            <polygon transform=\\\"rotate(150)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,1]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(150)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,2]) -->\\n        <g transform=\\\"translate(-94,45)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,2]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\";";

/***/ }),
/* 142 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <circle cx=\\\"6\\\" cy=\\\"-4\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <circle cx=\\\"6\\\" cy=\\\"-4\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-14\\\" y=\\\"-24\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-14\\\" y=\\\"-24\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 62 0 C 40,0 13,-12 13 -12\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -62 0 C -40,0 -13,-12 -13 -12\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -30 -54 C -26,-45 0,-18 0 -18\\\"></path>\\n\\n        <circle cx=\\\"0\\\" cy=\\\"-11\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n\\n        <!-- ko if: $data.hasRoutedConnection([1,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 62 0 C 40,0 13,-12 13 -12\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([1,7]), 'stroke-width': $data.getOuterStrokeWidth([1,7]) }\\\"></path>\\n        <!-- /ko -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 62 0 C 40,0 13,-12 13 -12\\\"></path>\\n\\n        <!-- ko if: $data.hasRoutedConnection([4,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -62 0 C -40,0 -13,-12 -13 -12\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([4,7]), 'stroke-width': $data.getOuterStrokeWidth([4,7]) }\\\"></path>\\n        <!-- /ko -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M -62 0 C -40,0 -13,-12 -13 -12\\\"></path>\\n\\n        <!-- ko if: $data.hasRoutedConnection([5,7]) -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M -30 -54 C -26,-45 0,-18 0 -18\\\" data-bind=\\\"attr: { stroke: $data.getOuterStrokeColor([5,7]), 'stroke-width': $data.getOuterStrokeWidth([5,7]) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M -30 -54 C -26,-45 0,-18 0 -18\\\"></path>\\n\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"-11\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n        data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <circle cx=\\\"0\\\" cy=\\\"-11\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-31\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-31\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:128px;height:128px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(64,64)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-63,19)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\" data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n    </g>\\n</svg>\";";

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:254px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,127)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-24,-103)\\\">\\n            <polygon transform=\\\"rotate(210)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\"\\n                     data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(210)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,1]) -->\\n        <g transform=\\\"translate(1,-45)\\\">\\n            <polygon transform=\\\"rotate(270)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\"\\n                     data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,1]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(270)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasSteamboat() -->\\n        <image xlink:href=\\\"\\\" x=\\\"10\\\" y=\\\"10\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/boat.png' }\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if: $data.hasMeat() -->\\n        <image xlink:href=\\\"\\\" x=\\\"10\\\" y=\\\"55\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/meat.png' }\\\"></image>\\n        <!-- /ko -->\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 32 54 C 25,45 16,12 16 12\\\"\\n              data-bind=\\\"attr: { stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"16\\\" cy=\\\"12\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- /ko -->\\n\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 32 54 C 25,45 16,12 16 12\\\"></path>\\n\\n        <!-- ko foreach: $data.getRoutedConnections() -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"M 32 54 C 25,45 16,12 16 12\\\"\\n              data-bind=\\\"attr: { stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"M 32 54 C 25,45 16,12 16 12\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <circle cx=\\\"16\\\" cy=\\\"12\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"16\\\" cy=\\\"12\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-4\\\" y=\\\"-8\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-4\\\" y=\\\"-8\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.hasSteamboat() -->\\n        <g transform=\\\"translate(-55, 7)\\\">\\n        <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"26px\\\" width=\\\"26px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/boat.png' }, css: 'pos-boat' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n\\n    </g>\\n</svg>\\n\";";

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<svg style=\\\"width:188px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(94,72)\\\" pointer-events=\\\"none\\\">\\n\\n        <!-- ko if: $data.getRoutedConnection([-1,0]) -->\\n        <g transform=\\\"translate(-93,-8)\\\">\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"\\\" points=\\\"-8,0 8,-60 24,0\\\"\\n                     data-bind=\\\"attr: { fill: $data.getOuterStrokeColor([-1,0]) }\\\"></polygon>\\n            <polygon transform=\\\"rotate(90)\\\" fill=\\\"black\\\" points=\\\"0,0 8,-31 16,0\\\"></polygon>\\n        </g>\\n        <!-- /ko -->\\n    </g>\\n</svg>\";";

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data.colorId !== 'i' -->\\n<svg style=\\\"width:126px;height:144px;\\\">\\n    <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"translate(63,72)\\\" pointer-events=\\\"none\\\">\\n        <polygon fill=\\\"#ffe300\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n                 points=\\\"0,-71.59 62,-35.796 62,35.796 0,71.59 -62,35.796 -62,-35.796\\\"\\n                 data-bind=\\\"attr: { fill: $data.colorId === 'y' ? '#ffe300' : $data.colorId === 'g' ? '#5fb479' : $data.colorId === 'b' ? '#c18157' : '#d2d2d4'}  \\\"></polygon>\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data),  stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"white\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-50\\\" y=\\\"-26\\\" width=\\\"100\\\" height=\\\"52\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"white\\\"></rect>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 3 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <circle cx=\\\"-23\\\" cy=\\\"-13\\\" r=\\\"25\\\" fill=\\\"white\\\"></circle>\\n            <circle cx=\\\"23\\\" cy=\\\"-13\\\" r=\\\"25\\\" fill=\\\"white\\\"></circle>\\n            <circle cx=\\\"0\\\" cy=\\\"27\\\" r=\\\"25\\\" fill=\\\"white\\\"></circle>\\n            <rect x=\\\"-26\\\" y=\\\"-38\\\" width=\\\"52\\\" height=\\\"52\\\" fill=\\\"white\\\"></rect>\\n            <rect x=\\\"-26\\\" y=\\\"-38\\\" width=\\\"52\\\" height=\\\"52\\\" fill=\\\"white\\\" transform=\\\"rotate(120 0 0)\\\"></rect>\\n            <rect x=\\\"-26\\\" y=\\\"-38\\\" width=\\\"52\\\" height=\\\"52\\\" fill=\\\"white\\\" transform=\\\"rotate(240 0 0)\\\"></rect>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko foreach: $data.connections -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n\\n        <!-- ko foreach: $data.getRoutedConnections() -->\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"13\\\"\\n              d=\\\"\\\"\\n              data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data), stroke: $parent.getOuterStrokeColor($data), 'stroke-width': $parent.getOuterStrokeWidth($data) }\\\"></path>\\n        <path fill=\\\"none\\\" pointer-events=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"9\\\"\\n              d=\\\"\\\" data-bind=\\\"attr: { d: $parent.getDrawingInstructions($data,true) }\\\"></path>\\n        <!-- /ko -->\\n\\n\\n        <!-- ko foreach: $data.getRoutedCityColors() -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></circle>\\n        <!-- /ko -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-50\\\" y=\\\"-26\\\" width=\\\"100\\\" height=\\\"52\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                  data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></rect>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $parent.cities[7].maxTokens === 3 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <path d=\\\"M -26 -40 L 26 -40 A 26 26 0 0 1 46 0 L 23 41 A 26 26 0 0 1 -23 41 L -46 0 A 26 26 0 0 1 -26 -40\\\"\\n                  fill=\\\"none\\\" stroke-width=\\\"8\\\"\\n                  data-bind=\\\"attr: { stroke: $data, 'stroke-dasharray':$parent.getCityDashArray(), 'stroke-dashoffset': $index()*$parent.getCityDashOffset() }\\\"></path>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        <!-- ko if:  $data.getReservedTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- ko if:  $data.getTokensForCity(7).length > 0 -->\\n        <image xlink:href=\\\"\\\" x=\\\"-20\\\" y=\\\"-20\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n               data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-value' + ($data.position ? $data.position() : 0)\\\"></image>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 2 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-23\\\" y=\\\"-23\\\" width=\\\"46\\\" height=\\\"46\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></rect>\\n            <circle cx=\\\"-23\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <circle cx=\\\"23\\\" cy=\\\"0\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        </g>\\n\\n        <!-- ko if: $data.getReservedTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(-40, -31)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- ko if: $data.getReservedTokensForCity(7).length > 1 -->\\n        <g transform=\\\"translate(40, -31)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[1] + '-r.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(0, -8)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getReservedTokensForCity(7).length === 0 -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(-40, -31)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(7).length > 1 -->\\n        <g transform=\\\"translate(0, -8)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[1] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 3 -->\\n        <g fill-opacity=\\\"1\\\" visibility=\\\"inherit\\\" transform=\\\"rotate(30 0 0)\\\">\\n            <rect x=\\\"-23\\\" y=\\\"-36\\\" width=\\\"46\\\" height=\\\"46\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></rect>\\n            <rect x=\\\"-23\\\" y=\\\"-36\\\" width=\\\"46\\\" height=\\\"46\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n                  transform=\\\"rotate(120 0 0)\\\"></rect>\\n            <rect x=\\\"-23\\\" y=\\\"-36\\\" width=\\\"46\\\" height=\\\"46\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n                  transform=\\\"rotate(240 0 0)\\\"></rect>\\n            <circle cx=\\\"-23\\\" cy=\\\"-13\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <circle cx=\\\"23\\\" cy=\\\"-13\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <circle cx=\\\"0\\\" cy=\\\"27\\\" r=\\\"23\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n        </g>\\n\\n        <!-- ko if: $data.getReservedTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(-34, -43)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getReservedTokensForCity(7)[0] + '-r.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(6, -20)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 1 -->\\n        <g transform=\\\"translate(-34, 3)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getReservedTokensForCity(7).length === 0 -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 0 -->\\n        <g transform=\\\"translate(-34, -43)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[0] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.getTokensForCity(7).length > 1 -->\\n        <g transform=\\\"translate(6, -20)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[1] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $data.getTokensForCity(7).length > 2 -->\\n        <g transform=\\\"translate(-34, 3)\\\">\\n            <image xlink:href=\\\"\\\" x=\\\"0\\\" y=\\\"0\\\" height=\\\"40px\\\" width=\\\"40px\\\"\\n                   data-bind=\\\"attr: {'xlink:href': $root.rootPath + 'images/tokens/' + $data.getTokensForCity(7)[2] + '.png' }, css: 'pos-token' + ($data.position ? $data.position() : 0)\\\"></image>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- /ko -->\\n\\n\\n        <!-- ko if: $data.getRevenue() -->\\n        <!-- ko if: $data.cities[7].maxTokens < 3 -->\\n        <g transform=\\\"translate(0, -46)\\\">\\n            <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"13\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <text x=\\\"0\\\" y=\\\"2\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.4\\\"\\n                  font-size=\\\"16\\\" alignment-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\"\\n                  data-bind=\\\"css: 'pos-value' + ($data.position ? $data.position() : 0), text: $data.getRevenue()\\\">\\n            </text>\\n        </g>\\n        <!-- /ko -->\\n        <!-- ko if: $data.cities[7].maxTokens === 3 -->\\n        <g transform=\\\"translate(-50, 28)\\\">\\n            <circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"10\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"></circle>\\n            <text x=\\\"0\\\" y=\\\"2\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.4\\\"\\n                  font-size=\\\"14\\\" alignment-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\"\\n                  data-bind=\\\"css: 'pos-value' + ($data.position ? $data.position() : 0), text: $data.getRevenue()\\\">60\\n            </text>\\n        </g>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 1 -->\\n        <text x=\\\"-39\\\" y=\\\"-16\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n              font-size=\\\"24\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\">Z\\n        </text>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 2 -->\\n        <text x=\\\"-44\\\" y=\\\"34\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n              font-size=\\\"24\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\">Z\\n        </text>\\n        <!-- /ko -->\\n\\n        <!-- ko if: $data.cities[7].maxTokens === 3 -->\\n        <text x=\\\"-50\\\" y=\\\"-18\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"\\n              font-size=\\\"24\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\">Z\\n        </text>\\n        <!-- /ko -->\\n\\n        <text x=\\\"0\\\" y=\\\"61\\\" fill=\\\"black\\\" stroke=\\\"black\\\" stroke-width=\\\"0.2\\\"\\n              font-size=\\\"12\\\" text-anchor=\\\"middle\\\" visibility=\\\"inherit\\\" data-bind=\\\"text: $data.id\\\">\\n        </text>\\n    </g>\\n</svg>\\n<!-- /ko -->\\n\";";

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"d-inline-flex text-center text-secondary\\\">\\n    <div class=\\\"card border-0 bg-transparent\\\" style=\\\"width:205px;margin-right:12px;height:212px;\\\">\\n        <div class=\\\"m-auto\\\">\\n            <h1 class=\\\"display-1 mb-0\\\" data-bind=\\\"text:bank.trainsByPhase()['I']\\\"></h1>\\n            <div style=\\\"margin-top:-10px;\\\">remaining</div>\\n        </div>\\n    </div>\\n    <div class=\\\"card border-0 bg-transparent\\\" style=\\\"width:205px;margin-right:12px;height:212px;\\\">\\n        <div class=\\\"m-auto\\\">\\n            <h1 class=\\\"display-1\\\" data-bind=\\\"text:bank.trainsByPhase()['II']\\\"></h1>\\n            <div style=\\\"margin-top:-10px;\\\">remaining</div>\\n        </div>\\n    </div>\\n    <div class=\\\"card border-0 bg-transparent\\\" style=\\\"width:205px;margin-right:12px;height:212px;\\\">\\n        <div class=\\\"m-auto\\\">\\n            <h1 class=\\\"display-1\\\" data-bind=\\\"text:bank.trainsByPhase()['III']\\\"></h1>\\n            <div style=\\\"margin-top:-10px;\\\">remaining</div>\\n        </div>\\n    </div>\\n    <div class=\\\"card border-0 bg-transparent\\\" style=\\\"width:205px;margin-right:12px;height:212px;\\\">\\n        <div class=\\\"m-auto\\\">\\n            <h1 class=\\\"display-1\\\">&#x221E;</h1>\\n            <div style=\\\"margin-top:-10px;\\\">remaining</div>\\n        </div>\\n    </div>\\n</div>\";";

/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"p-3\\\">\\n    <ul class=\\\"nav mb-3\\\">\\n        <!-- ko foreach: _.reverse($data.roundHistory.getAllRounds()) -->\\n        <li class=\\\"nav-item\\\" style=\\\"border-radius:.5rem;\\\"\\n            data-bind=\\\"css: { 'ml-2' : $index() !== 0, 'bg-light': $root.game().history().selectedRound() !== $data.id, 'bg-warning': $root.game().history().selectedRound() === $data.id }\\\">\\n            <a class=\\\"nav-link text-dark\\\" href=\\\"#\\\"\\n               data-bind=\\\"click:function() { $root.game().history().selectRound($data.id); },text:$data.getRoundName()\\\"></a>\\n        </li>\\n        <!-- /ko -->\\n    </ul>\\n</div>\\n<!-- ko if: $root.game().history().selectedRound() -->\\n<div class=\\\"px-3\\\">\\n    <ul class=\\\"mb-3 list-unstyled d-inline-block\\\" style=\\\"min-width:50%;\\\">\\n        <!-- ko foreach: $root.game().history().getTurnsForRound($root.game().history().selectedRound()) -->\\n        <!-- ko if: $data.getActions().length > 0 -->\\n        <div class=\\\"mb-3\\\" style=\\\"border:1px solid #CCC;border-radius:.7rem;overflow:hidden;\\\">\\n            <ul class=\\\"list-unstyled \\\">\\n                <li scope=\\\"col\\\" class=\\\"text-white font-weight-normal bg-history-header px-3 py-1\\\" style=\\\"font-size:1.2rem\\\"\\n                    data-bind=\\\"text: $root.game().state().playersById()[$data.playerId].name()\\\">\\n                </li>\\n                <!-- ko foreach: $data.getActions() -->\\n                <li class=\\\"p-2 px-3\\\" style=\\\"border-top:1px solid #CCC;\\\"\\n                    data-bind=\\\"css: $index() % 2 ? 'bg-light' : '', text:$data.summary($root.game().state())\\\"></li>\\n                <!-- ko foreach: $data.details($root.game().state()) -->\\n                <li class=\\\"p-1 pr-3\\\" style=\\\" padding-left: 50px !important;\\\"\\n                    data-bind=\\\"style: { 'border-top': $index() === 0 ? '1px solid #CCC' : '' }, css: 'bg-history-payout', text:$data\\\"></li>\\n                <!-- /ko -->\\n                <!-- /ko -->\\n            </ul>\\n        </div>\\n        <!-- /ko -->\\n        <!-- /ko -->\\n    </ul>\\n</div>\\n<!-- /ko -->\";";

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<!-- ko if: $data.turnHistory.currentTurn() && $data.turnHistory.currentTurn().getCurrentSummaries().length > 0 -->\\n<div class=\\\"alert alert-primary rounded-0 pt-1 pb-1 border-top-0 border-right-0 border-left-0 m-0\\\" role=\\\"alert\\\">\\n    <div class=\\\"d-flex align-items-center\\\">\\n        <div class=\\\"ml-2 mr-3\\\">\\n            <h4 class=\\\"alert-heading font-weight-light mb-0\\\">Turn Summary</h4>\\n        </div>\\n        <ul class=\\\"list-unstyled font-weight-light ml-0 mb-0 d-flex mr-3 flex-wrap\\\" style=\\\"margin-top:-4px;\\\">\\n            <!-- ko foreach: $data.turnHistory.currentTurn().getCurrentSummaries() -->\\n            <li class=\\\"alert alert-light pl-2 pr-2 pt-1 pb-1 m-0 mr-1 mt-1\\\">\\n                <strong data-bind=\\\"text:$data.summary\\\"></strong>\\n            </li>\\n            <!-- /ko -->\\n        </ul>\\n        <div class=\\\"ml-auto d-flex flex-nowrap\\\">\\n            <!-- ko if: $data.actionHistory.canUndo() -->\\n            <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger mr-1\\\" data-bind=\\\"click: function() { $root.game().sequence.undoLastAction(); }\\\">Undo</button>\\n            <!-- /ko -->\\n            <!-- ko if: !$data.isOperatingRound() || ($root.game().operatingRound().canEndTurn() && !$root.game().operatingRound().interruptionNeeded()) -->\\n            <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" data-bind=\\\"click: function() { $root.game().sequence.finishTurn(); }\\\">End Turn</button>\\n            <!-- /ko -->\\n        </div>\\n    </div>\\n</div>\\n<!-- /ko -->\";";

/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = "module.exports = \"<div class=\\\"alert alert-warning rounded-0 border-top-0 border-right-0 border-left-0 m-0 p-3 d-flex flex-column justify-content-center\\\"\\n     role=\\\"alert\\\">\\n    <div class=\\\"d-flex justify-content-center\\\">\\n        <div class=\\\"ml-2 mr-3\\\">\\n            <h1 class=\\\"alert-heading font-weight-light mb-0\\\" data-bind=\\\"text: $data.playersById()[$data.winner()] + ' wins!'\\\"></h1>\\n        </div>\\n    </div>\\n</div>\";";

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// knockout-delegatedEvents 0.6.1 | (c) 2015 Ryan Niemeyer |  http://www.opensource.org/licenses/mit-license
!function(a){ true?a(__webpack_require__(1),exports):"function"==typeof define&&define.amd?define(["knockout","exports"],a):a(ko,ko.actions={})}(function(a,b){function c(b,c,d,e){for(var f="data-"+e+"-parent";c&&1===c.nodeType&&!c.disabled&&!c.hasAttribute(f);)c=c!==d?c.parentNode:null;if(c){var g=c.getAttribute(f),h="true"===g?b:b[g];return h&&"function"==typeof h?{method:h,element:c,owner:a.dataFor(d)}:void 0}}function d(b,c,d){for(var e,f,g,h,k="data-"+d,l=i+d,m=j+d,n="data-"+d+"-parent";!e&&b&&b!==c;)1!==b.nodeType||b.disabled||(g?(e=a.utils.domData.get(b,m),e&&(e="true"===g?e:e[g],f=a.dataFor(b))):(e=b.getAttribute(k)||a.utils.domData.get(b,l),e||(g=b.getAttribute(n),g&&(h=b)))),e||(b=b.parentNode);return e?{method:e,element:h||b,owner:f}:void 0}function e(c,d,e,f){return function(g){var h=f(g.target||g.srcElement,d,c);if(h){var i,j,k,l,m,n,o=h.element,p=h.method,q=h.owner;if(p){if(j=a.contextFor(o)){for(;o&&o!==d;){if(o.disabled)return;o=o.parentNode}i=j.$data,"string"==typeof p?(p in b?(m=b[p],m&&(k="function"==typeof m?m:m.action,q=m.owner||i)):i&&i[p]&&"function"==typeof i[p]&&(k=i[p],q=i),k||(l=a.utils.arrayFirst(j.$parents,function(a){return a[p]&&"function"==typeof a[p]}),k=l&&l[p],q=l)):"function"==typeof p&&(k=p,q=q||i)}k&&(n="submit"===c?k.call(i,g.target):k.call(q,i,g),n!==!0&&(g.preventDefault?g.preventDefault():g.returnValue=!1),e!==!0&&(g.cancelBubble=!0,"function"==typeof g.stopPropagation&&g.stopPropagation()))}}}}function f(a,b){return a+b.substr(0,1).toUpperCase()+b.slice(1)}function g(b,c){a.bindingHandlers[b]||(a.bindingHandlers[b]={init:function(b,d){var e=d();a.utils.domData.set(b,c,e)}})}function h(a){g(f("delegated",a),i+a),g(f("delegatedParent",a),j+a)}var i="ko_delegated_",j="ko_delegated_parent_";a.bindingHandlers.delegatedHandler={init:function(b,c,g){var i=a.utils.unwrapObservable(c())||[];"string"==typeof i&&(i=[i]),a.utils.arrayForEach(i,function(c){var i=g.get(f("delegated",c+"Bubble"))===!0;h(c),a.utils.registerEventHandler(b,c,e(c,b,i,d))})}},a.bindingHandlers.delegatedParentHandler={init:function(b,d,g){var h=a.utils.unwrapObservable(d());a.utils.objectForEach(h,function(d){var i=g.get(f("delegated",d+"Bubble"))===!0;a.utils.registerEventHandler(b,d,e(d,b,i,c.bind(null,h[d])))})}}});

/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.13.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var css = getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  // NOTE: 1 DOM access here
  var offsetParent = element && element.offsetParent;
  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    if (element) {
      return element.ownerDocument.documentElement;
    }

    return document.documentElement;
  }

  // .offsetParent will return the closest TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

/**
 * Tells if you are running Internet Explorer 10
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean} isIE10
 */
var isIE10 = undefined;

var isIE10$1 = function () {
  if (isIE10 === undefined) {
    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;
  }
  return isIE10;
};

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
}

function getWindowSizes() {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE10$1() && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  if (isIE10$1()) {
    try {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } catch (err) {}
  } else {
    rect = element.getBoundingClientRect();
  }

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var isIE10 = isIE10$1();
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = getScroll(html);
  var scrollLeft = getScroll(html, 'left');

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  return isFixed(getParentNode(element));
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  // NOTE: 1 DOM access here
  var boundaries = { top: 0, left: 0 };
  var offsetParent = findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  boundaries.left += padding;
  boundaries.top += padding;
  boundaries.right -= padding;
  boundaries.bottom -= padding;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var commonOffsetParent = findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var styles = getComputedStyle(element);
  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length - 1; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroy the popper
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.left = '';
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger onUpdate callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper.
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  // floor sides to avoid blurry text
  var offsets = {
    left: Math.floor(popper.left),
    top: Math.floor(popper.top),
    bottom: Math.floor(popper.bottom),
    right: Math.floor(popper.right)
  };

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    top = -offsetParentRect.height + offsets.bottom;
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    left = -offsetParentRect.width + offsets.right;
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjuction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-right` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);
  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unitless, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the height.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * An scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper this makes sure the popper has always a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier, can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near eachothers
   * without leaving any gap between the two. Expecially useful when the arrow is
   * enabled and you want to assure it to point to its reference element.
   * It cares only about the first axis, you can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjuction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations).
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position,
     * the popper will never be placed outside of the defined boundaries
     * (except if keepTogether is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define you own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the informations used by Popper.js
 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overriden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass as 3rd argument an object with the same
 * structure of this object, example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Whether events (resize, scroll) are initially enabled
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated, this callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Create a new Popper.js instance
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper.
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedule an update, it will run on the next UI update available
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(20)))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(93);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(156)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../css-loader/index.js!./bootstrap.min.css", function() {
			var newContent = require("!!../../../css-loader/index.js!./bootstrap.min.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			memo[selector] = fn.call(this, selector);
		}

		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(157);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 157 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 158 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
var rng;

var crypto = global.crypto || global.msCrypto; // for IE 11
if (crypto && crypto.getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(159);
var bytesToUuid = __webpack_require__(158);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 161 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./index.html": 96,
	"./open-iconic/sprite/open-iconic.html": 97,
	"./open-iconic/sprite/sprite.html": 98,
	"./views/bugReport.html": 99,
	"./views/cell.html": 100,
	"./views/cellPopover.html": 101,
	"./views/companies.html": 102,
	"./views/dashboard/dashboard.html": 103,
	"./views/dashboard/games.html": 104,
	"./views/dashboard/newGame.html": 105,
	"./views/draft.html": 106,
	"./views/game/game.html": 107,
	"./views/grid.html": 108,
	"./views/limits.html": 109,
	"./views/market.html": 110,
	"./views/operatingCompany.html": 111,
	"./views/operatingRound.html": 112,
	"./views/ownership.html": 113,
	"./views/playerPopover.html": 114,
	"./views/players.html": 115,
	"./views/priceTrack.html": 116,
	"./views/privateDraft.html": 117,
	"./views/rounds.html": 118,
	"./views/stockRound.html": 119,
	"./views/tileManifest.html": 120,
	"./views/tileUpgradePopover.html": 121,
	"./views/tiles/binghamton.html": 122,
	"./views/tiles/buffalo.html": 123,
	"./views/tiles/cairo.html": 124,
	"./views/tiles/charleston.html": 125,
	"./views/tiles/chicago.html": 126,
	"./views/tiles/chicagoConnections.html": 127,
	"./views/tiles/cincinnati.html": 128,
	"./views/tiles/city.html": 129,
	"./views/tiles/common.html": 130,
	"./views/tiles/cumberland.html": 131,
	"./views/tiles/fortWayne.html": 132,
	"./views/tiles/holland.html": 133,
	"./views/tiles/homewood.html": 134,
	"./views/tiles/huntington.html": 135,
	"./views/tiles/indianapolis.html": 136,
	"./views/tiles/louisville.html": 137,
	"./views/tiles/mapChicago.html": 138,
	"./views/tiles/mapCommon.html": 139,
	"./views/tiles/mapDoubleCity.html": 140,
	"./views/tiles/pittsburgh.html": 141,
	"./views/tiles/portHuron.html": 142,
	"./views/tiles/salamanca.html": 143,
	"./views/tiles/sarnia.html": 144,
	"./views/tiles/stLouis.html": 145,
	"./views/tiles/wheeling.html": 146,
	"./views/tiles/windsor.html": 147,
	"./views/tiles/z.html": 148,
	"./views/trains.html": 149,
	"./views/turnHistory.html": 150,
	"./views/turnsummary.html": 151,
	"./views/winner.html": 152
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 162;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(33);


/***/ })
/******/ ]);
//# sourceMappingURL=frontend.js.map